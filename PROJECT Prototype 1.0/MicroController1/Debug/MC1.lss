
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  000034c2  00003556  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000aa  008000aa  000035a0  2**0
                  ALLOC
  3 .stab         00002f64  00000000  00000000  000035a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e59  00000000  00000000  00006504  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000735d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000749d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000760d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009256  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a141  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b050  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b2dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000baab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3a       	cpi	r26, 0xAE	; 174
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cd 05 	call	0xb9a	; 0xb9a <main>
      8a:	0c 94 5f 1a 	jmp	0x34be	; 0x34be <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ea       	ldi	r26, 0xA2	; 162
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 ea       	ldi	r24, 0xA2	; 162
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <getPow>:
#include"MC1.h"
#include "avr/delay.h"

uint8 getPow(uint8 pow , uint8 num)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <getPow+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <getPow+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	8c 83       	std	Y+4, r24	; 0x04
     b56:	6d 83       	std	Y+5, r22	; 0x05
	uint8 result = 1;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	8b 83       	std	Y+3, r24	; 0x03
	for( int i = 0; i<pow ; i++)
     b5c:	1a 82       	std	Y+2, r1	; 0x02
     b5e:	19 82       	std	Y+1, r1	; 0x01
     b60:	0b c0       	rjmp	.+22     	; 0xb78 <getPow+0x32>
	{
		result *= num;
     b62:	9b 81       	ldd	r25, Y+3	; 0x03
     b64:	8d 81       	ldd	r24, Y+5	; 0x05
     b66:	98 9f       	mul	r25, r24
     b68:	80 2d       	mov	r24, r0
     b6a:	11 24       	eor	r1, r1
     b6c:	8b 83       	std	Y+3, r24	; 0x03
#include "avr/delay.h"

uint8 getPow(uint8 pow , uint8 num)
{
	uint8 result = 1;
	for( int i = 0; i<pow ; i++)
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	01 96       	adiw	r24, 0x01	; 1
     b74:	9a 83       	std	Y+2, r25	; 0x02
     b76:	89 83       	std	Y+1, r24	; 0x01
     b78:	8c 81       	ldd	r24, Y+4	; 0x04
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	9a 81       	ldd	r25, Y+2	; 0x02
     b82:	82 17       	cp	r24, r18
     b84:	93 07       	cpc	r25, r19
     b86:	6c f3       	brlt	.-38     	; 0xb62 <getPow+0x1c>
	{
		result *= num;
	}
	return result;
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
}
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	08 95       	ret

00000b9a <main>:

void main()
{
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	c6 5e       	subi	r28, 0xE6	; 230
     ba8:	d0 40       	sbci	r29, 0x00	; 0
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
	uint8 counter = 0;
     bb4:	fe 01       	movw	r30, r28
     bb6:	e3 52       	subi	r30, 0x23	; 35
     bb8:	ff 4f       	sbci	r31, 0xFF	; 255
     bba:	10 82       	st	Z, r1
	uint8 passArr1[3];
	uint8 passArr2[3];
	uint8 passEntered[3];
	uint8 password1 = 0;
     bbc:	fe 01       	movw	r30, r28
     bbe:	e4 52       	subi	r30, 0x24	; 36
     bc0:	ff 4f       	sbci	r31, 0xFF	; 255
     bc2:	10 82       	st	Z, r1
	uint8 password2 = 0;
     bc4:	fe 01       	movw	r30, r28
     bc6:	e5 52       	subi	r30, 0x25	; 37
     bc8:	ff 4f       	sbci	r31, 0xFF	; 255
     bca:	10 82       	st	Z, r1
	uint8 sentpassword=0;
     bcc:	fe 01       	movw	r30, r28
     bce:	e6 52       	subi	r30, 0x26	; 38
     bd0:	ff 4f       	sbci	r31, 0xFF	; 255
     bd2:	10 82       	st	Z, r1
	uint8 noOfPasswordSetting;
	uint8 noOfPasswordEntering;
	uint8 numPressed;
	uint8 M2_reply;
	uint8 passIsTrue=0;
     bd4:	fe 01       	movw	r30, r28
     bd6:	eb 52       	subi	r30, 0x2B	; 43
     bd8:	ff 4f       	sbci	r31, 0xFF	; 255
     bda:	10 82       	st	Z, r1
	uint8 passFlag;
	DDRB = 0XFF;
     bdc:	e7 e3       	ldi	r30, 0x37	; 55
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	8f ef       	ldi	r24, 0xFF	; 255
     be2:	80 83       	st	Z, r24
	PORTB = 0;
     be4:	e8 e3       	ldi	r30, 0x38	; 56
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	10 82       	st	Z, r1
	uint8 test;

	LCD_init();
     bea:	0e 94 04 14 	call	0x2808	; 0x2808 <LCD_init>
	UART_init();
     bee:	0e 94 37 19 	call	0x326e	; 0x326e <UART_init>
     bf2:	fe 01       	movw	r30, r28
     bf4:	e1 53       	subi	r30, 0x31	; 49
     bf6:	ff 4f       	sbci	r31, 0xFF	; 255
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a8 ec       	ldi	r26, 0xC8	; 200
     bfe:	b2 e4       	ldi	r27, 0x42	; 66
     c00:	80 83       	st	Z, r24
     c02:	91 83       	std	Z+1, r25	; 0x01
     c04:	a2 83       	std	Z+2, r26	; 0x02
     c06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c08:	8e 01       	movw	r16, r28
     c0a:	05 53       	subi	r16, 0x35	; 53
     c0c:	1f 4f       	sbci	r17, 0xFF	; 255
     c0e:	fe 01       	movw	r30, r28
     c10:	e1 53       	subi	r30, 0x31	; 49
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	60 81       	ld	r22, Z
     c16:	71 81       	ldd	r23, Z+1	; 0x01
     c18:	82 81       	ldd	r24, Z+2	; 0x02
     c1a:	93 81       	ldd	r25, Z+3	; 0x03
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	4a e7       	ldi	r20, 0x7A	; 122
     c22:	53 e4       	ldi	r21, 0x43	; 67
     c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c28:	dc 01       	movw	r26, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	f8 01       	movw	r30, r16
     c2e:	80 83       	st	Z, r24
     c30:	91 83       	std	Z+1, r25	; 0x01
     c32:	a2 83       	std	Z+2, r26	; 0x02
     c34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c36:	fe 01       	movw	r30, r28
     c38:	e5 53       	subi	r30, 0x35	; 53
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	60 81       	ld	r22, Z
     c3e:	71 81       	ldd	r23, Z+1	; 0x01
     c40:	82 81       	ldd	r24, Z+2	; 0x02
     c42:	93 81       	ldd	r25, Z+3	; 0x03
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	40 e8       	ldi	r20, 0x80	; 128
     c4a:	5f e3       	ldi	r21, 0x3F	; 63
     c4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c50:	88 23       	and	r24, r24
     c52:	44 f4       	brge	.+16     	; 0xc64 <main+0xca>
		__ticks = 1;
     c54:	fe 01       	movw	r30, r28
     c56:	e7 53       	subi	r30, 0x37	; 55
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	91 83       	std	Z+1, r25	; 0x01
     c60:	80 83       	st	Z, r24
     c62:	64 c0       	rjmp	.+200    	; 0xd2c <main+0x192>
	else if (__tmp > 65535)
     c64:	fe 01       	movw	r30, r28
     c66:	e5 53       	subi	r30, 0x35	; 53
     c68:	ff 4f       	sbci	r31, 0xFF	; 255
     c6a:	60 81       	ld	r22, Z
     c6c:	71 81       	ldd	r23, Z+1	; 0x01
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	3f ef       	ldi	r19, 0xFF	; 255
     c76:	4f e7       	ldi	r20, 0x7F	; 127
     c78:	57 e4       	ldi	r21, 0x47	; 71
     c7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c7e:	18 16       	cp	r1, r24
     c80:	0c f0       	brlt	.+2      	; 0xc84 <main+0xea>
     c82:	43 c0       	rjmp	.+134    	; 0xd0a <main+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c84:	fe 01       	movw	r30, r28
     c86:	e1 53       	subi	r30, 0x31	; 49
     c88:	ff 4f       	sbci	r31, 0xFF	; 255
     c8a:	60 81       	ld	r22, Z
     c8c:	71 81       	ldd	r23, Z+1	; 0x01
     c8e:	82 81       	ldd	r24, Z+2	; 0x02
     c90:	93 81       	ldd	r25, Z+3	; 0x03
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e2       	ldi	r20, 0x20	; 32
     c98:	51 e4       	ldi	r21, 0x41	; 65
     c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c9e:	dc 01       	movw	r26, r24
     ca0:	cb 01       	movw	r24, r22
     ca2:	8e 01       	movw	r16, r28
     ca4:	07 53       	subi	r16, 0x37	; 55
     ca6:	1f 4f       	sbci	r17, 0xFF	; 255
     ca8:	bc 01       	movw	r22, r24
     caa:	cd 01       	movw	r24, r26
     cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	f8 01       	movw	r30, r16
     cb6:	91 83       	std	Z+1, r25	; 0x01
     cb8:	80 83       	st	Z, r24
     cba:	1f c0       	rjmp	.+62     	; 0xcfa <main+0x160>
     cbc:	fe 01       	movw	r30, r28
     cbe:	e9 53       	subi	r30, 0x39	; 57
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	89 e1       	ldi	r24, 0x19	; 25
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	91 83       	std	Z+1, r25	; 0x01
     cc8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cca:	fe 01       	movw	r30, r28
     ccc:	e9 53       	subi	r30, 0x39	; 57
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	f1 f7       	brne	.-4      	; 0xcd4 <main+0x13a>
     cd8:	fe 01       	movw	r30, r28
     cda:	e9 53       	subi	r30, 0x39	; 57
     cdc:	ff 4f       	sbci	r31, 0xFF	; 255
     cde:	91 83       	std	Z+1, r25	; 0x01
     ce0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce2:	de 01       	movw	r26, r28
     ce4:	a7 53       	subi	r26, 0x37	; 55
     ce6:	bf 4f       	sbci	r27, 0xFF	; 255
     ce8:	fe 01       	movw	r30, r28
     cea:	e7 53       	subi	r30, 0x37	; 55
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	80 81       	ld	r24, Z
     cf0:	91 81       	ldd	r25, Z+1	; 0x01
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	11 96       	adiw	r26, 0x01	; 1
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cfa:	fe 01       	movw	r30, r28
     cfc:	e7 53       	subi	r30, 0x37	; 55
     cfe:	ff 4f       	sbci	r31, 0xFF	; 255
     d00:	80 81       	ld	r24, Z
     d02:	91 81       	ldd	r25, Z+1	; 0x01
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	d1 f6       	brne	.-76     	; 0xcbc <main+0x122>
     d08:	27 c0       	rjmp	.+78     	; 0xd58 <main+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d0a:	8e 01       	movw	r16, r28
     d0c:	07 53       	subi	r16, 0x37	; 55
     d0e:	1f 4f       	sbci	r17, 0xFF	; 255
     d10:	fe 01       	movw	r30, r28
     d12:	e5 53       	subi	r30, 0x35	; 53
     d14:	ff 4f       	sbci	r31, 0xFF	; 255
     d16:	60 81       	ld	r22, Z
     d18:	71 81       	ldd	r23, Z+1	; 0x01
     d1a:	82 81       	ldd	r24, Z+2	; 0x02
     d1c:	93 81       	ldd	r25, Z+3	; 0x03
     d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	f8 01       	movw	r30, r16
     d28:	91 83       	std	Z+1, r25	; 0x01
     d2a:	80 83       	st	Z, r24
     d2c:	de 01       	movw	r26, r28
     d2e:	ab 53       	subi	r26, 0x3B	; 59
     d30:	bf 4f       	sbci	r27, 0xFF	; 255
     d32:	fe 01       	movw	r30, r28
     d34:	e7 53       	subi	r30, 0x37	; 55
     d36:	ff 4f       	sbci	r31, 0xFF	; 255
     d38:	80 81       	ld	r24, Z
     d3a:	91 81       	ldd	r25, Z+1	; 0x01
     d3c:	8d 93       	st	X+, r24
     d3e:	9c 93       	st	X, r25
     d40:	fe 01       	movw	r30, r28
     d42:	eb 53       	subi	r30, 0x3B	; 59
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	80 81       	ld	r24, Z
     d48:	91 81       	ldd	r25, Z+1	; 0x01
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <main+0x1b0>
     d4e:	fe 01       	movw	r30, r28
     d50:	eb 53       	subi	r30, 0x3B	; 59
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	91 83       	std	Z+1, r25	; 0x01
     d56:	80 83       	st	Z, r24
	do
	{
		//Here we're entering the password for the 1st time
		_delay_ms(100);
		//recieveFlag = 0;
		noOfPasswordSetting = 0;
     d58:	fe 01       	movw	r30, r28
     d5a:	e7 52       	subi	r30, 0x27	; 39
     d5c:	ff 4f       	sbci	r31, 0xFF	; 255
     d5e:	10 82       	st	Z, r1

		LCD_clearScreen();
     d60:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Set Pass");
     d64:	20 e6       	ldi	r18, 0x60	; 96
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	a9 01       	movw	r20, r18
     d6e:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"Pass:");
     d72:	29 e6       	ldi	r18, 0x69	; 105
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	a9 01       	movw	r20, r18
     d7c:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayStringRowColumn>
		LCD_goToRowColumn(1,6);
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	66 e0       	ldi	r22, 0x06	; 6
     d84:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_goToRowColumn>

		//Enter password of 3 numbers
		for(counter = 0 ; counter < 3 ; counter++)
     d88:	fe 01       	movw	r30, r28
     d8a:	e3 52       	subi	r30, 0x23	; 35
     d8c:	ff 4f       	sbci	r31, 0xFF	; 255
     d8e:	10 82       	st	Z, r1
     d90:	8e c1       	rjmp	.+796    	; 0x10ae <main+0x514>
     d92:	fe 01       	movw	r30, r28
     d94:	ef 53       	subi	r30, 0x3F	; 63
     d96:	ff 4f       	sbci	r31, 0xFF	; 255
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	aa e7       	ldi	r26, 0x7A	; 122
     d9e:	b4 e4       	ldi	r27, 0x44	; 68
     da0:	80 83       	st	Z, r24
     da2:	91 83       	std	Z+1, r25	; 0x01
     da4:	a2 83       	std	Z+2, r26	; 0x02
     da6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da8:	8e 01       	movw	r16, r28
     daa:	03 54       	subi	r16, 0x43	; 67
     dac:	1f 4f       	sbci	r17, 0xFF	; 255
     dae:	fe 01       	movw	r30, r28
     db0:	ef 53       	subi	r30, 0x3F	; 63
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	60 81       	ld	r22, Z
     db6:	71 81       	ldd	r23, Z+1	; 0x01
     db8:	82 81       	ldd	r24, Z+2	; 0x02
     dba:	93 81       	ldd	r25, Z+3	; 0x03
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	4a e7       	ldi	r20, 0x7A	; 122
     dc2:	53 e4       	ldi	r21, 0x43	; 67
     dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	f8 01       	movw	r30, r16
     dce:	80 83       	st	Z, r24
     dd0:	91 83       	std	Z+1, r25	; 0x01
     dd2:	a2 83       	std	Z+2, r26	; 0x02
     dd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dd6:	fe 01       	movw	r30, r28
     dd8:	e3 54       	subi	r30, 0x43	; 67
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	60 81       	ld	r22, Z
     dde:	71 81       	ldd	r23, Z+1	; 0x01
     de0:	82 81       	ldd	r24, Z+2	; 0x02
     de2:	93 81       	ldd	r25, Z+3	; 0x03
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	40 e8       	ldi	r20, 0x80	; 128
     dea:	5f e3       	ldi	r21, 0x3F	; 63
     dec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     df0:	88 23       	and	r24, r24
     df2:	44 f4       	brge	.+16     	; 0xe04 <main+0x26a>
		__ticks = 1;
     df4:	fe 01       	movw	r30, r28
     df6:	e5 54       	subi	r30, 0x45	; 69
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	91 83       	std	Z+1, r25	; 0x01
     e00:	80 83       	st	Z, r24
     e02:	64 c0       	rjmp	.+200    	; 0xecc <main+0x332>
	else if (__tmp > 65535)
     e04:	fe 01       	movw	r30, r28
     e06:	e3 54       	subi	r30, 0x43	; 67
     e08:	ff 4f       	sbci	r31, 0xFF	; 255
     e0a:	60 81       	ld	r22, Z
     e0c:	71 81       	ldd	r23, Z+1	; 0x01
     e0e:	82 81       	ldd	r24, Z+2	; 0x02
     e10:	93 81       	ldd	r25, Z+3	; 0x03
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	3f ef       	ldi	r19, 0xFF	; 255
     e16:	4f e7       	ldi	r20, 0x7F	; 127
     e18:	57 e4       	ldi	r21, 0x47	; 71
     e1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e1e:	18 16       	cp	r1, r24
     e20:	0c f0       	brlt	.+2      	; 0xe24 <main+0x28a>
     e22:	43 c0       	rjmp	.+134    	; 0xeaa <main+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e24:	fe 01       	movw	r30, r28
     e26:	ef 53       	subi	r30, 0x3F	; 63
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	60 81       	ld	r22, Z
     e2c:	71 81       	ldd	r23, Z+1	; 0x01
     e2e:	82 81       	ldd	r24, Z+2	; 0x02
     e30:	93 81       	ldd	r25, Z+3	; 0x03
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	40 e2       	ldi	r20, 0x20	; 32
     e38:	51 e4       	ldi	r21, 0x41	; 65
     e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	8e 01       	movw	r16, r28
     e44:	05 54       	subi	r16, 0x45	; 69
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
     e48:	bc 01       	movw	r22, r24
     e4a:	cd 01       	movw	r24, r26
     e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	f8 01       	movw	r30, r16
     e56:	91 83       	std	Z+1, r25	; 0x01
     e58:	80 83       	st	Z, r24
     e5a:	1f c0       	rjmp	.+62     	; 0xe9a <main+0x300>
     e5c:	fe 01       	movw	r30, r28
     e5e:	e7 54       	subi	r30, 0x47	; 71
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	89 e1       	ldi	r24, 0x19	; 25
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	91 83       	std	Z+1, r25	; 0x01
     e68:	80 83       	st	Z, r24
     e6a:	fe 01       	movw	r30, r28
     e6c:	e7 54       	subi	r30, 0x47	; 71
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	80 81       	ld	r24, Z
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	f1 f7       	brne	.-4      	; 0xe74 <main+0x2da>
     e78:	fe 01       	movw	r30, r28
     e7a:	e7 54       	subi	r30, 0x47	; 71
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	91 83       	std	Z+1, r25	; 0x01
     e80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e82:	de 01       	movw	r26, r28
     e84:	a5 54       	subi	r26, 0x45	; 69
     e86:	bf 4f       	sbci	r27, 0xFF	; 255
     e88:	fe 01       	movw	r30, r28
     e8a:	e5 54       	subi	r30, 0x45	; 69
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	80 81       	ld	r24, Z
     e90:	91 81       	ldd	r25, Z+1	; 0x01
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	11 96       	adiw	r26, 0x01	; 1
     e96:	9c 93       	st	X, r25
     e98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e9a:	fe 01       	movw	r30, r28
     e9c:	e5 54       	subi	r30, 0x45	; 69
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	80 81       	ld	r24, Z
     ea2:	91 81       	ldd	r25, Z+1	; 0x01
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	d1 f6       	brne	.-76     	; 0xe5c <main+0x2c2>
     ea8:	27 c0       	rjmp	.+78     	; 0xef8 <main+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eaa:	8e 01       	movw	r16, r28
     eac:	05 54       	subi	r16, 0x45	; 69
     eae:	1f 4f       	sbci	r17, 0xFF	; 255
     eb0:	fe 01       	movw	r30, r28
     eb2:	e3 54       	subi	r30, 0x43	; 67
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	60 81       	ld	r22, Z
     eb8:	71 81       	ldd	r23, Z+1	; 0x01
     eba:	82 81       	ldd	r24, Z+2	; 0x02
     ebc:	93 81       	ldd	r25, Z+3	; 0x03
     ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	f8 01       	movw	r30, r16
     ec8:	91 83       	std	Z+1, r25	; 0x01
     eca:	80 83       	st	Z, r24
     ecc:	de 01       	movw	r26, r28
     ece:	a9 54       	subi	r26, 0x49	; 73
     ed0:	bf 4f       	sbci	r27, 0xFF	; 255
     ed2:	fe 01       	movw	r30, r28
     ed4:	e5 54       	subi	r30, 0x45	; 69
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	80 81       	ld	r24, Z
     eda:	91 81       	ldd	r25, Z+1	; 0x01
     edc:	8d 93       	st	X+, r24
     ede:	9c 93       	st	X, r25
     ee0:	fe 01       	movw	r30, r28
     ee2:	e9 54       	subi	r30, 0x49	; 73
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	80 81       	ld	r24, Z
     ee8:	91 81       	ldd	r25, Z+1	; 0x01
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	f1 f7       	brne	.-4      	; 0xeea <main+0x350>
     eee:	fe 01       	movw	r30, r28
     ef0:	e9 54       	subi	r30, 0x49	; 73
     ef2:	ff 4f       	sbci	r31, 0xFF	; 255
     ef4:	91 83       	std	Z+1, r25	; 0x01
     ef6:	80 83       	st	Z, r24
		{
			_delay_ms(1000);
			//get number preesed
			numPressed = KeyPad_getPressedKey();
     ef8:	0e 94 06 13 	call	0x260c	; 0x260c <KeyPad_getPressedKey>
     efc:	fe 01       	movw	r30, r28
     efe:	e9 52       	subi	r30, 0x29	; 41
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	80 83       	st	Z, r24
     f04:	fe 01       	movw	r30, r28
     f06:	ed 54       	subi	r30, 0x4D	; 77
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	aa e7       	ldi	r26, 0x7A	; 122
     f10:	b4 e4       	ldi	r27, 0x44	; 68
     f12:	80 83       	st	Z, r24
     f14:	91 83       	std	Z+1, r25	; 0x01
     f16:	a2 83       	std	Z+2, r26	; 0x02
     f18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f1a:	8e 01       	movw	r16, r28
     f1c:	01 55       	subi	r16, 0x51	; 81
     f1e:	1f 4f       	sbci	r17, 0xFF	; 255
     f20:	fe 01       	movw	r30, r28
     f22:	ed 54       	subi	r30, 0x4D	; 77
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	60 81       	ld	r22, Z
     f28:	71 81       	ldd	r23, Z+1	; 0x01
     f2a:	82 81       	ldd	r24, Z+2	; 0x02
     f2c:	93 81       	ldd	r25, Z+3	; 0x03
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	4a e7       	ldi	r20, 0x7A	; 122
     f34:	53 e4       	ldi	r21, 0x43	; 67
     f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	f8 01       	movw	r30, r16
     f40:	80 83       	st	Z, r24
     f42:	91 83       	std	Z+1, r25	; 0x01
     f44:	a2 83       	std	Z+2, r26	; 0x02
     f46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f48:	fe 01       	movw	r30, r28
     f4a:	e1 55       	subi	r30, 0x51	; 81
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	60 81       	ld	r22, Z
     f50:	71 81       	ldd	r23, Z+1	; 0x01
     f52:	82 81       	ldd	r24, Z+2	; 0x02
     f54:	93 81       	ldd	r25, Z+3	; 0x03
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e8       	ldi	r20, 0x80	; 128
     f5c:	5f e3       	ldi	r21, 0x3F	; 63
     f5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f62:	88 23       	and	r24, r24
     f64:	44 f4       	brge	.+16     	; 0xf76 <main+0x3dc>
		__ticks = 1;
     f66:	fe 01       	movw	r30, r28
     f68:	e3 55       	subi	r30, 0x53	; 83
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	91 83       	std	Z+1, r25	; 0x01
     f72:	80 83       	st	Z, r24
     f74:	64 c0       	rjmp	.+200    	; 0x103e <main+0x4a4>
	else if (__tmp > 65535)
     f76:	fe 01       	movw	r30, r28
     f78:	e1 55       	subi	r30, 0x51	; 81
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	60 81       	ld	r22, Z
     f7e:	71 81       	ldd	r23, Z+1	; 0x01
     f80:	82 81       	ldd	r24, Z+2	; 0x02
     f82:	93 81       	ldd	r25, Z+3	; 0x03
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	3f ef       	ldi	r19, 0xFF	; 255
     f88:	4f e7       	ldi	r20, 0x7F	; 127
     f8a:	57 e4       	ldi	r21, 0x47	; 71
     f8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f90:	18 16       	cp	r1, r24
     f92:	0c f0       	brlt	.+2      	; 0xf96 <main+0x3fc>
     f94:	43 c0       	rjmp	.+134    	; 0x101c <main+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f96:	fe 01       	movw	r30, r28
     f98:	ed 54       	subi	r30, 0x4D	; 77
     f9a:	ff 4f       	sbci	r31, 0xFF	; 255
     f9c:	60 81       	ld	r22, Z
     f9e:	71 81       	ldd	r23, Z+1	; 0x01
     fa0:	82 81       	ldd	r24, Z+2	; 0x02
     fa2:	93 81       	ldd	r25, Z+3	; 0x03
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e2       	ldi	r20, 0x20	; 32
     faa:	51 e4       	ldi	r21, 0x41	; 65
     fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	8e 01       	movw	r16, r28
     fb6:	03 55       	subi	r16, 0x53	; 83
     fb8:	1f 4f       	sbci	r17, 0xFF	; 255
     fba:	bc 01       	movw	r22, r24
     fbc:	cd 01       	movw	r24, r26
     fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	f8 01       	movw	r30, r16
     fc8:	91 83       	std	Z+1, r25	; 0x01
     fca:	80 83       	st	Z, r24
     fcc:	1f c0       	rjmp	.+62     	; 0x100c <main+0x472>
     fce:	fe 01       	movw	r30, r28
     fd0:	e5 55       	subi	r30, 0x55	; 85
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	89 e1       	ldi	r24, 0x19	; 25
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	80 83       	st	Z, r24
     fdc:	fe 01       	movw	r30, r28
     fde:	e5 55       	subi	r30, 0x55	; 85
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	80 81       	ld	r24, Z
     fe4:	91 81       	ldd	r25, Z+1	; 0x01
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	f1 f7       	brne	.-4      	; 0xfe6 <main+0x44c>
     fea:	fe 01       	movw	r30, r28
     fec:	e5 55       	subi	r30, 0x55	; 85
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	91 83       	std	Z+1, r25	; 0x01
     ff2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff4:	de 01       	movw	r26, r28
     ff6:	a3 55       	subi	r26, 0x53	; 83
     ff8:	bf 4f       	sbci	r27, 0xFF	; 255
     ffa:	fe 01       	movw	r30, r28
     ffc:	e3 55       	subi	r30, 0x53	; 83
     ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    1000:	80 81       	ld	r24, Z
    1002:	91 81       	ldd	r25, Z+1	; 0x01
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	11 96       	adiw	r26, 0x01	; 1
    1008:	9c 93       	st	X, r25
    100a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    100c:	fe 01       	movw	r30, r28
    100e:	e3 55       	subi	r30, 0x53	; 83
    1010:	ff 4f       	sbci	r31, 0xFF	; 255
    1012:	80 81       	ld	r24, Z
    1014:	91 81       	ldd	r25, Z+1	; 0x01
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	d1 f6       	brne	.-76     	; 0xfce <main+0x434>
    101a:	27 c0       	rjmp	.+78     	; 0x106a <main+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    101c:	8e 01       	movw	r16, r28
    101e:	03 55       	subi	r16, 0x53	; 83
    1020:	1f 4f       	sbci	r17, 0xFF	; 255
    1022:	fe 01       	movw	r30, r28
    1024:	e1 55       	subi	r30, 0x51	; 81
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	60 81       	ld	r22, Z
    102a:	71 81       	ldd	r23, Z+1	; 0x01
    102c:	82 81       	ldd	r24, Z+2	; 0x02
    102e:	93 81       	ldd	r25, Z+3	; 0x03
    1030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	f8 01       	movw	r30, r16
    103a:	91 83       	std	Z+1, r25	; 0x01
    103c:	80 83       	st	Z, r24
    103e:	de 01       	movw	r26, r28
    1040:	a7 55       	subi	r26, 0x57	; 87
    1042:	bf 4f       	sbci	r27, 0xFF	; 255
    1044:	fe 01       	movw	r30, r28
    1046:	e3 55       	subi	r30, 0x53	; 83
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	80 81       	ld	r24, Z
    104c:	91 81       	ldd	r25, Z+1	; 0x01
    104e:	8d 93       	st	X+, r24
    1050:	9c 93       	st	X, r25
    1052:	fe 01       	movw	r30, r28
    1054:	e7 55       	subi	r30, 0x57	; 87
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	80 81       	ld	r24, Z
    105a:	91 81       	ldd	r25, Z+1	; 0x01
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <main+0x4c2>
    1060:	fe 01       	movw	r30, r28
    1062:	e7 55       	subi	r30, 0x57	; 87
    1064:	ff 4f       	sbci	r31, 0xFF	; 255
    1066:	91 83       	std	Z+1, r25	; 0x01
    1068:	80 83       	st	Z, r24
			_delay_ms(1000);
			LCD_intgerToString(numPressed);
    106a:	fe 01       	movw	r30, r28
    106c:	e9 52       	subi	r30, 0x29	; 41
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	80 81       	ld	r24, Z
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 9b 18 	call	0x3136	; 0x3136 <LCD_intgerToString>
			//store this number in an array
			passArr1[counter]=numPressed;
    107a:	fe 01       	movw	r30, r28
    107c:	e3 52       	subi	r30, 0x23	; 35
    107e:	ff 4f       	sbci	r31, 0xFF	; 255
    1080:	80 81       	ld	r24, Z
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	ce 01       	movw	r24, r28
    1088:	82 52       	subi	r24, 0x22	; 34
    108a:	9f 4f       	sbci	r25, 0xFF	; 255
    108c:	dc 01       	movw	r26, r24
    108e:	a2 0f       	add	r26, r18
    1090:	b3 1f       	adc	r27, r19
    1092:	fe 01       	movw	r30, r28
    1094:	e9 52       	subi	r30, 0x29	; 41
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	80 81       	ld	r24, Z
    109a:	8c 93       	st	X, r24
		LCD_displayStringRowColumn(0,0,"Set Pass");
		LCD_displayStringRowColumn(1,0,"Pass:");
		LCD_goToRowColumn(1,6);

		//Enter password of 3 numbers
		for(counter = 0 ; counter < 3 ; counter++)
    109c:	de 01       	movw	r26, r28
    109e:	a3 52       	subi	r26, 0x23	; 35
    10a0:	bf 4f       	sbci	r27, 0xFF	; 255
    10a2:	fe 01       	movw	r30, r28
    10a4:	e3 52       	subi	r30, 0x23	; 35
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	80 81       	ld	r24, Z
    10aa:	8f 5f       	subi	r24, 0xFF	; 255
    10ac:	8c 93       	st	X, r24
    10ae:	fe 01       	movw	r30, r28
    10b0:	e3 52       	subi	r30, 0x23	; 35
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	80 81       	ld	r24, Z
    10b6:	83 30       	cpi	r24, 0x03	; 3
    10b8:	08 f4       	brcc	.+2      	; 0x10bc <main+0x522>
    10ba:	6b ce       	rjmp	.-810    	; 0xd92 <main+0x1f8>
    10bc:	fe 01       	movw	r30, r28
    10be:	eb 55       	subi	r30, 0x5B	; 91
    10c0:	ff 4f       	sbci	r31, 0xFF	; 255
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	aa ef       	ldi	r26, 0xFA	; 250
    10c8:	b3 e4       	ldi	r27, 0x43	; 67
    10ca:	80 83       	st	Z, r24
    10cc:	91 83       	std	Z+1, r25	; 0x01
    10ce:	a2 83       	std	Z+2, r26	; 0x02
    10d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d2:	8e 01       	movw	r16, r28
    10d4:	0f 55       	subi	r16, 0x5F	; 95
    10d6:	1f 4f       	sbci	r17, 0xFF	; 255
    10d8:	fe 01       	movw	r30, r28
    10da:	eb 55       	subi	r30, 0x5B	; 91
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	60 81       	ld	r22, Z
    10e0:	71 81       	ldd	r23, Z+1	; 0x01
    10e2:	82 81       	ldd	r24, Z+2	; 0x02
    10e4:	93 81       	ldd	r25, Z+3	; 0x03
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	4a e7       	ldi	r20, 0x7A	; 122
    10ec:	53 e4       	ldi	r21, 0x43	; 67
    10ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	f8 01       	movw	r30, r16
    10f8:	80 83       	st	Z, r24
    10fa:	91 83       	std	Z+1, r25	; 0x01
    10fc:	a2 83       	std	Z+2, r26	; 0x02
    10fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1100:	fe 01       	movw	r30, r28
    1102:	ef 55       	subi	r30, 0x5F	; 95
    1104:	ff 4f       	sbci	r31, 0xFF	; 255
    1106:	60 81       	ld	r22, Z
    1108:	71 81       	ldd	r23, Z+1	; 0x01
    110a:	82 81       	ldd	r24, Z+2	; 0x02
    110c:	93 81       	ldd	r25, Z+3	; 0x03
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e8       	ldi	r20, 0x80	; 128
    1114:	5f e3       	ldi	r21, 0x3F	; 63
    1116:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    111a:	88 23       	and	r24, r24
    111c:	44 f4       	brge	.+16     	; 0x112e <main+0x594>
		__ticks = 1;
    111e:	fe 01       	movw	r30, r28
    1120:	e1 56       	subi	r30, 0x61	; 97
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	91 83       	std	Z+1, r25	; 0x01
    112a:	80 83       	st	Z, r24
    112c:	64 c0       	rjmp	.+200    	; 0x11f6 <main+0x65c>
	else if (__tmp > 65535)
    112e:	fe 01       	movw	r30, r28
    1130:	ef 55       	subi	r30, 0x5F	; 95
    1132:	ff 4f       	sbci	r31, 0xFF	; 255
    1134:	60 81       	ld	r22, Z
    1136:	71 81       	ldd	r23, Z+1	; 0x01
    1138:	82 81       	ldd	r24, Z+2	; 0x02
    113a:	93 81       	ldd	r25, Z+3	; 0x03
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	3f ef       	ldi	r19, 0xFF	; 255
    1140:	4f e7       	ldi	r20, 0x7F	; 127
    1142:	57 e4       	ldi	r21, 0x47	; 71
    1144:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1148:	18 16       	cp	r1, r24
    114a:	0c f0       	brlt	.+2      	; 0x114e <main+0x5b4>
    114c:	43 c0       	rjmp	.+134    	; 0x11d4 <main+0x63a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    114e:	fe 01       	movw	r30, r28
    1150:	eb 55       	subi	r30, 0x5B	; 91
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	60 81       	ld	r22, Z
    1156:	71 81       	ldd	r23, Z+1	; 0x01
    1158:	82 81       	ldd	r24, Z+2	; 0x02
    115a:	93 81       	ldd	r25, Z+3	; 0x03
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	40 e2       	ldi	r20, 0x20	; 32
    1162:	51 e4       	ldi	r21, 0x41	; 65
    1164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	8e 01       	movw	r16, r28
    116e:	01 56       	subi	r16, 0x61	; 97
    1170:	1f 4f       	sbci	r17, 0xFF	; 255
    1172:	bc 01       	movw	r22, r24
    1174:	cd 01       	movw	r24, r26
    1176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	f8 01       	movw	r30, r16
    1180:	91 83       	std	Z+1, r25	; 0x01
    1182:	80 83       	st	Z, r24
    1184:	1f c0       	rjmp	.+62     	; 0x11c4 <main+0x62a>
    1186:	fe 01       	movw	r30, r28
    1188:	e3 56       	subi	r30, 0x63	; 99
    118a:	ff 4f       	sbci	r31, 0xFF	; 255
    118c:	89 e1       	ldi	r24, 0x19	; 25
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	91 83       	std	Z+1, r25	; 0x01
    1192:	80 83       	st	Z, r24
    1194:	fe 01       	movw	r30, r28
    1196:	e3 56       	subi	r30, 0x63	; 99
    1198:	ff 4f       	sbci	r31, 0xFF	; 255
    119a:	80 81       	ld	r24, Z
    119c:	91 81       	ldd	r25, Z+1	; 0x01
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	f1 f7       	brne	.-4      	; 0x119e <main+0x604>
    11a2:	fe 01       	movw	r30, r28
    11a4:	e3 56       	subi	r30, 0x63	; 99
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	91 83       	std	Z+1, r25	; 0x01
    11aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ac:	de 01       	movw	r26, r28
    11ae:	a1 56       	subi	r26, 0x61	; 97
    11b0:	bf 4f       	sbci	r27, 0xFF	; 255
    11b2:	fe 01       	movw	r30, r28
    11b4:	e1 56       	subi	r30, 0x61	; 97
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	80 81       	ld	r24, Z
    11ba:	91 81       	ldd	r25, Z+1	; 0x01
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	11 96       	adiw	r26, 0x01	; 1
    11c0:	9c 93       	st	X, r25
    11c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c4:	fe 01       	movw	r30, r28
    11c6:	e1 56       	subi	r30, 0x61	; 97
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	80 81       	ld	r24, Z
    11cc:	91 81       	ldd	r25, Z+1	; 0x01
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	d1 f6       	brne	.-76     	; 0x1186 <main+0x5ec>
    11d2:	27 c0       	rjmp	.+78     	; 0x1222 <main+0x688>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d4:	8e 01       	movw	r16, r28
    11d6:	01 56       	subi	r16, 0x61	; 97
    11d8:	1f 4f       	sbci	r17, 0xFF	; 255
    11da:	fe 01       	movw	r30, r28
    11dc:	ef 55       	subi	r30, 0x5F	; 95
    11de:	ff 4f       	sbci	r31, 0xFF	; 255
    11e0:	60 81       	ld	r22, Z
    11e2:	71 81       	ldd	r23, Z+1	; 0x01
    11e4:	82 81       	ldd	r24, Z+2	; 0x02
    11e6:	93 81       	ldd	r25, Z+3	; 0x03
    11e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	f8 01       	movw	r30, r16
    11f2:	91 83       	std	Z+1, r25	; 0x01
    11f4:	80 83       	st	Z, r24
    11f6:	de 01       	movw	r26, r28
    11f8:	a5 56       	subi	r26, 0x65	; 101
    11fa:	bf 4f       	sbci	r27, 0xFF	; 255
    11fc:	fe 01       	movw	r30, r28
    11fe:	e1 56       	subi	r30, 0x61	; 97
    1200:	ff 4f       	sbci	r31, 0xFF	; 255
    1202:	80 81       	ld	r24, Z
    1204:	91 81       	ldd	r25, Z+1	; 0x01
    1206:	8d 93       	st	X+, r24
    1208:	9c 93       	st	X, r25
    120a:	fe 01       	movw	r30, r28
    120c:	e5 56       	subi	r30, 0x65	; 101
    120e:	ff 4f       	sbci	r31, 0xFF	; 255
    1210:	80 81       	ld	r24, Z
    1212:	91 81       	ldd	r25, Z+1	; 0x01
    1214:	01 97       	sbiw	r24, 0x01	; 1
    1216:	f1 f7       	brne	.-4      	; 0x1214 <main+0x67a>
    1218:	fe 01       	movw	r30, r28
    121a:	e5 56       	subi	r30, 0x65	; 101
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	91 83       	std	Z+1, r25	; 0x01
    1220:	80 83       	st	Z, r24

		//Verifying the password
		do
		{
			_delay_ms(500);
			passFlag=0;
    1222:	fe 01       	movw	r30, r28
    1224:	ec 52       	subi	r30, 0x2C	; 44
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	10 82       	st	Z, r1
			noOfPasswordSetting++;
    122a:	de 01       	movw	r26, r28
    122c:	a7 52       	subi	r26, 0x27	; 39
    122e:	bf 4f       	sbci	r27, 0xFF	; 255
    1230:	fe 01       	movw	r30, r28
    1232:	e7 52       	subi	r30, 0x27	; 39
    1234:	ff 4f       	sbci	r31, 0xFF	; 255
    1236:	80 81       	ld	r24, Z
    1238:	8f 5f       	subi	r24, 0xFF	; 255
    123a:	8c 93       	st	X, r24
			LCD_clearScreen();
    123c:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Set Pass again");
    1240:	2f e6       	ldi	r18, 0x6F	; 111
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	a9 01       	movw	r20, r18
    124a:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"Pass:");
    124e:	29 e6       	ldi	r18, 0x69	; 105
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	a9 01       	movw	r20, r18
    1258:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayStringRowColumn>
			LCD_goToRowColumn(1,6);
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	66 e0       	ldi	r22, 0x06	; 6
    1260:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_goToRowColumn>

			for(counter = 0 ; counter < 3 ; counter++)
    1264:	fe 01       	movw	r30, r28
    1266:	e3 52       	subi	r30, 0x23	; 35
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	10 82       	st	Z, r1
    126c:	8e c1       	rjmp	.+796    	; 0x158a <main+0x9f0>
    126e:	fe 01       	movw	r30, r28
    1270:	e9 56       	subi	r30, 0x69	; 105
    1272:	ff 4f       	sbci	r31, 0xFF	; 255
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	aa e7       	ldi	r26, 0x7A	; 122
    127a:	b4 e4       	ldi	r27, 0x44	; 68
    127c:	80 83       	st	Z, r24
    127e:	91 83       	std	Z+1, r25	; 0x01
    1280:	a2 83       	std	Z+2, r26	; 0x02
    1282:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1284:	8e 01       	movw	r16, r28
    1286:	0d 56       	subi	r16, 0x6D	; 109
    1288:	1f 4f       	sbci	r17, 0xFF	; 255
    128a:	fe 01       	movw	r30, r28
    128c:	e9 56       	subi	r30, 0x69	; 105
    128e:	ff 4f       	sbci	r31, 0xFF	; 255
    1290:	60 81       	ld	r22, Z
    1292:	71 81       	ldd	r23, Z+1	; 0x01
    1294:	82 81       	ldd	r24, Z+2	; 0x02
    1296:	93 81       	ldd	r25, Z+3	; 0x03
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	4a e7       	ldi	r20, 0x7A	; 122
    129e:	53 e4       	ldi	r21, 0x43	; 67
    12a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	f8 01       	movw	r30, r16
    12aa:	80 83       	st	Z, r24
    12ac:	91 83       	std	Z+1, r25	; 0x01
    12ae:	a2 83       	std	Z+2, r26	; 0x02
    12b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12b2:	fe 01       	movw	r30, r28
    12b4:	ed 56       	subi	r30, 0x6D	; 109
    12b6:	ff 4f       	sbci	r31, 0xFF	; 255
    12b8:	60 81       	ld	r22, Z
    12ba:	71 81       	ldd	r23, Z+1	; 0x01
    12bc:	82 81       	ldd	r24, Z+2	; 0x02
    12be:	93 81       	ldd	r25, Z+3	; 0x03
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e8       	ldi	r20, 0x80	; 128
    12c6:	5f e3       	ldi	r21, 0x3F	; 63
    12c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12cc:	88 23       	and	r24, r24
    12ce:	44 f4       	brge	.+16     	; 0x12e0 <main+0x746>
		__ticks = 1;
    12d0:	fe 01       	movw	r30, r28
    12d2:	ef 56       	subi	r30, 0x6F	; 111
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	91 83       	std	Z+1, r25	; 0x01
    12dc:	80 83       	st	Z, r24
    12de:	64 c0       	rjmp	.+200    	; 0x13a8 <main+0x80e>
	else if (__tmp > 65535)
    12e0:	fe 01       	movw	r30, r28
    12e2:	ed 56       	subi	r30, 0x6D	; 109
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	60 81       	ld	r22, Z
    12e8:	71 81       	ldd	r23, Z+1	; 0x01
    12ea:	82 81       	ldd	r24, Z+2	; 0x02
    12ec:	93 81       	ldd	r25, Z+3	; 0x03
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	3f ef       	ldi	r19, 0xFF	; 255
    12f2:	4f e7       	ldi	r20, 0x7F	; 127
    12f4:	57 e4       	ldi	r21, 0x47	; 71
    12f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12fa:	18 16       	cp	r1, r24
    12fc:	0c f0       	brlt	.+2      	; 0x1300 <main+0x766>
    12fe:	43 c0       	rjmp	.+134    	; 0x1386 <main+0x7ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1300:	fe 01       	movw	r30, r28
    1302:	e9 56       	subi	r30, 0x69	; 105
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	60 81       	ld	r22, Z
    1308:	71 81       	ldd	r23, Z+1	; 0x01
    130a:	82 81       	ldd	r24, Z+2	; 0x02
    130c:	93 81       	ldd	r25, Z+3	; 0x03
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 e2       	ldi	r20, 0x20	; 32
    1314:	51 e4       	ldi	r21, 0x41	; 65
    1316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	8e 01       	movw	r16, r28
    1320:	0f 56       	subi	r16, 0x6F	; 111
    1322:	1f 4f       	sbci	r17, 0xFF	; 255
    1324:	bc 01       	movw	r22, r24
    1326:	cd 01       	movw	r24, r26
    1328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	f8 01       	movw	r30, r16
    1332:	91 83       	std	Z+1, r25	; 0x01
    1334:	80 83       	st	Z, r24
    1336:	1f c0       	rjmp	.+62     	; 0x1376 <main+0x7dc>
    1338:	fe 01       	movw	r30, r28
    133a:	e1 57       	subi	r30, 0x71	; 113
    133c:	ff 4f       	sbci	r31, 0xFF	; 255
    133e:	89 e1       	ldi	r24, 0x19	; 25
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	91 83       	std	Z+1, r25	; 0x01
    1344:	80 83       	st	Z, r24
    1346:	fe 01       	movw	r30, r28
    1348:	e1 57       	subi	r30, 0x71	; 113
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	80 81       	ld	r24, Z
    134e:	91 81       	ldd	r25, Z+1	; 0x01
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <main+0x7b6>
    1354:	fe 01       	movw	r30, r28
    1356:	e1 57       	subi	r30, 0x71	; 113
    1358:	ff 4f       	sbci	r31, 0xFF	; 255
    135a:	91 83       	std	Z+1, r25	; 0x01
    135c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135e:	de 01       	movw	r26, r28
    1360:	af 56       	subi	r26, 0x6F	; 111
    1362:	bf 4f       	sbci	r27, 0xFF	; 255
    1364:	fe 01       	movw	r30, r28
    1366:	ef 56       	subi	r30, 0x6F	; 111
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	80 81       	ld	r24, Z
    136c:	91 81       	ldd	r25, Z+1	; 0x01
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	11 96       	adiw	r26, 0x01	; 1
    1372:	9c 93       	st	X, r25
    1374:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1376:	fe 01       	movw	r30, r28
    1378:	ef 56       	subi	r30, 0x6F	; 111
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	80 81       	ld	r24, Z
    137e:	91 81       	ldd	r25, Z+1	; 0x01
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	d1 f6       	brne	.-76     	; 0x1338 <main+0x79e>
    1384:	27 c0       	rjmp	.+78     	; 0x13d4 <main+0x83a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1386:	8e 01       	movw	r16, r28
    1388:	0f 56       	subi	r16, 0x6F	; 111
    138a:	1f 4f       	sbci	r17, 0xFF	; 255
    138c:	fe 01       	movw	r30, r28
    138e:	ed 56       	subi	r30, 0x6D	; 109
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	60 81       	ld	r22, Z
    1394:	71 81       	ldd	r23, Z+1	; 0x01
    1396:	82 81       	ldd	r24, Z+2	; 0x02
    1398:	93 81       	ldd	r25, Z+3	; 0x03
    139a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	f8 01       	movw	r30, r16
    13a4:	91 83       	std	Z+1, r25	; 0x01
    13a6:	80 83       	st	Z, r24
    13a8:	de 01       	movw	r26, r28
    13aa:	a3 57       	subi	r26, 0x73	; 115
    13ac:	bf 4f       	sbci	r27, 0xFF	; 255
    13ae:	fe 01       	movw	r30, r28
    13b0:	ef 56       	subi	r30, 0x6F	; 111
    13b2:	ff 4f       	sbci	r31, 0xFF	; 255
    13b4:	80 81       	ld	r24, Z
    13b6:	91 81       	ldd	r25, Z+1	; 0x01
    13b8:	8d 93       	st	X+, r24
    13ba:	9c 93       	st	X, r25
    13bc:	fe 01       	movw	r30, r28
    13be:	e3 57       	subi	r30, 0x73	; 115
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	80 81       	ld	r24, Z
    13c4:	91 81       	ldd	r25, Z+1	; 0x01
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	f1 f7       	brne	.-4      	; 0x13c6 <main+0x82c>
    13ca:	fe 01       	movw	r30, r28
    13cc:	e3 57       	subi	r30, 0x73	; 115
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	91 83       	std	Z+1, r25	; 0x01
    13d2:	80 83       	st	Z, r24
			{
				_delay_ms(1000);
				//get number preesed
			    numPressed = KeyPad_getPressedKey();
    13d4:	0e 94 06 13 	call	0x260c	; 0x260c <KeyPad_getPressedKey>
    13d8:	fe 01       	movw	r30, r28
    13da:	e9 52       	subi	r30, 0x29	; 41
    13dc:	ff 4f       	sbci	r31, 0xFF	; 255
    13de:	80 83       	st	Z, r24
    13e0:	fe 01       	movw	r30, r28
    13e2:	e7 57       	subi	r30, 0x77	; 119
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	aa e7       	ldi	r26, 0x7A	; 122
    13ec:	b4 e4       	ldi	r27, 0x44	; 68
    13ee:	80 83       	st	Z, r24
    13f0:	91 83       	std	Z+1, r25	; 0x01
    13f2:	a2 83       	std	Z+2, r26	; 0x02
    13f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f6:	8e 01       	movw	r16, r28
    13f8:	0b 57       	subi	r16, 0x7B	; 123
    13fa:	1f 4f       	sbci	r17, 0xFF	; 255
    13fc:	fe 01       	movw	r30, r28
    13fe:	e7 57       	subi	r30, 0x77	; 119
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	60 81       	ld	r22, Z
    1404:	71 81       	ldd	r23, Z+1	; 0x01
    1406:	82 81       	ldd	r24, Z+2	; 0x02
    1408:	93 81       	ldd	r25, Z+3	; 0x03
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	4a e7       	ldi	r20, 0x7A	; 122
    1410:	53 e4       	ldi	r21, 0x43	; 67
    1412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	f8 01       	movw	r30, r16
    141c:	80 83       	st	Z, r24
    141e:	91 83       	std	Z+1, r25	; 0x01
    1420:	a2 83       	std	Z+2, r26	; 0x02
    1422:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1424:	fe 01       	movw	r30, r28
    1426:	eb 57       	subi	r30, 0x7B	; 123
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	60 81       	ld	r22, Z
    142c:	71 81       	ldd	r23, Z+1	; 0x01
    142e:	82 81       	ldd	r24, Z+2	; 0x02
    1430:	93 81       	ldd	r25, Z+3	; 0x03
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e8       	ldi	r20, 0x80	; 128
    1438:	5f e3       	ldi	r21, 0x3F	; 63
    143a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    143e:	88 23       	and	r24, r24
    1440:	44 f4       	brge	.+16     	; 0x1452 <main+0x8b8>
		__ticks = 1;
    1442:	fe 01       	movw	r30, r28
    1444:	ed 57       	subi	r30, 0x7D	; 125
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	91 83       	std	Z+1, r25	; 0x01
    144e:	80 83       	st	Z, r24
    1450:	64 c0       	rjmp	.+200    	; 0x151a <main+0x980>
	else if (__tmp > 65535)
    1452:	fe 01       	movw	r30, r28
    1454:	eb 57       	subi	r30, 0x7B	; 123
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	60 81       	ld	r22, Z
    145a:	71 81       	ldd	r23, Z+1	; 0x01
    145c:	82 81       	ldd	r24, Z+2	; 0x02
    145e:	93 81       	ldd	r25, Z+3	; 0x03
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	3f ef       	ldi	r19, 0xFF	; 255
    1464:	4f e7       	ldi	r20, 0x7F	; 127
    1466:	57 e4       	ldi	r21, 0x47	; 71
    1468:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    146c:	18 16       	cp	r1, r24
    146e:	0c f0       	brlt	.+2      	; 0x1472 <main+0x8d8>
    1470:	43 c0       	rjmp	.+134    	; 0x14f8 <main+0x95e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1472:	fe 01       	movw	r30, r28
    1474:	e7 57       	subi	r30, 0x77	; 119
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	60 81       	ld	r22, Z
    147a:	71 81       	ldd	r23, Z+1	; 0x01
    147c:	82 81       	ldd	r24, Z+2	; 0x02
    147e:	93 81       	ldd	r25, Z+3	; 0x03
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	40 e2       	ldi	r20, 0x20	; 32
    1486:	51 e4       	ldi	r21, 0x41	; 65
    1488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	8e 01       	movw	r16, r28
    1492:	0d 57       	subi	r16, 0x7D	; 125
    1494:	1f 4f       	sbci	r17, 0xFF	; 255
    1496:	bc 01       	movw	r22, r24
    1498:	cd 01       	movw	r24, r26
    149a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	f8 01       	movw	r30, r16
    14a4:	91 83       	std	Z+1, r25	; 0x01
    14a6:	80 83       	st	Z, r24
    14a8:	1f c0       	rjmp	.+62     	; 0x14e8 <main+0x94e>
    14aa:	fe 01       	movw	r30, r28
    14ac:	ef 57       	subi	r30, 0x7F	; 127
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	89 e1       	ldi	r24, 0x19	; 25
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	91 83       	std	Z+1, r25	; 0x01
    14b6:	80 83       	st	Z, r24
    14b8:	fe 01       	movw	r30, r28
    14ba:	ef 57       	subi	r30, 0x7F	; 127
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	80 81       	ld	r24, Z
    14c0:	91 81       	ldd	r25, Z+1	; 0x01
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <main+0x928>
    14c6:	fe 01       	movw	r30, r28
    14c8:	ef 57       	subi	r30, 0x7F	; 127
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	91 83       	std	Z+1, r25	; 0x01
    14ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d0:	de 01       	movw	r26, r28
    14d2:	ad 57       	subi	r26, 0x7D	; 125
    14d4:	bf 4f       	sbci	r27, 0xFF	; 255
    14d6:	fe 01       	movw	r30, r28
    14d8:	ed 57       	subi	r30, 0x7D	; 125
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	80 81       	ld	r24, Z
    14de:	91 81       	ldd	r25, Z+1	; 0x01
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	11 96       	adiw	r26, 0x01	; 1
    14e4:	9c 93       	st	X, r25
    14e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e8:	fe 01       	movw	r30, r28
    14ea:	ed 57       	subi	r30, 0x7D	; 125
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	80 81       	ld	r24, Z
    14f0:	91 81       	ldd	r25, Z+1	; 0x01
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	d1 f6       	brne	.-76     	; 0x14aa <main+0x910>
    14f6:	27 c0       	rjmp	.+78     	; 0x1546 <main+0x9ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f8:	8e 01       	movw	r16, r28
    14fa:	0d 57       	subi	r16, 0x7D	; 125
    14fc:	1f 4f       	sbci	r17, 0xFF	; 255
    14fe:	fe 01       	movw	r30, r28
    1500:	eb 57       	subi	r30, 0x7B	; 123
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	60 81       	ld	r22, Z
    1506:	71 81       	ldd	r23, Z+1	; 0x01
    1508:	82 81       	ldd	r24, Z+2	; 0x02
    150a:	93 81       	ldd	r25, Z+3	; 0x03
    150c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	f8 01       	movw	r30, r16
    1516:	91 83       	std	Z+1, r25	; 0x01
    1518:	80 83       	st	Z, r24
    151a:	de 01       	movw	r26, r28
    151c:	a1 58       	subi	r26, 0x81	; 129
    151e:	bf 4f       	sbci	r27, 0xFF	; 255
    1520:	fe 01       	movw	r30, r28
    1522:	ed 57       	subi	r30, 0x7D	; 125
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	80 81       	ld	r24, Z
    1528:	91 81       	ldd	r25, Z+1	; 0x01
    152a:	8d 93       	st	X+, r24
    152c:	9c 93       	st	X, r25
    152e:	fe 01       	movw	r30, r28
    1530:	e1 58       	subi	r30, 0x81	; 129
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	80 81       	ld	r24, Z
    1536:	91 81       	ldd	r25, Z+1	; 0x01
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	f1 f7       	brne	.-4      	; 0x1538 <main+0x99e>
    153c:	fe 01       	movw	r30, r28
    153e:	e1 58       	subi	r30, 0x81	; 129
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	91 83       	std	Z+1, r25	; 0x01
    1544:	80 83       	st	Z, r24
				_delay_ms(1000);
				LCD_intgerToString(numPressed);
    1546:	fe 01       	movw	r30, r28
    1548:	e9 52       	subi	r30, 0x29	; 41
    154a:	ff 4f       	sbci	r31, 0xFF	; 255
    154c:	80 81       	ld	r24, Z
    154e:	88 2f       	mov	r24, r24
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	0e 94 9b 18 	call	0x3136	; 0x3136 <LCD_intgerToString>
				//store this number in an array
				passArr2[counter]=numPressed;
    1556:	fe 01       	movw	r30, r28
    1558:	e3 52       	subi	r30, 0x23	; 35
    155a:	ff 4f       	sbci	r31, 0xFF	; 255
    155c:	80 81       	ld	r24, Z
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	ce 01       	movw	r24, r28
    1564:	8f 51       	subi	r24, 0x1F	; 31
    1566:	9f 4f       	sbci	r25, 0xFF	; 255
    1568:	dc 01       	movw	r26, r24
    156a:	a2 0f       	add	r26, r18
    156c:	b3 1f       	adc	r27, r19
    156e:	fe 01       	movw	r30, r28
    1570:	e9 52       	subi	r30, 0x29	; 41
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	80 81       	ld	r24, Z
    1576:	8c 93       	st	X, r24
			LCD_clearScreen();
			LCD_displayStringRowColumn(0,0,"Set Pass again");
			LCD_displayStringRowColumn(1,0,"Pass:");
			LCD_goToRowColumn(1,6);

			for(counter = 0 ; counter < 3 ; counter++)
    1578:	de 01       	movw	r26, r28
    157a:	a3 52       	subi	r26, 0x23	; 35
    157c:	bf 4f       	sbci	r27, 0xFF	; 255
    157e:	fe 01       	movw	r30, r28
    1580:	e3 52       	subi	r30, 0x23	; 35
    1582:	ff 4f       	sbci	r31, 0xFF	; 255
    1584:	80 81       	ld	r24, Z
    1586:	8f 5f       	subi	r24, 0xFF	; 255
    1588:	8c 93       	st	X, r24
    158a:	fe 01       	movw	r30, r28
    158c:	e3 52       	subi	r30, 0x23	; 35
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	80 81       	ld	r24, Z
    1592:	83 30       	cpi	r24, 0x03	; 3
    1594:	08 f4       	brcc	.+2      	; 0x1598 <main+0x9fe>
    1596:	6b ce       	rjmp	.-810    	; 0x126e <main+0x6d4>
				//store this number in an array
				passArr2[counter]=numPressed;
			}

			//Make sure the Re-entered password is matching the 1st one
			for ( counter = 0 ; counter<3 ; counter ++)
    1598:	fe 01       	movw	r30, r28
    159a:	e3 52       	subi	r30, 0x23	; 35
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	10 82       	st	Z, r1
    15a0:	2a c0       	rjmp	.+84     	; 0x15f6 <main+0xa5c>
			{
				if (passArr1[counter] != passArr2[counter])
    15a2:	fe 01       	movw	r30, r28
    15a4:	e3 52       	subi	r30, 0x23	; 35
    15a6:	ff 4f       	sbci	r31, 0xFF	; 255
    15a8:	80 81       	ld	r24, Z
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	ce 01       	movw	r24, r28
    15b0:	82 52       	subi	r24, 0x22	; 34
    15b2:	9f 4f       	sbci	r25, 0xFF	; 255
    15b4:	fc 01       	movw	r30, r24
    15b6:	e2 0f       	add	r30, r18
    15b8:	f3 1f       	adc	r31, r19
    15ba:	40 81       	ld	r20, Z
    15bc:	fe 01       	movw	r30, r28
    15be:	e3 52       	subi	r30, 0x23	; 35
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	80 81       	ld	r24, Z
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	ce 01       	movw	r24, r28
    15ca:	8f 51       	subi	r24, 0x1F	; 31
    15cc:	9f 4f       	sbci	r25, 0xFF	; 255
    15ce:	fc 01       	movw	r30, r24
    15d0:	e2 0f       	add	r30, r18
    15d2:	f3 1f       	adc	r31, r19
    15d4:	80 81       	ld	r24, Z
    15d6:	48 17       	cp	r20, r24
    15d8:	29 f0       	breq	.+10     	; 0x15e4 <main+0xa4a>
				{
					passFlag=1;
    15da:	fe 01       	movw	r30, r28
    15dc:	ec 52       	subi	r30, 0x2C	; 44
    15de:	ff 4f       	sbci	r31, 0xFF	; 255
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	80 83       	st	Z, r24
				//store this number in an array
				passArr2[counter]=numPressed;
			}

			//Make sure the Re-entered password is matching the 1st one
			for ( counter = 0 ; counter<3 ; counter ++)
    15e4:	de 01       	movw	r26, r28
    15e6:	a3 52       	subi	r26, 0x23	; 35
    15e8:	bf 4f       	sbci	r27, 0xFF	; 255
    15ea:	fe 01       	movw	r30, r28
    15ec:	e3 52       	subi	r30, 0x23	; 35
    15ee:	ff 4f       	sbci	r31, 0xFF	; 255
    15f0:	80 81       	ld	r24, Z
    15f2:	8f 5f       	subi	r24, 0xFF	; 255
    15f4:	8c 93       	st	X, r24
    15f6:	fe 01       	movw	r30, r28
    15f8:	e3 52       	subi	r30, 0x23	; 35
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	80 81       	ld	r24, Z
    15fe:	83 30       	cpi	r24, 0x03	; 3
    1600:	80 f2       	brcs	.-96     	; 0x15a2 <main+0xa08>
				}
			}
		}
		//Re-enter the same password if the he didnot verified the first password
		//and the number of password setting is < 3
		while (noOfPasswordSetting < 3 &&  passFlag==1);
    1602:	fe 01       	movw	r30, r28
    1604:	e7 52       	subi	r30, 0x27	; 39
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	80 81       	ld	r24, Z
    160a:	83 30       	cpi	r24, 0x03	; 3
    160c:	38 f4       	brcc	.+14     	; 0x161c <main+0xa82>
    160e:	fe 01       	movw	r30, r28
    1610:	ec 52       	subi	r30, 0x2C	; 44
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	80 81       	ld	r24, Z
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	09 f4       	brne	.+2      	; 0x161c <main+0xa82>
    161a:	50 cd       	rjmp	.-1376   	; 0x10bc <main+0x522>

	}
	while ( passFlag == 1); // if the two password aren't same after 4 times of entering the second one
    161c:	fe 01       	movw	r30, r28
    161e:	ec 52       	subi	r30, 0x2C	; 44
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	80 81       	ld	r24, Z
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	09 f4       	brne	.+2      	; 0x162a <main+0xa90>
    1628:	e4 ca       	rjmp	.-2616   	; 0xbf2 <main+0x58>
	// the process will be repeated again

	//Hand Shaking
	while (UART_recieveByte() != START) {} //WAITINTG UNTILL THE 2ND MC BECOME AVAILABLE
    162a:	0e 94 68 19 	call	0x32d0	; 0x32d0 <UART_recieveByte>
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	e1 f7       	brne	.-8      	; 0x162a <main+0xa90>
    1632:	fe 01       	movw	r30, r28
    1634:	e5 58       	subi	r30, 0x85	; 133
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	aa e7       	ldi	r26, 0x7A	; 122
    163e:	b4 e4       	ldi	r27, 0x44	; 68
    1640:	80 83       	st	Z, r24
    1642:	91 83       	std	Z+1, r25	; 0x01
    1644:	a2 83       	std	Z+2, r26	; 0x02
    1646:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1648:	8e 01       	movw	r16, r28
    164a:	09 58       	subi	r16, 0x89	; 137
    164c:	1f 4f       	sbci	r17, 0xFF	; 255
    164e:	fe 01       	movw	r30, r28
    1650:	e5 58       	subi	r30, 0x85	; 133
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	60 81       	ld	r22, Z
    1656:	71 81       	ldd	r23, Z+1	; 0x01
    1658:	82 81       	ldd	r24, Z+2	; 0x02
    165a:	93 81       	ldd	r25, Z+3	; 0x03
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	4a e7       	ldi	r20, 0x7A	; 122
    1662:	53 e4       	ldi	r21, 0x43	; 67
    1664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	f8 01       	movw	r30, r16
    166e:	80 83       	st	Z, r24
    1670:	91 83       	std	Z+1, r25	; 0x01
    1672:	a2 83       	std	Z+2, r26	; 0x02
    1674:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1676:	fe 01       	movw	r30, r28
    1678:	e9 58       	subi	r30, 0x89	; 137
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	60 81       	ld	r22, Z
    167e:	71 81       	ldd	r23, Z+1	; 0x01
    1680:	82 81       	ldd	r24, Z+2	; 0x02
    1682:	93 81       	ldd	r25, Z+3	; 0x03
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e8       	ldi	r20, 0x80	; 128
    168a:	5f e3       	ldi	r21, 0x3F	; 63
    168c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1690:	88 23       	and	r24, r24
    1692:	44 f4       	brge	.+16     	; 0x16a4 <main+0xb0a>
		__ticks = 1;
    1694:	fe 01       	movw	r30, r28
    1696:	eb 58       	subi	r30, 0x8B	; 139
    1698:	ff 4f       	sbci	r31, 0xFF	; 255
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	91 83       	std	Z+1, r25	; 0x01
    16a0:	80 83       	st	Z, r24
    16a2:	64 c0       	rjmp	.+200    	; 0x176c <main+0xbd2>
	else if (__tmp > 65535)
    16a4:	fe 01       	movw	r30, r28
    16a6:	e9 58       	subi	r30, 0x89	; 137
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	60 81       	ld	r22, Z
    16ac:	71 81       	ldd	r23, Z+1	; 0x01
    16ae:	82 81       	ldd	r24, Z+2	; 0x02
    16b0:	93 81       	ldd	r25, Z+3	; 0x03
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	3f ef       	ldi	r19, 0xFF	; 255
    16b6:	4f e7       	ldi	r20, 0x7F	; 127
    16b8:	57 e4       	ldi	r21, 0x47	; 71
    16ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16be:	18 16       	cp	r1, r24
    16c0:	0c f0       	brlt	.+2      	; 0x16c4 <main+0xb2a>
    16c2:	43 c0       	rjmp	.+134    	; 0x174a <main+0xbb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c4:	fe 01       	movw	r30, r28
    16c6:	e5 58       	subi	r30, 0x85	; 133
    16c8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ca:	60 81       	ld	r22, Z
    16cc:	71 81       	ldd	r23, Z+1	; 0x01
    16ce:	82 81       	ldd	r24, Z+2	; 0x02
    16d0:	93 81       	ldd	r25, Z+3	; 0x03
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	40 e2       	ldi	r20, 0x20	; 32
    16d8:	51 e4       	ldi	r21, 0x41	; 65
    16da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	8e 01       	movw	r16, r28
    16e4:	0b 58       	subi	r16, 0x8B	; 139
    16e6:	1f 4f       	sbci	r17, 0xFF	; 255
    16e8:	bc 01       	movw	r22, r24
    16ea:	cd 01       	movw	r24, r26
    16ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	f8 01       	movw	r30, r16
    16f6:	91 83       	std	Z+1, r25	; 0x01
    16f8:	80 83       	st	Z, r24
    16fa:	1f c0       	rjmp	.+62     	; 0x173a <main+0xba0>
    16fc:	fe 01       	movw	r30, r28
    16fe:	ed 58       	subi	r30, 0x8D	; 141
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	89 e1       	ldi	r24, 0x19	; 25
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	80 83       	st	Z, r24
    170a:	fe 01       	movw	r30, r28
    170c:	ed 58       	subi	r30, 0x8D	; 141
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	80 81       	ld	r24, Z
    1712:	91 81       	ldd	r25, Z+1	; 0x01
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <main+0xb7a>
    1718:	fe 01       	movw	r30, r28
    171a:	ed 58       	subi	r30, 0x8D	; 141
    171c:	ff 4f       	sbci	r31, 0xFF	; 255
    171e:	91 83       	std	Z+1, r25	; 0x01
    1720:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1722:	de 01       	movw	r26, r28
    1724:	ab 58       	subi	r26, 0x8B	; 139
    1726:	bf 4f       	sbci	r27, 0xFF	; 255
    1728:	fe 01       	movw	r30, r28
    172a:	eb 58       	subi	r30, 0x8B	; 139
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	80 81       	ld	r24, Z
    1730:	91 81       	ldd	r25, Z+1	; 0x01
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	11 96       	adiw	r26, 0x01	; 1
    1736:	9c 93       	st	X, r25
    1738:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173a:	fe 01       	movw	r30, r28
    173c:	eb 58       	subi	r30, 0x8B	; 139
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	80 81       	ld	r24, Z
    1742:	91 81       	ldd	r25, Z+1	; 0x01
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	d1 f6       	brne	.-76     	; 0x16fc <main+0xb62>
    1748:	27 c0       	rjmp	.+78     	; 0x1798 <main+0xbfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174a:	8e 01       	movw	r16, r28
    174c:	0b 58       	subi	r16, 0x8B	; 139
    174e:	1f 4f       	sbci	r17, 0xFF	; 255
    1750:	fe 01       	movw	r30, r28
    1752:	e9 58       	subi	r30, 0x89	; 137
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	60 81       	ld	r22, Z
    1758:	71 81       	ldd	r23, Z+1	; 0x01
    175a:	82 81       	ldd	r24, Z+2	; 0x02
    175c:	93 81       	ldd	r25, Z+3	; 0x03
    175e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	f8 01       	movw	r30, r16
    1768:	91 83       	std	Z+1, r25	; 0x01
    176a:	80 83       	st	Z, r24
    176c:	de 01       	movw	r26, r28
    176e:	af 58       	subi	r26, 0x8F	; 143
    1770:	bf 4f       	sbci	r27, 0xFF	; 255
    1772:	fe 01       	movw	r30, r28
    1774:	eb 58       	subi	r30, 0x8B	; 139
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	80 81       	ld	r24, Z
    177a:	91 81       	ldd	r25, Z+1	; 0x01
    177c:	8d 93       	st	X+, r24
    177e:	9c 93       	st	X, r25
    1780:	fe 01       	movw	r30, r28
    1782:	ef 58       	subi	r30, 0x8F	; 143
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	80 81       	ld	r24, Z
    1788:	91 81       	ldd	r25, Z+1	; 0x01
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	f1 f7       	brne	.-4      	; 0x178a <main+0xbf0>
    178e:	fe 01       	movw	r30, r28
    1790:	ef 58       	subi	r30, 0x8F	; 143
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	91 83       	std	Z+1, r25	; 0x01
    1796:	80 83       	st	Z, r24

	_delay_ms(1000);
	LCD_clearScreen();
    1798:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"kollo tmam");
    179c:	2e e7       	ldi	r18, 0x7E	; 126
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	a9 01       	movw	r20, r18
    17a6:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayStringRowColumn>


	//making the password as 1-bytenumber not as an array
	for (counter = 0 ; counter <3 ; counter ++)
    17aa:	fe 01       	movw	r30, r28
    17ac:	e3 52       	subi	r30, 0x23	; 35
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	10 82       	st	Z, r1
    17b2:	29 c0       	rjmp	.+82     	; 0x1806 <main+0xc6c>
	{
		password1 += passArr1[counter] * getPow(counter , 10);
    17b4:	fe 01       	movw	r30, r28
    17b6:	e3 52       	subi	r30, 0x23	; 35
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	80 81       	ld	r24, Z
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	ce 01       	movw	r24, r28
    17c2:	82 52       	subi	r24, 0x22	; 34
    17c4:	9f 4f       	sbci	r25, 0xFF	; 255
    17c6:	fc 01       	movw	r30, r24
    17c8:	e2 0f       	add	r30, r18
    17ca:	f3 1f       	adc	r31, r19
    17cc:	10 81       	ld	r17, Z
    17ce:	fe 01       	movw	r30, r28
    17d0:	e3 52       	subi	r30, 0x23	; 35
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	80 81       	ld	r24, Z
    17d6:	6a e0       	ldi	r22, 0x0A	; 10
    17d8:	0e 94 a3 05 	call	0xb46	; 0xb46 <getPow>
    17dc:	18 9f       	mul	r17, r24
    17de:	90 2d       	mov	r25, r0
    17e0:	11 24       	eor	r1, r1
    17e2:	de 01       	movw	r26, r28
    17e4:	a4 52       	subi	r26, 0x24	; 36
    17e6:	bf 4f       	sbci	r27, 0xFF	; 255
    17e8:	fe 01       	movw	r30, r28
    17ea:	e4 52       	subi	r30, 0x24	; 36
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	80 81       	ld	r24, Z
    17f0:	89 0f       	add	r24, r25
    17f2:	8c 93       	st	X, r24
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"kollo tmam");


	//making the password as 1-bytenumber not as an array
	for (counter = 0 ; counter <3 ; counter ++)
    17f4:	de 01       	movw	r26, r28
    17f6:	a3 52       	subi	r26, 0x23	; 35
    17f8:	bf 4f       	sbci	r27, 0xFF	; 255
    17fa:	fe 01       	movw	r30, r28
    17fc:	e3 52       	subi	r30, 0x23	; 35
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	80 81       	ld	r24, Z
    1802:	8f 5f       	subi	r24, 0xFF	; 255
    1804:	8c 93       	st	X, r24
    1806:	fe 01       	movw	r30, r28
    1808:	e3 52       	subi	r30, 0x23	; 35
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	80 81       	ld	r24, Z
    180e:	83 30       	cpi	r24, 0x03	; 3
    1810:	88 f2       	brcs	.-94     	; 0x17b4 <main+0xc1a>
	{
		password1 += passArr1[counter] * getPow(counter , 10);
	}

	//sending the password to the 2nd Uart to store it
	UART_sendByte(password1); //sending the original password to the second MC
    1812:	fe 01       	movw	r30, r28
    1814:	e4 52       	subi	r30, 0x24	; 36
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	80 81       	ld	r24, Z
    181a:	0e 94 51 19 	call	0x32a2	; 0x32a2 <UART_sendByte>
		/*test
		PORTB |= (1<<test);
		//PORTB |= 1<<PB1;*/


		noOfPasswordEntering = 0; // initialize the process
    181e:	fe 01       	movw	r30, r28
    1820:	e8 52       	subi	r30, 0x28	; 40
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	10 82       	st	Z, r1
    1826:	fe 01       	movw	r30, r28
    1828:	e3 59       	subi	r30, 0x93	; 147
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	aa ef       	ldi	r26, 0xFA	; 250
    1832:	b3 e4       	ldi	r27, 0x43	; 67
    1834:	80 83       	st	Z, r24
    1836:	91 83       	std	Z+1, r25	; 0x01
    1838:	a2 83       	std	Z+2, r26	; 0x02
    183a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183c:	8e 01       	movw	r16, r28
    183e:	07 59       	subi	r16, 0x97	; 151
    1840:	1f 4f       	sbci	r17, 0xFF	; 255
    1842:	fe 01       	movw	r30, r28
    1844:	e3 59       	subi	r30, 0x93	; 147
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	60 81       	ld	r22, Z
    184a:	71 81       	ldd	r23, Z+1	; 0x01
    184c:	82 81       	ldd	r24, Z+2	; 0x02
    184e:	93 81       	ldd	r25, Z+3	; 0x03
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	4a e7       	ldi	r20, 0x7A	; 122
    1856:	53 e4       	ldi	r21, 0x43	; 67
    1858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	f8 01       	movw	r30, r16
    1862:	80 83       	st	Z, r24
    1864:	91 83       	std	Z+1, r25	; 0x01
    1866:	a2 83       	std	Z+2, r26	; 0x02
    1868:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    186a:	fe 01       	movw	r30, r28
    186c:	e7 59       	subi	r30, 0x97	; 151
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	60 81       	ld	r22, Z
    1872:	71 81       	ldd	r23, Z+1	; 0x01
    1874:	82 81       	ldd	r24, Z+2	; 0x02
    1876:	93 81       	ldd	r25, Z+3	; 0x03
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	40 e8       	ldi	r20, 0x80	; 128
    187e:	5f e3       	ldi	r21, 0x3F	; 63
    1880:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1884:	88 23       	and	r24, r24
    1886:	44 f4       	brge	.+16     	; 0x1898 <main+0xcfe>
		__ticks = 1;
    1888:	fe 01       	movw	r30, r28
    188a:	e9 59       	subi	r30, 0x99	; 153
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	80 83       	st	Z, r24
    1896:	64 c0       	rjmp	.+200    	; 0x1960 <main+0xdc6>
	else if (__tmp > 65535)
    1898:	fe 01       	movw	r30, r28
    189a:	e7 59       	subi	r30, 0x97	; 151
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	60 81       	ld	r22, Z
    18a0:	71 81       	ldd	r23, Z+1	; 0x01
    18a2:	82 81       	ldd	r24, Z+2	; 0x02
    18a4:	93 81       	ldd	r25, Z+3	; 0x03
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	3f ef       	ldi	r19, 0xFF	; 255
    18aa:	4f e7       	ldi	r20, 0x7F	; 127
    18ac:	57 e4       	ldi	r21, 0x47	; 71
    18ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18b2:	18 16       	cp	r1, r24
    18b4:	0c f0       	brlt	.+2      	; 0x18b8 <main+0xd1e>
    18b6:	43 c0       	rjmp	.+134    	; 0x193e <main+0xda4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b8:	fe 01       	movw	r30, r28
    18ba:	e3 59       	subi	r30, 0x93	; 147
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	60 81       	ld	r22, Z
    18c0:	71 81       	ldd	r23, Z+1	; 0x01
    18c2:	82 81       	ldd	r24, Z+2	; 0x02
    18c4:	93 81       	ldd	r25, Z+3	; 0x03
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e2       	ldi	r20, 0x20	; 32
    18cc:	51 e4       	ldi	r21, 0x41	; 65
    18ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	8e 01       	movw	r16, r28
    18d8:	09 59       	subi	r16, 0x99	; 153
    18da:	1f 4f       	sbci	r17, 0xFF	; 255
    18dc:	bc 01       	movw	r22, r24
    18de:	cd 01       	movw	r24, r26
    18e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	f8 01       	movw	r30, r16
    18ea:	91 83       	std	Z+1, r25	; 0x01
    18ec:	80 83       	st	Z, r24
    18ee:	1f c0       	rjmp	.+62     	; 0x192e <main+0xd94>
    18f0:	fe 01       	movw	r30, r28
    18f2:	eb 59       	subi	r30, 0x9B	; 155
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	89 e1       	ldi	r24, 0x19	; 25
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	91 83       	std	Z+1, r25	; 0x01
    18fc:	80 83       	st	Z, r24
    18fe:	fe 01       	movw	r30, r28
    1900:	eb 59       	subi	r30, 0x9B	; 155
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	80 81       	ld	r24, Z
    1906:	91 81       	ldd	r25, Z+1	; 0x01
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <main+0xd6e>
    190c:	fe 01       	movw	r30, r28
    190e:	eb 59       	subi	r30, 0x9B	; 155
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	91 83       	std	Z+1, r25	; 0x01
    1914:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1916:	de 01       	movw	r26, r28
    1918:	a9 59       	subi	r26, 0x99	; 153
    191a:	bf 4f       	sbci	r27, 0xFF	; 255
    191c:	fe 01       	movw	r30, r28
    191e:	e9 59       	subi	r30, 0x99	; 153
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	80 81       	ld	r24, Z
    1924:	91 81       	ldd	r25, Z+1	; 0x01
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	11 96       	adiw	r26, 0x01	; 1
    192a:	9c 93       	st	X, r25
    192c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192e:	fe 01       	movw	r30, r28
    1930:	e9 59       	subi	r30, 0x99	; 153
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	80 81       	ld	r24, Z
    1936:	91 81       	ldd	r25, Z+1	; 0x01
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	d1 f6       	brne	.-76     	; 0x18f0 <main+0xd56>
    193c:	27 c0       	rjmp	.+78     	; 0x198c <main+0xdf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193e:	8e 01       	movw	r16, r28
    1940:	09 59       	subi	r16, 0x99	; 153
    1942:	1f 4f       	sbci	r17, 0xFF	; 255
    1944:	fe 01       	movw	r30, r28
    1946:	e7 59       	subi	r30, 0x97	; 151
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	60 81       	ld	r22, Z
    194c:	71 81       	ldd	r23, Z+1	; 0x01
    194e:	82 81       	ldd	r24, Z+2	; 0x02
    1950:	93 81       	ldd	r25, Z+3	; 0x03
    1952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	f8 01       	movw	r30, r16
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24
    1960:	de 01       	movw	r26, r28
    1962:	ad 59       	subi	r26, 0x9D	; 157
    1964:	bf 4f       	sbci	r27, 0xFF	; 255
    1966:	fe 01       	movw	r30, r28
    1968:	e9 59       	subi	r30, 0x99	; 153
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	80 81       	ld	r24, Z
    196e:	91 81       	ldd	r25, Z+1	; 0x01
    1970:	8d 93       	st	X+, r24
    1972:	9c 93       	st	X, r25
    1974:	fe 01       	movw	r30, r28
    1976:	ed 59       	subi	r30, 0x9D	; 157
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	80 81       	ld	r24, Z
    197c:	91 81       	ldd	r25, Z+1	; 0x01
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <main+0xde4>
    1982:	fe 01       	movw	r30, r28
    1984:	ed 59       	subi	r30, 0x9D	; 157
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	91 83       	std	Z+1, r25	; 0x01
    198a:	80 83       	st	Z, r24

		do
		{

			_delay_ms(500);
			LCD_clearScreen();
    198c:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Enter Pass");
    1990:	29 e8       	ldi	r18, 0x89	; 137
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	60 e0       	ldi	r22, 0x00	; 0
    1998:	a9 01       	movw	r20, r18
    199a:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"Pass:");
    199e:	29 e6       	ldi	r18, 0x69	; 105
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	60 e0       	ldi	r22, 0x00	; 0
    19a6:	a9 01       	movw	r20, r18
    19a8:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayStringRowColumn>
			//LCD_clearScreen();

			LCD_goToRowColumn(1,6);
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	66 e0       	ldi	r22, 0x06	; 6
    19b0:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_goToRowColumn>
			passIsTrue=0;
    19b4:	fe 01       	movw	r30, r28
    19b6:	eb 52       	subi	r30, 0x2B	; 43
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	10 82       	st	Z, r1
			sentpassword=0;
    19bc:	fe 01       	movw	r30, r28
    19be:	e6 52       	subi	r30, 0x26	; 38
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	10 82       	st	Z, r1

			for(counter = 0 ; counter < 3 ; counter++)
    19c4:	fe 01       	movw	r30, r28
    19c6:	e3 52       	subi	r30, 0x23	; 35
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	10 82       	st	Z, r1
    19cc:	8e c1       	rjmp	.+796    	; 0x1cea <main+0x1150>
    19ce:	fe 01       	movw	r30, r28
    19d0:	e1 5a       	subi	r30, 0xA1	; 161
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	aa e7       	ldi	r26, 0x7A	; 122
    19da:	b4 e4       	ldi	r27, 0x44	; 68
    19dc:	80 83       	st	Z, r24
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	a2 83       	std	Z+2, r26	; 0x02
    19e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e4:	8e 01       	movw	r16, r28
    19e6:	05 5a       	subi	r16, 0xA5	; 165
    19e8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ea:	fe 01       	movw	r30, r28
    19ec:	e1 5a       	subi	r30, 0xA1	; 161
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	60 81       	ld	r22, Z
    19f2:	71 81       	ldd	r23, Z+1	; 0x01
    19f4:	82 81       	ldd	r24, Z+2	; 0x02
    19f6:	93 81       	ldd	r25, Z+3	; 0x03
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	4a e7       	ldi	r20, 0x7A	; 122
    19fe:	53 e4       	ldi	r21, 0x43	; 67
    1a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	f8 01       	movw	r30, r16
    1a0a:	80 83       	st	Z, r24
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	a2 83       	std	Z+2, r26	; 0x02
    1a10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a12:	fe 01       	movw	r30, r28
    1a14:	e5 5a       	subi	r30, 0xA5	; 165
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e8       	ldi	r20, 0x80	; 128
    1a26:	5f e3       	ldi	r21, 0x3F	; 63
    1a28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a2c:	88 23       	and	r24, r24
    1a2e:	44 f4       	brge	.+16     	; 0x1a40 <main+0xea6>
		__ticks = 1;
    1a30:	fe 01       	movw	r30, r28
    1a32:	e7 5a       	subi	r30, 0xA7	; 167
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	80 83       	st	Z, r24
    1a3e:	64 c0       	rjmp	.+200    	; 0x1b08 <main+0xf6e>
	else if (__tmp > 65535)
    1a40:	fe 01       	movw	r30, r28
    1a42:	e5 5a       	subi	r30, 0xA5	; 165
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	60 81       	ld	r22, Z
    1a48:	71 81       	ldd	r23, Z+1	; 0x01
    1a4a:	82 81       	ldd	r24, Z+2	; 0x02
    1a4c:	93 81       	ldd	r25, Z+3	; 0x03
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	3f ef       	ldi	r19, 0xFF	; 255
    1a52:	4f e7       	ldi	r20, 0x7F	; 127
    1a54:	57 e4       	ldi	r21, 0x47	; 71
    1a56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a5a:	18 16       	cp	r1, r24
    1a5c:	0c f0       	brlt	.+2      	; 0x1a60 <main+0xec6>
    1a5e:	43 c0       	rjmp	.+134    	; 0x1ae6 <main+0xf4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a60:	fe 01       	movw	r30, r28
    1a62:	e1 5a       	subi	r30, 0xA1	; 161
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	60 81       	ld	r22, Z
    1a68:	71 81       	ldd	r23, Z+1	; 0x01
    1a6a:	82 81       	ldd	r24, Z+2	; 0x02
    1a6c:	93 81       	ldd	r25, Z+3	; 0x03
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e2       	ldi	r20, 0x20	; 32
    1a74:	51 e4       	ldi	r21, 0x41	; 65
    1a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	8e 01       	movw	r16, r28
    1a80:	07 5a       	subi	r16, 0xA7	; 167
    1a82:	1f 4f       	sbci	r17, 0xFF	; 255
    1a84:	bc 01       	movw	r22, r24
    1a86:	cd 01       	movw	r24, r26
    1a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	f8 01       	movw	r30, r16
    1a92:	91 83       	std	Z+1, r25	; 0x01
    1a94:	80 83       	st	Z, r24
    1a96:	1f c0       	rjmp	.+62     	; 0x1ad6 <main+0xf3c>
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e9 5a       	subi	r30, 0xA9	; 169
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	89 e1       	ldi	r24, 0x19	; 25
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	91 83       	std	Z+1, r25	; 0x01
    1aa4:	80 83       	st	Z, r24
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	e9 5a       	subi	r30, 0xA9	; 169
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	80 81       	ld	r24, Z
    1aae:	91 81       	ldd	r25, Z+1	; 0x01
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <main+0xf16>
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e9 5a       	subi	r30, 0xA9	; 169
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	91 83       	std	Z+1, r25	; 0x01
    1abc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abe:	de 01       	movw	r26, r28
    1ac0:	a7 5a       	subi	r26, 0xA7	; 167
    1ac2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	e7 5a       	subi	r30, 0xA7	; 167
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	80 81       	ld	r24, Z
    1acc:	91 81       	ldd	r25, Z+1	; 0x01
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	11 96       	adiw	r26, 0x01	; 1
    1ad2:	9c 93       	st	X, r25
    1ad4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e7 5a       	subi	r30, 0xA7	; 167
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	80 81       	ld	r24, Z
    1ade:	91 81       	ldd	r25, Z+1	; 0x01
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	d1 f6       	brne	.-76     	; 0x1a98 <main+0xefe>
    1ae4:	27 c0       	rjmp	.+78     	; 0x1b34 <main+0xf9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae6:	8e 01       	movw	r16, r28
    1ae8:	07 5a       	subi	r16, 0xA7	; 167
    1aea:	1f 4f       	sbci	r17, 0xFF	; 255
    1aec:	fe 01       	movw	r30, r28
    1aee:	e5 5a       	subi	r30, 0xA5	; 165
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	60 81       	ld	r22, Z
    1af4:	71 81       	ldd	r23, Z+1	; 0x01
    1af6:	82 81       	ldd	r24, Z+2	; 0x02
    1af8:	93 81       	ldd	r25, Z+3	; 0x03
    1afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	f8 01       	movw	r30, r16
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	80 83       	st	Z, r24
    1b08:	de 01       	movw	r26, r28
    1b0a:	ab 5a       	subi	r26, 0xAB	; 171
    1b0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b0e:	fe 01       	movw	r30, r28
    1b10:	e7 5a       	subi	r30, 0xA7	; 167
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	80 81       	ld	r24, Z
    1b16:	91 81       	ldd	r25, Z+1	; 0x01
    1b18:	8d 93       	st	X+, r24
    1b1a:	9c 93       	st	X, r25
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	eb 5a       	subi	r30, 0xAB	; 171
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	80 81       	ld	r24, Z
    1b24:	91 81       	ldd	r25, Z+1	; 0x01
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <main+0xf8c>
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	eb 5a       	subi	r30, 0xAB	; 171
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	80 83       	st	Z, r24
			{
				_delay_ms(1000);
				numPressed=KeyPad_getPressedKey();
    1b34:	0e 94 06 13 	call	0x260c	; 0x260c <KeyPad_getPressedKey>
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e9 52       	subi	r30, 0x29	; 41
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	80 83       	st	Z, r24
    1b40:	fe 01       	movw	r30, r28
    1b42:	ef 5a       	subi	r30, 0xAF	; 175
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	aa e7       	ldi	r26, 0x7A	; 122
    1b4c:	b4 e4       	ldi	r27, 0x44	; 68
    1b4e:	80 83       	st	Z, r24
    1b50:	91 83       	std	Z+1, r25	; 0x01
    1b52:	a2 83       	std	Z+2, r26	; 0x02
    1b54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b56:	8e 01       	movw	r16, r28
    1b58:	03 5b       	subi	r16, 0xB3	; 179
    1b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	ef 5a       	subi	r30, 0xAF	; 175
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	60 81       	ld	r22, Z
    1b64:	71 81       	ldd	r23, Z+1	; 0x01
    1b66:	82 81       	ldd	r24, Z+2	; 0x02
    1b68:	93 81       	ldd	r25, Z+3	; 0x03
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	4a e7       	ldi	r20, 0x7A	; 122
    1b70:	53 e4       	ldi	r21, 0x43	; 67
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	f8 01       	movw	r30, r16
    1b7c:	80 83       	st	Z, r24
    1b7e:	91 83       	std	Z+1, r25	; 0x01
    1b80:	a2 83       	std	Z+2, r26	; 0x02
    1b82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b84:	fe 01       	movw	r30, r28
    1b86:	e3 5b       	subi	r30, 0xB3	; 179
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	60 81       	ld	r22, Z
    1b8c:	71 81       	ldd	r23, Z+1	; 0x01
    1b8e:	82 81       	ldd	r24, Z+2	; 0x02
    1b90:	93 81       	ldd	r25, Z+3	; 0x03
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e8       	ldi	r20, 0x80	; 128
    1b98:	5f e3       	ldi	r21, 0x3F	; 63
    1b9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b9e:	88 23       	and	r24, r24
    1ba0:	44 f4       	brge	.+16     	; 0x1bb2 <main+0x1018>
		__ticks = 1;
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	e5 5b       	subi	r30, 0xB5	; 181
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	91 83       	std	Z+1, r25	; 0x01
    1bae:	80 83       	st	Z, r24
    1bb0:	64 c0       	rjmp	.+200    	; 0x1c7a <main+0x10e0>
	else if (__tmp > 65535)
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	e3 5b       	subi	r30, 0xB3	; 179
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	60 81       	ld	r22, Z
    1bba:	71 81       	ldd	r23, Z+1	; 0x01
    1bbc:	82 81       	ldd	r24, Z+2	; 0x02
    1bbe:	93 81       	ldd	r25, Z+3	; 0x03
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	3f ef       	ldi	r19, 0xFF	; 255
    1bc4:	4f e7       	ldi	r20, 0x7F	; 127
    1bc6:	57 e4       	ldi	r21, 0x47	; 71
    1bc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bcc:	18 16       	cp	r1, r24
    1bce:	0c f0       	brlt	.+2      	; 0x1bd2 <main+0x1038>
    1bd0:	43 c0       	rjmp	.+134    	; 0x1c58 <main+0x10be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ef 5a       	subi	r30, 0xAF	; 175
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	60 81       	ld	r22, Z
    1bda:	71 81       	ldd	r23, Z+1	; 0x01
    1bdc:	82 81       	ldd	r24, Z+2	; 0x02
    1bde:	93 81       	ldd	r25, Z+3	; 0x03
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e2       	ldi	r20, 0x20	; 32
    1be6:	51 e4       	ldi	r21, 0x41	; 65
    1be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	8e 01       	movw	r16, r28
    1bf2:	05 5b       	subi	r16, 0xB5	; 181
    1bf4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf6:	bc 01       	movw	r22, r24
    1bf8:	cd 01       	movw	r24, r26
    1bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	f8 01       	movw	r30, r16
    1c04:	91 83       	std	Z+1, r25	; 0x01
    1c06:	80 83       	st	Z, r24
    1c08:	1f c0       	rjmp	.+62     	; 0x1c48 <main+0x10ae>
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	e7 5b       	subi	r30, 0xB7	; 183
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	89 e1       	ldi	r24, 0x19	; 25
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	80 83       	st	Z, r24
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e7 5b       	subi	r30, 0xB7	; 183
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	80 81       	ld	r24, Z
    1c20:	91 81       	ldd	r25, Z+1	; 0x01
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	f1 f7       	brne	.-4      	; 0x1c22 <main+0x1088>
    1c26:	fe 01       	movw	r30, r28
    1c28:	e7 5b       	subi	r30, 0xB7	; 183
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	91 83       	std	Z+1, r25	; 0x01
    1c2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c30:	de 01       	movw	r26, r28
    1c32:	a5 5b       	subi	r26, 0xB5	; 181
    1c34:	bf 4f       	sbci	r27, 0xFF	; 255
    1c36:	fe 01       	movw	r30, r28
    1c38:	e5 5b       	subi	r30, 0xB5	; 181
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	80 81       	ld	r24, Z
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	11 96       	adiw	r26, 0x01	; 1
    1c44:	9c 93       	st	X, r25
    1c46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e5 5b       	subi	r30, 0xB5	; 181
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	80 81       	ld	r24, Z
    1c50:	91 81       	ldd	r25, Z+1	; 0x01
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	d1 f6       	brne	.-76     	; 0x1c0a <main+0x1070>
    1c56:	27 c0       	rjmp	.+78     	; 0x1ca6 <main+0x110c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c58:	8e 01       	movw	r16, r28
    1c5a:	05 5b       	subi	r16, 0xB5	; 181
    1c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e3 5b       	subi	r30, 0xB3	; 179
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	f8 01       	movw	r30, r16
    1c76:	91 83       	std	Z+1, r25	; 0x01
    1c78:	80 83       	st	Z, r24
    1c7a:	de 01       	movw	r26, r28
    1c7c:	a9 5b       	subi	r26, 0xB9	; 185
    1c7e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c80:	fe 01       	movw	r30, r28
    1c82:	e5 5b       	subi	r30, 0xB5	; 181
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	80 81       	ld	r24, Z
    1c88:	91 81       	ldd	r25, Z+1	; 0x01
    1c8a:	8d 93       	st	X+, r24
    1c8c:	9c 93       	st	X, r25
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e9 5b       	subi	r30, 0xB9	; 185
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	80 81       	ld	r24, Z
    1c96:	91 81       	ldd	r25, Z+1	; 0x01
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <main+0x10fe>
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e9 5b       	subi	r30, 0xB9	; 185
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	91 83       	std	Z+1, r25	; 0x01
    1ca4:	80 83       	st	Z, r24
				_delay_ms(1000);
				LCD_intgerToString(numPressed);
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e9 52       	subi	r30, 0x29	; 41
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	80 81       	ld	r24, Z
    1cae:	88 2f       	mov	r24, r24
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	0e 94 9b 18 	call	0x3136	; 0x3136 <LCD_intgerToString>
				passEntered[counter]=numPressed;
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e3 52       	subi	r30, 0x23	; 35
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	80 81       	ld	r24, Z
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	ce 01       	movw	r24, r28
    1cc4:	8c 51       	subi	r24, 0x1C	; 28
    1cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc8:	dc 01       	movw	r26, r24
    1cca:	a2 0f       	add	r26, r18
    1ccc:	b3 1f       	adc	r27, r19
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e9 52       	subi	r30, 0x29	; 41
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	80 81       	ld	r24, Z
    1cd6:	8c 93       	st	X, r24

			LCD_goToRowColumn(1,6);
			passIsTrue=0;
			sentpassword=0;

			for(counter = 0 ; counter < 3 ; counter++)
    1cd8:	de 01       	movw	r26, r28
    1cda:	a3 52       	subi	r26, 0x23	; 35
    1cdc:	bf 4f       	sbci	r27, 0xFF	; 255
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e3 52       	subi	r30, 0x23	; 35
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	80 81       	ld	r24, Z
    1ce6:	8f 5f       	subi	r24, 0xFF	; 255
    1ce8:	8c 93       	st	X, r24
    1cea:	fe 01       	movw	r30, r28
    1cec:	e3 52       	subi	r30, 0x23	; 35
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	80 81       	ld	r24, Z
    1cf2:	83 30       	cpi	r24, 0x03	; 3
    1cf4:	08 f4       	brcc	.+2      	; 0x1cf8 <main+0x115e>
    1cf6:	6b ce       	rjmp	.-810    	; 0x19ce <main+0xe34>
				_delay_ms(1000);
				LCD_intgerToString(numPressed);
				passEntered[counter]=numPressed;
			}

			for (counter = 0 ; counter <3 ; counter ++)
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	e3 52       	subi	r30, 0x23	; 35
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfe:	10 82       	st	Z, r1
    1d00:	29 c0       	rjmp	.+82     	; 0x1d54 <main+0x11ba>
			{
				sentpassword += passEntered[counter] * getPow(counter , 10);
    1d02:	fe 01       	movw	r30, r28
    1d04:	e3 52       	subi	r30, 0x23	; 35
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	80 81       	ld	r24, Z
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	ce 01       	movw	r24, r28
    1d10:	8c 51       	subi	r24, 0x1C	; 28
    1d12:	9f 4f       	sbci	r25, 0xFF	; 255
    1d14:	fc 01       	movw	r30, r24
    1d16:	e2 0f       	add	r30, r18
    1d18:	f3 1f       	adc	r31, r19
    1d1a:	10 81       	ld	r17, Z
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	e3 52       	subi	r30, 0x23	; 35
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	80 81       	ld	r24, Z
    1d24:	6a e0       	ldi	r22, 0x0A	; 10
    1d26:	0e 94 a3 05 	call	0xb46	; 0xb46 <getPow>
    1d2a:	18 9f       	mul	r17, r24
    1d2c:	90 2d       	mov	r25, r0
    1d2e:	11 24       	eor	r1, r1
    1d30:	de 01       	movw	r26, r28
    1d32:	a6 52       	subi	r26, 0x26	; 38
    1d34:	bf 4f       	sbci	r27, 0xFF	; 255
    1d36:	fe 01       	movw	r30, r28
    1d38:	e6 52       	subi	r30, 0x26	; 38
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	80 81       	ld	r24, Z
    1d3e:	89 0f       	add	r24, r25
    1d40:	8c 93       	st	X, r24
				_delay_ms(1000);
				LCD_intgerToString(numPressed);
				passEntered[counter]=numPressed;
			}

			for (counter = 0 ; counter <3 ; counter ++)
    1d42:	de 01       	movw	r26, r28
    1d44:	a3 52       	subi	r26, 0x23	; 35
    1d46:	bf 4f       	sbci	r27, 0xFF	; 255
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e3 52       	subi	r30, 0x23	; 35
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	80 81       	ld	r24, Z
    1d50:	8f 5f       	subi	r24, 0xFF	; 255
    1d52:	8c 93       	st	X, r24
    1d54:	fe 01       	movw	r30, r28
    1d56:	e3 52       	subi	r30, 0x23	; 35
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	80 81       	ld	r24, Z
    1d5c:	83 30       	cpi	r24, 0x03	; 3
    1d5e:	88 f2       	brcs	.-94     	; 0x1d02 <main+0x1168>
    1d60:	fe 01       	movw	r30, r28
    1d62:	ed 5b       	subi	r30, 0xBD	; 189
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	a0 e2       	ldi	r26, 0x20	; 32
    1d6c:	b1 e4       	ldi	r27, 0x41	; 65
    1d6e:	80 83       	st	Z, r24
    1d70:	91 83       	std	Z+1, r25	; 0x01
    1d72:	a2 83       	std	Z+2, r26	; 0x02
    1d74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d76:	8e 01       	movw	r16, r28
    1d78:	01 5c       	subi	r16, 0xC1	; 193
    1d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	ed 5b       	subi	r30, 0xBD	; 189
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	60 81       	ld	r22, Z
    1d84:	71 81       	ldd	r23, Z+1	; 0x01
    1d86:	82 81       	ldd	r24, Z+2	; 0x02
    1d88:	93 81       	ldd	r25, Z+3	; 0x03
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	4a e7       	ldi	r20, 0x7A	; 122
    1d90:	53 e4       	ldi	r21, 0x43	; 67
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	f8 01       	movw	r30, r16
    1d9c:	80 83       	st	Z, r24
    1d9e:	91 83       	std	Z+1, r25	; 0x01
    1da0:	a2 83       	std	Z+2, r26	; 0x02
    1da2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1da4:	fe 01       	movw	r30, r28
    1da6:	ff 96       	adiw	r30, 0x3f	; 63
    1da8:	60 81       	ld	r22, Z
    1daa:	71 81       	ldd	r23, Z+1	; 0x01
    1dac:	82 81       	ldd	r24, Z+2	; 0x02
    1dae:	93 81       	ldd	r25, Z+3	; 0x03
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e8       	ldi	r20, 0x80	; 128
    1db6:	5f e3       	ldi	r21, 0x3F	; 63
    1db8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dbc:	88 23       	and	r24, r24
    1dbe:	2c f4       	brge	.+10     	; 0x1dca <main+0x1230>
		__ticks = 1;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9e af       	std	Y+62, r25	; 0x3e
    1dc6:	8d af       	std	Y+61, r24	; 0x3d
    1dc8:	46 c0       	rjmp	.+140    	; 0x1e56 <main+0x12bc>
	else if (__tmp > 65535)
    1dca:	fe 01       	movw	r30, r28
    1dcc:	ff 96       	adiw	r30, 0x3f	; 63
    1dce:	60 81       	ld	r22, Z
    1dd0:	71 81       	ldd	r23, Z+1	; 0x01
    1dd2:	82 81       	ldd	r24, Z+2	; 0x02
    1dd4:	93 81       	ldd	r25, Z+3	; 0x03
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	3f ef       	ldi	r19, 0xFF	; 255
    1dda:	4f e7       	ldi	r20, 0x7F	; 127
    1ddc:	57 e4       	ldi	r21, 0x47	; 71
    1dde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de2:	18 16       	cp	r1, r24
    1de4:	64 f5       	brge	.+88     	; 0x1e3e <main+0x12a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de6:	fe 01       	movw	r30, r28
    1de8:	ed 5b       	subi	r30, 0xBD	; 189
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	93 81       	ldd	r25, Z+3	; 0x03
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	51 e4       	ldi	r21, 0x41	; 65
    1dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	bc 01       	movw	r22, r24
    1e06:	cd 01       	movw	r24, r26
    1e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9e af       	std	Y+62, r25	; 0x3e
    1e12:	8d af       	std	Y+61, r24	; 0x3d
    1e14:	0f c0       	rjmp	.+30     	; 0x1e34 <main+0x129a>
    1e16:	89 e1       	ldi	r24, 0x19	; 25
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	9c af       	std	Y+60, r25	; 0x3c
    1e1c:	8b af       	std	Y+59, r24	; 0x3b
    1e1e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e20:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <main+0x1288>
    1e26:	9c af       	std	Y+60, r25	; 0x3c
    1e28:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	9e af       	std	Y+62, r25	; 0x3e
    1e32:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e34:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e36:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	69 f7       	brne	.-38     	; 0x1e16 <main+0x127c>
    1e3c:	16 c0       	rjmp	.+44     	; 0x1e6a <main+0x12d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3e:	fe 01       	movw	r30, r28
    1e40:	ff 96       	adiw	r30, 0x3f	; 63
    1e42:	60 81       	ld	r22, Z
    1e44:	71 81       	ldd	r23, Z+1	; 0x01
    1e46:	82 81       	ldd	r24, Z+2	; 0x02
    1e48:	93 81       	ldd	r25, Z+3	; 0x03
    1e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9e af       	std	Y+62, r25	; 0x3e
    1e54:	8d af       	std	Y+61, r24	; 0x3d
    1e56:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e58:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e5a:	9a af       	std	Y+58, r25	; 0x3a
    1e5c:	89 af       	std	Y+57, r24	; 0x39
    1e5e:	89 ad       	ldd	r24, Y+57	; 0x39
    1e60:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <main+0x12c8>
    1e66:	9a af       	std	Y+58, r25	; 0x3a
    1e68:	89 af       	std	Y+57, r24	; 0x39
			}

			_delay_ms(10);

			//Hand Shaking
			UART_sendByte(NEWPASSWORD);
    1e6a:	8e e0       	ldi	r24, 0x0E	; 14
    1e6c:	0e 94 51 19 	call	0x32a2	; 0x32a2 <UART_sendByte>
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	a8 ec       	ldi	r26, 0xC8	; 200
    1e76:	b2 e4       	ldi	r27, 0x42	; 66
    1e78:	8d ab       	std	Y+53, r24	; 0x35
    1e7a:	9e ab       	std	Y+54, r25	; 0x36
    1e7c:	af ab       	std	Y+55, r26	; 0x37
    1e7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e80:	6d a9       	ldd	r22, Y+53	; 0x35
    1e82:	7e a9       	ldd	r23, Y+54	; 0x36
    1e84:	8f a9       	ldd	r24, Y+55	; 0x37
    1e86:	98 ad       	ldd	r25, Y+56	; 0x38
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	4a e7       	ldi	r20, 0x7A	; 122
    1e8e:	53 e4       	ldi	r21, 0x43	; 67
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	89 ab       	std	Y+49, r24	; 0x31
    1e9a:	9a ab       	std	Y+50, r25	; 0x32
    1e9c:	ab ab       	std	Y+51, r26	; 0x33
    1e9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ea0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ea2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ea4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ea6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e8       	ldi	r20, 0x80	; 128
    1eae:	5f e3       	ldi	r21, 0x3F	; 63
    1eb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb4:	88 23       	and	r24, r24
    1eb6:	2c f4       	brge	.+10     	; 0x1ec2 <main+0x1328>
		__ticks = 1;
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	98 ab       	std	Y+48, r25	; 0x30
    1ebe:	8f a7       	std	Y+47, r24	; 0x2f
    1ec0:	3f c0       	rjmp	.+126    	; 0x1f40 <main+0x13a6>
	else if (__tmp > 65535)
    1ec2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ec4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ec6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ec8:	9c a9       	ldd	r25, Y+52	; 0x34
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	3f ef       	ldi	r19, 0xFF	; 255
    1ece:	4f e7       	ldi	r20, 0x7F	; 127
    1ed0:	57 e4       	ldi	r21, 0x47	; 71
    1ed2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed6:	18 16       	cp	r1, r24
    1ed8:	4c f5       	brge	.+82     	; 0x1f2c <main+0x1392>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eda:	6d a9       	ldd	r22, Y+53	; 0x35
    1edc:	7e a9       	ldd	r23, Y+54	; 0x36
    1ede:	8f a9       	ldd	r24, Y+55	; 0x37
    1ee0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e2       	ldi	r20, 0x20	; 32
    1ee8:	51 e4       	ldi	r21, 0x41	; 65
    1eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	bc 01       	movw	r22, r24
    1ef4:	cd 01       	movw	r24, r26
    1ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	98 ab       	std	Y+48, r25	; 0x30
    1f00:	8f a7       	std	Y+47, r24	; 0x2f
    1f02:	0f c0       	rjmp	.+30     	; 0x1f22 <main+0x1388>
    1f04:	89 e1       	ldi	r24, 0x19	; 25
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	9e a7       	std	Y+46, r25	; 0x2e
    1f0a:	8d a7       	std	Y+45, r24	; 0x2d
    1f0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <main+0x1376>
    1f14:	9e a7       	std	Y+46, r25	; 0x2e
    1f16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	98 ab       	std	Y+48, r25	; 0x30
    1f20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f24:	98 a9       	ldd	r25, Y+48	; 0x30
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	69 f7       	brne	.-38     	; 0x1f04 <main+0x136a>
    1f2a:	14 c0       	rjmp	.+40     	; 0x1f54 <main+0x13ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f30:	8b a9       	ldd	r24, Y+51	; 0x33
    1f32:	9c a9       	ldd	r25, Y+52	; 0x34
    1f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	98 ab       	std	Y+48, r25	; 0x30
    1f3e:	8f a7       	std	Y+47, r24	; 0x2f
    1f40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f42:	98 a9       	ldd	r25, Y+48	; 0x30
    1f44:	9c a7       	std	Y+44, r25	; 0x2c
    1f46:	8b a7       	std	Y+43, r24	; 0x2b
    1f48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <main+0x13b2>
    1f50:	9c a7       	std	Y+44, r25	; 0x2c
    1f52:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(100);
			PORTB = 1<<noOfPasswordEntering;
    1f54:	a8 e3       	ldi	r26, 0x38	; 56
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	fe 01       	movw	r30, r28
    1f5a:	e8 52       	subi	r30, 0x28	; 40
    1f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5e:	80 81       	ld	r24, Z
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <main+0x13d4>
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	2a 95       	dec	r18
    1f70:	e2 f7       	brpl	.-8      	; 0x1f6a <main+0x13d0>
    1f72:	8c 93       	st	X, r24

			while (UART_recieveByte() != OK) {}
    1f74:	0e 94 68 19 	call	0x32d0	; 0x32d0 <UART_recieveByte>
    1f78:	8f 30       	cpi	r24, 0x0F	; 15
    1f7a:	e1 f7       	brne	.-8      	; 0x1f74 <main+0x13da>

			UART_sendByte(sentpassword); //sending the password to the 2nd MC to open the door
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	e6 52       	subi	r30, 0x26	; 38
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	80 81       	ld	r24, Z
    1f84:	0e 94 51 19 	call	0x32a2	; 0x32a2 <UART_sendByte>
			//_delay_ms(5);

			do
			{
				M2_reply = UART_recieveByte();
    1f88:	0e 94 68 19 	call	0x32d0	; 0x32d0 <UART_recieveByte>
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	ea 52       	subi	r30, 0x2A	; 42
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	80 83       	st	Z, r24
			}
			while( (M2_reply!=FALSE) && (M2_reply!=TRUE) );
    1f94:	fe 01       	movw	r30, r28
    1f96:	ea 52       	subi	r30, 0x2A	; 42
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	80 81       	ld	r24, Z
    1f9c:	8a 30       	cpi	r24, 0x0A	; 10
    1f9e:	31 f0       	breq	.+12     	; 0x1fac <main+0x1412>
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	ea 52       	subi	r30, 0x2A	; 42
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	80 81       	ld	r24, Z
    1fa8:	8b 30       	cpi	r24, 0x0B	; 11
    1faa:	71 f7       	brne	.-36     	; 0x1f88 <main+0x13ee>

			//M2_reply = UART_recieveByte();

			//M2_reply = FALSE;

			if ( M2_reply == FALSE)
    1fac:	fe 01       	movw	r30, r28
    1fae:	ea 52       	subi	r30, 0x2A	; 42
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	80 81       	ld	r24, Z
    1fb4:	8a 30       	cpi	r24, 0x0A	; 10
    1fb6:	b9 f4       	brne	.+46     	; 0x1fe6 <main+0x144c>
			{
				noOfPasswordEntering += 1;
    1fb8:	de 01       	movw	r26, r28
    1fba:	a8 52       	subi	r26, 0x28	; 40
    1fbc:	bf 4f       	sbci	r27, 0xFF	; 255
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	e8 52       	subi	r30, 0x28	; 40
    1fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc4:	80 81       	ld	r24, Z
    1fc6:	8f 5f       	subi	r24, 0xFF	; 255
    1fc8:	8c 93       	st	X, r24
				if(noOfPasswordEntering<3)
    1fca:	fe 01       	movw	r30, r28
    1fcc:	e8 52       	subi	r30, 0x28	; 40
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	80 81       	ld	r24, Z
    1fd2:	83 30       	cpi	r24, 0x03	; 3
    1fd4:	20 f4       	brcc	.+8      	; 0x1fde <main+0x1444>
				{
					UART_sendByte(CONTINUE);
    1fd6:	84 e1       	ldi	r24, 0x14	; 20
    1fd8:	0e 94 51 19 	call	0x32a2	; 0x32a2 <UART_sendByte>
    1fdc:	10 c1       	rjmp	.+544    	; 0x21fe <main+0x1664>
				}
				else
				{
					UART_sendByte(DANGER);
    1fde:	8c e0       	ldi	r24, 0x0C	; 12
    1fe0:	0e 94 51 19 	call	0x32a2	; 0x32a2 <UART_sendByte>
    1fe4:	0c c1       	rjmp	.+536    	; 0x21fe <main+0x1664>
				}
			}
			else if (M2_reply == TRUE)
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	ea 52       	subi	r30, 0x2A	; 42
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	80 81       	ld	r24, Z
    1fee:	8b 30       	cpi	r24, 0x0B	; 11
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <main+0x145a>
    1ff2:	05 c1       	rjmp	.+522    	; 0x21fe <main+0x1664>
			{
				UART_sendByte(SAFE); //to operate the motor
    1ff4:	8d e0       	ldi	r24, 0x0D	; 13
    1ff6:	0e 94 51 19 	call	0x32a2	; 0x32a2 <UART_sendByte>
				passIsTrue = 1 ;
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	eb 52       	subi	r30, 0x2B	; 43
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	80 83       	st	Z, r24
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	aa e7       	ldi	r26, 0x7A	; 122
    200a:	b4 e4       	ldi	r27, 0x44	; 68
    200c:	8f a3       	std	Y+39, r24	; 0x27
    200e:	98 a7       	std	Y+40, r25	; 0x28
    2010:	a9 a7       	std	Y+41, r26	; 0x29
    2012:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2014:	6f a1       	ldd	r22, Y+39	; 0x27
    2016:	78 a5       	ldd	r23, Y+40	; 0x28
    2018:	89 a5       	ldd	r24, Y+41	; 0x29
    201a:	9a a5       	ldd	r25, Y+42	; 0x2a
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	4a e7       	ldi	r20, 0x7A	; 122
    2022:	53 e4       	ldi	r21, 0x43	; 67
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	8b a3       	std	Y+35, r24	; 0x23
    202e:	9c a3       	std	Y+36, r25	; 0x24
    2030:	ad a3       	std	Y+37, r26	; 0x25
    2032:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2034:	6b a1       	ldd	r22, Y+35	; 0x23
    2036:	7c a1       	ldd	r23, Y+36	; 0x24
    2038:	8d a1       	ldd	r24, Y+37	; 0x25
    203a:	9e a1       	ldd	r25, Y+38	; 0x26
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e8       	ldi	r20, 0x80	; 128
    2042:	5f e3       	ldi	r21, 0x3F	; 63
    2044:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2048:	88 23       	and	r24, r24
    204a:	2c f4       	brge	.+10     	; 0x2056 <main+0x14bc>
		__ticks = 1;
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	9a a3       	std	Y+34, r25	; 0x22
    2052:	89 a3       	std	Y+33, r24	; 0x21
    2054:	3f c0       	rjmp	.+126    	; 0x20d4 <main+0x153a>
	else if (__tmp > 65535)
    2056:	6b a1       	ldd	r22, Y+35	; 0x23
    2058:	7c a1       	ldd	r23, Y+36	; 0x24
    205a:	8d a1       	ldd	r24, Y+37	; 0x25
    205c:	9e a1       	ldd	r25, Y+38	; 0x26
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	3f ef       	ldi	r19, 0xFF	; 255
    2062:	4f e7       	ldi	r20, 0x7F	; 127
    2064:	57 e4       	ldi	r21, 0x47	; 71
    2066:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    206a:	18 16       	cp	r1, r24
    206c:	4c f5       	brge	.+82     	; 0x20c0 <main+0x1526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206e:	6f a1       	ldd	r22, Y+39	; 0x27
    2070:	78 a5       	ldd	r23, Y+40	; 0x28
    2072:	89 a5       	ldd	r24, Y+41	; 0x29
    2074:	9a a5       	ldd	r25, Y+42	; 0x2a
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e2       	ldi	r20, 0x20	; 32
    207c:	51 e4       	ldi	r21, 0x41	; 65
    207e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	bc 01       	movw	r22, r24
    2088:	cd 01       	movw	r24, r26
    208a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9a a3       	std	Y+34, r25	; 0x22
    2094:	89 a3       	std	Y+33, r24	; 0x21
    2096:	0f c0       	rjmp	.+30     	; 0x20b6 <main+0x151c>
    2098:	89 e1       	ldi	r24, 0x19	; 25
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	98 a3       	std	Y+32, r25	; 0x20
    209e:	8f 8f       	std	Y+31, r24	; 0x1f
    20a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20a2:	98 a1       	ldd	r25, Y+32	; 0x20
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	f1 f7       	brne	.-4      	; 0x20a4 <main+0x150a>
    20a8:	98 a3       	std	Y+32, r25	; 0x20
    20aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ac:	89 a1       	ldd	r24, Y+33	; 0x21
    20ae:	9a a1       	ldd	r25, Y+34	; 0x22
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	9a a3       	std	Y+34, r25	; 0x22
    20b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b6:	89 a1       	ldd	r24, Y+33	; 0x21
    20b8:	9a a1       	ldd	r25, Y+34	; 0x22
    20ba:	00 97       	sbiw	r24, 0x00	; 0
    20bc:	69 f7       	brne	.-38     	; 0x2098 <main+0x14fe>
    20be:	14 c0       	rjmp	.+40     	; 0x20e8 <main+0x154e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c0:	6b a1       	ldd	r22, Y+35	; 0x23
    20c2:	7c a1       	ldd	r23, Y+36	; 0x24
    20c4:	8d a1       	ldd	r24, Y+37	; 0x25
    20c6:	9e a1       	ldd	r25, Y+38	; 0x26
    20c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	9a a3       	std	Y+34, r25	; 0x22
    20d2:	89 a3       	std	Y+33, r24	; 0x21
    20d4:	89 a1       	ldd	r24, Y+33	; 0x21
    20d6:	9a a1       	ldd	r25, Y+34	; 0x22
    20d8:	9e 8f       	std	Y+30, r25	; 0x1e
    20da:	8d 8f       	std	Y+29, r24	; 0x1d
    20dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <main+0x1546>
    20e4:	9e 8f       	std	Y+30, r25	; 0x1e
    20e6:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				LCD_clearScreen();
    20e8:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Done !");
    20ec:	24 e9       	ldi	r18, 0x94	; 148
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	60 e0       	ldi	r22, 0x00	; 0
    20f4:	a9 01       	movw	r20, r18
    20f6:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayStringRowColumn>
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	aa e7       	ldi	r26, 0x7A	; 122
    2100:	b4 e4       	ldi	r27, 0x44	; 68
    2102:	89 8f       	std	Y+25, r24	; 0x19
    2104:	9a 8f       	std	Y+26, r25	; 0x1a
    2106:	ab 8f       	std	Y+27, r26	; 0x1b
    2108:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210a:	69 8d       	ldd	r22, Y+25	; 0x19
    210c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    210e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2110:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	4a e7       	ldi	r20, 0x7A	; 122
    2118:	53 e4       	ldi	r21, 0x43	; 67
    211a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	8d 8b       	std	Y+21, r24	; 0x15
    2124:	9e 8b       	std	Y+22, r25	; 0x16
    2126:	af 8b       	std	Y+23, r26	; 0x17
    2128:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    212a:	6d 89       	ldd	r22, Y+21	; 0x15
    212c:	7e 89       	ldd	r23, Y+22	; 0x16
    212e:	8f 89       	ldd	r24, Y+23	; 0x17
    2130:	98 8d       	ldd	r25, Y+24	; 0x18
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e8       	ldi	r20, 0x80	; 128
    2138:	5f e3       	ldi	r21, 0x3F	; 63
    213a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    213e:	88 23       	and	r24, r24
    2140:	2c f4       	brge	.+10     	; 0x214c <main+0x15b2>
		__ticks = 1;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	9c 8b       	std	Y+20, r25	; 0x14
    2148:	8b 8b       	std	Y+19, r24	; 0x13
    214a:	3f c0       	rjmp	.+126    	; 0x21ca <main+0x1630>
	else if (__tmp > 65535)
    214c:	6d 89       	ldd	r22, Y+21	; 0x15
    214e:	7e 89       	ldd	r23, Y+22	; 0x16
    2150:	8f 89       	ldd	r24, Y+23	; 0x17
    2152:	98 8d       	ldd	r25, Y+24	; 0x18
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	3f ef       	ldi	r19, 0xFF	; 255
    2158:	4f e7       	ldi	r20, 0x7F	; 127
    215a:	57 e4       	ldi	r21, 0x47	; 71
    215c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2160:	18 16       	cp	r1, r24
    2162:	4c f5       	brge	.+82     	; 0x21b6 <main+0x161c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2164:	69 8d       	ldd	r22, Y+25	; 0x19
    2166:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2168:	8b 8d       	ldd	r24, Y+27	; 0x1b
    216a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e2       	ldi	r20, 0x20	; 32
    2172:	51 e4       	ldi	r21, 0x41	; 65
    2174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	bc 01       	movw	r22, r24
    217e:	cd 01       	movw	r24, r26
    2180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	9c 8b       	std	Y+20, r25	; 0x14
    218a:	8b 8b       	std	Y+19, r24	; 0x13
    218c:	0f c0       	rjmp	.+30     	; 0x21ac <main+0x1612>
    218e:	89 e1       	ldi	r24, 0x19	; 25
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	9a 8b       	std	Y+18, r25	; 0x12
    2194:	89 8b       	std	Y+17, r24	; 0x11
    2196:	89 89       	ldd	r24, Y+17	; 0x11
    2198:	9a 89       	ldd	r25, Y+18	; 0x12
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <main+0x1600>
    219e:	9a 8b       	std	Y+18, r25	; 0x12
    21a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a2:	8b 89       	ldd	r24, Y+19	; 0x13
    21a4:	9c 89       	ldd	r25, Y+20	; 0x14
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	9c 8b       	std	Y+20, r25	; 0x14
    21aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ac:	8b 89       	ldd	r24, Y+19	; 0x13
    21ae:	9c 89       	ldd	r25, Y+20	; 0x14
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	69 f7       	brne	.-38     	; 0x218e <main+0x15f4>
    21b4:	14 c0       	rjmp	.+40     	; 0x21de <main+0x1644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b6:	6d 89       	ldd	r22, Y+21	; 0x15
    21b8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ba:	8f 89       	ldd	r24, Y+23	; 0x17
    21bc:	98 8d       	ldd	r25, Y+24	; 0x18
    21be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	9c 8b       	std	Y+20, r25	; 0x14
    21c8:	8b 8b       	std	Y+19, r24	; 0x13
    21ca:	8b 89       	ldd	r24, Y+19	; 0x13
    21cc:	9c 89       	ldd	r25, Y+20	; 0x14
    21ce:	98 8b       	std	Y+16, r25	; 0x10
    21d0:	8f 87       	std	Y+15, r24	; 0x0f
    21d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d4:	98 89       	ldd	r25, Y+16	; 0x10
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <main+0x163c>
    21da:	98 8b       	std	Y+16, r25	; 0x10
    21dc:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
				LCD_clearScreen();
    21de:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Enter Pass");
    21e2:	29 e8       	ldi	r18, 0x89	; 137
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	60 e0       	ldi	r22, 0x00	; 0
    21ea:	a9 01       	movw	r20, r18
    21ec:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,0,"Pass:");
    21f0:	29 e6       	ldi	r18, 0x69	; 105
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	60 e0       	ldi	r22, 0x00	; 0
    21f8:	a9 01       	movw	r20, r18
    21fa:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayStringRowColumn>
			}

		}while(noOfPasswordEntering < 3 && passIsTrue == 0 );
    21fe:	fe 01       	movw	r30, r28
    2200:	e8 52       	subi	r30, 0x28	; 40
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	80 81       	ld	r24, Z
    2206:	83 30       	cpi	r24, 0x03	; 3
    2208:	38 f4       	brcc	.+14     	; 0x2218 <main+0x167e>
    220a:	fe 01       	movw	r30, r28
    220c:	eb 52       	subi	r30, 0x2B	; 43
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	80 81       	ld	r24, Z
    2212:	88 23       	and	r24, r24
    2214:	09 f4       	brne	.+2      	; 0x2218 <main+0x167e>
    2216:	07 cb       	rjmp	.-2546   	; 0x1826 <main+0xc8c>

		LCD_clearScreen();
    2218:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>

		if (noOfPasswordEntering >= 3 && passIsTrue == 0)
    221c:	fe 01       	movw	r30, r28
    221e:	e8 52       	subi	r30, 0x28	; 40
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	80 81       	ld	r24, Z
    2224:	83 30       	cpi	r24, 0x03	; 3
    2226:	08 f4       	brcc	.+2      	; 0x222a <main+0x1690>
    2228:	fa ca       	rjmp	.-2572   	; 0x181e <main+0xc84>
    222a:	fe 01       	movw	r30, r28
    222c:	eb 52       	subi	r30, 0x2B	; 43
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	80 81       	ld	r24, Z
    2232:	88 23       	and	r24, r24
    2234:	09 f0       	breq	.+2      	; 0x2238 <main+0x169e>
    2236:	f3 ca       	rjmp	.-2586   	; 0x181e <main+0xc84>
		{
			//UART_sendByte(DANGER); //to operate buzzer
			LCD_clearScreen();
    2238:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"7RAAMY");
    223c:	2b e9       	ldi	r18, 0x9B	; 155
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	60 e0       	ldi	r22, 0x00	; 0
    2244:	a9 01       	movw	r20, r18
    2246:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayStringRowColumn>
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	aa ef       	ldi	r26, 0xFA	; 250
    2250:	b3 e4       	ldi	r27, 0x43	; 67
    2252:	8b 87       	std	Y+11, r24	; 0x0b
    2254:	9c 87       	std	Y+12, r25	; 0x0c
    2256:	ad 87       	std	Y+13, r26	; 0x0d
    2258:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225a:	6b 85       	ldd	r22, Y+11	; 0x0b
    225c:	7c 85       	ldd	r23, Y+12	; 0x0c
    225e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2260:	9e 85       	ldd	r25, Y+14	; 0x0e
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	4a e7       	ldi	r20, 0x7A	; 122
    2268:	53 e4       	ldi	r21, 0x43	; 67
    226a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	8f 83       	std	Y+7, r24	; 0x07
    2274:	98 87       	std	Y+8, r25	; 0x08
    2276:	a9 87       	std	Y+9, r26	; 0x09
    2278:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    227a:	6f 81       	ldd	r22, Y+7	; 0x07
    227c:	78 85       	ldd	r23, Y+8	; 0x08
    227e:	89 85       	ldd	r24, Y+9	; 0x09
    2280:	9a 85       	ldd	r25, Y+10	; 0x0a
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e8       	ldi	r20, 0x80	; 128
    2288:	5f e3       	ldi	r21, 0x3F	; 63
    228a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    228e:	88 23       	and	r24, r24
    2290:	2c f4       	brge	.+10     	; 0x229c <main+0x1702>
		__ticks = 1;
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	9e 83       	std	Y+6, r25	; 0x06
    2298:	8d 83       	std	Y+5, r24	; 0x05
    229a:	3f c0       	rjmp	.+126    	; 0x231a <main+0x1780>
	else if (__tmp > 65535)
    229c:	6f 81       	ldd	r22, Y+7	; 0x07
    229e:	78 85       	ldd	r23, Y+8	; 0x08
    22a0:	89 85       	ldd	r24, Y+9	; 0x09
    22a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	3f ef       	ldi	r19, 0xFF	; 255
    22a8:	4f e7       	ldi	r20, 0x7F	; 127
    22aa:	57 e4       	ldi	r21, 0x47	; 71
    22ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22b0:	18 16       	cp	r1, r24
    22b2:	4c f5       	brge	.+82     	; 0x2306 <main+0x176c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e2       	ldi	r20, 0x20	; 32
    22c2:	51 e4       	ldi	r21, 0x41	; 65
    22c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	bc 01       	movw	r22, r24
    22ce:	cd 01       	movw	r24, r26
    22d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	9e 83       	std	Y+6, r25	; 0x06
    22da:	8d 83       	std	Y+5, r24	; 0x05
    22dc:	0f c0       	rjmp	.+30     	; 0x22fc <main+0x1762>
    22de:	89 e1       	ldi	r24, 0x19	; 25
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	9c 83       	std	Y+4, r25	; 0x04
    22e4:	8b 83       	std	Y+3, r24	; 0x03
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	f1 f7       	brne	.-4      	; 0x22ea <main+0x1750>
    22ee:	9c 83       	std	Y+4, r25	; 0x04
    22f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f2:	8d 81       	ldd	r24, Y+5	; 0x05
    22f4:	9e 81       	ldd	r25, Y+6	; 0x06
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	9e 83       	std	Y+6, r25	; 0x06
    22fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	69 f7       	brne	.-38     	; 0x22de <main+0x1744>
    2304:	14 c0       	rjmp	.+40     	; 0x232e <main+0x1794>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2306:	6f 81       	ldd	r22, Y+7	; 0x07
    2308:	78 85       	ldd	r23, Y+8	; 0x08
    230a:	89 85       	ldd	r24, Y+9	; 0x09
    230c:	9a 85       	ldd	r25, Y+10	; 0x0a
    230e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	9e 83       	std	Y+6, r25	; 0x06
    2318:	8d 83       	std	Y+5, r24	; 0x05
    231a:	8d 81       	ldd	r24, Y+5	; 0x05
    231c:	9e 81       	ldd	r25, Y+6	; 0x06
    231e:	9a 83       	std	Y+2, r25	; 0x02
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	9a 81       	ldd	r25, Y+2	; 0x02
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	f1 f7       	brne	.-4      	; 0x2326 <main+0x178c>
    232a:	9a 83       	std	Y+2, r25	; 0x02
    232c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500); //lock the system for an hour
			LCD_clearScreen();
    232e:	0e 94 be 18 	call	0x317c	; 0x317c <LCD_clearScreen>
    2332:	75 ca       	rjmp	.-2838   	; 0x181e <main+0xc84>

00002334 <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(void)
{
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
    233c:	e7 e2       	ldi	r30, 0x27	; 39
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	10 82       	st	Z, r1
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
    2342:	e6 e2       	ldi	r30, 0x26	; 38
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	83 e8       	ldi	r24, 0x83	; 131
    2348:	80 83       	st	Z, r24
}
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	0f 92       	push	r0
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* channel number must be from 0 --> 7 */
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	87 70       	andi	r24, 0x07	; 7
    2360:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    2362:	a7 e2       	ldi	r26, 0x27	; 39
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e7 e2       	ldi	r30, 0x27	; 39
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	80 7e       	andi	r24, 0xE0	; 224
    236e:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
    2370:	a7 e2       	ldi	r26, 0x27	; 39
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e7 e2       	ldi	r30, 0x27	; 39
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	90 81       	ld	r25, Z
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	89 2b       	or	r24, r25
    237e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* start conversion write '1' to ADSC */
    2380:	a6 e2       	ldi	r26, 0x26	; 38
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e6 e2       	ldi	r30, 0x26	; 38
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	80 64       	ori	r24, 0x40	; 64
    238c:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
    238e:	e6 e2       	ldi	r30, 0x26	; 38
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	88 2f       	mov	r24, r24
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	80 71       	andi	r24, 0x10	; 16
    239a:	90 70       	andi	r25, 0x00	; 0
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	b9 f3       	breq	.-18     	; 0x238e <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* clear ADIF by write '1' to it :) */
    23a0:	a6 e2       	ldi	r26, 0x26	; 38
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	e6 e2       	ldi	r30, 0x26	; 38
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	80 61       	ori	r24, 0x10	; 16
    23ac:	8c 93       	st	X, r24
	return ADC; /* return the data register */
    23ae:	e4 e2       	ldi	r30, 0x24	; 36
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	91 81       	ldd	r25, Z+1	; 0x01
}
    23b6:	0f 90       	pop	r0
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	08 95       	ret

000023be <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
    23c6:	0e 94 89 12 	call	0x2512	; 0x2512 <TWI_init>
}
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <EEPROM_writeByte+0x6>
    23d6:	00 d0       	rcall	.+0      	; 0x23d8 <EEPROM_writeByte+0x8>
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	9a 83       	std	Y+2, r25	; 0x02
    23de:	89 83       	std	Y+1, r24	; 0x01
    23e0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    23e2:	0e 94 9f 12 	call	0x253e	; 0x253e <TWI_start>
    if (TWI_getStatus() != TW_START)
    23e6:	0e 94 f7 12 	call	0x25ee	; 0x25ee <TWI_getStatus>
    23ea:	88 30       	cpi	r24, 0x08	; 8
    23ec:	11 f0       	breq	.+4      	; 0x23f2 <EEPROM_writeByte+0x22>
        return ERROR;
    23ee:	1c 82       	std	Y+4, r1	; 0x04
    23f0:	28 c0       	rjmp	.+80     	; 0x2442 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	9a 81       	ldd	r25, Y+2	; 0x02
    23f6:	80 70       	andi	r24, 0x00	; 0
    23f8:	97 70       	andi	r25, 0x07	; 7
    23fa:	88 0f       	add	r24, r24
    23fc:	89 2f       	mov	r24, r25
    23fe:	88 1f       	adc	r24, r24
    2400:	99 0b       	sbc	r25, r25
    2402:	91 95       	neg	r25
    2404:	80 6a       	ori	r24, 0xA0	; 160
    2406:	0e 94 ba 12 	call	0x2574	; 0x2574 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    240a:	0e 94 f7 12 	call	0x25ee	; 0x25ee <TWI_getStatus>
    240e:	88 31       	cpi	r24, 0x18	; 24
    2410:	11 f0       	breq	.+4      	; 0x2416 <EEPROM_writeByte+0x46>
        return ERROR; 
    2412:	1c 82       	std	Y+4, r1	; 0x04
    2414:	16 c0       	rjmp	.+44     	; 0x2442 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	0e 94 ba 12 	call	0x2574	; 0x2574 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    241c:	0e 94 f7 12 	call	0x25ee	; 0x25ee <TWI_getStatus>
    2420:	88 32       	cpi	r24, 0x28	; 40
    2422:	11 f0       	breq	.+4      	; 0x2428 <EEPROM_writeByte+0x58>
        return ERROR;
    2424:	1c 82       	std	Y+4, r1	; 0x04
    2426:	0d c0       	rjmp	.+26     	; 0x2442 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	0e 94 ba 12 	call	0x2574	; 0x2574 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    242e:	0e 94 f7 12 	call	0x25ee	; 0x25ee <TWI_getStatus>
    2432:	88 32       	cpi	r24, 0x28	; 40
    2434:	11 f0       	breq	.+4      	; 0x243a <EEPROM_writeByte+0x6a>
        return ERROR;
    2436:	1c 82       	std	Y+4, r1	; 0x04
    2438:	04 c0       	rjmp	.+8      	; 0x2442 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    243a:	0e 94 af 12 	call	0x255e	; 0x255e <TWI_stop>
	
    return SUCCESS;
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	8c 83       	std	Y+4, r24	; 0x04
    2442:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	cf 91       	pop	r28
    244e:	df 91       	pop	r29
    2450:	08 95       	ret

00002452 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	00 d0       	rcall	.+0      	; 0x2458 <EEPROM_readByte+0x6>
    2458:	00 d0       	rcall	.+0      	; 0x245a <EEPROM_readByte+0x8>
    245a:	0f 92       	push	r0
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	9a 83       	std	Y+2, r25	; 0x02
    2462:	89 83       	std	Y+1, r24	; 0x01
    2464:	7c 83       	std	Y+4, r23	; 0x04
    2466:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2468:	0e 94 9f 12 	call	0x253e	; 0x253e <TWI_start>
    if (TWI_getStatus() != TW_START)
    246c:	0e 94 f7 12 	call	0x25ee	; 0x25ee <TWI_getStatus>
    2470:	88 30       	cpi	r24, 0x08	; 8
    2472:	11 f0       	breq	.+4      	; 0x2478 <EEPROM_readByte+0x26>
        return ERROR;
    2474:	1d 82       	std	Y+5, r1	; 0x05
    2476:	44 c0       	rjmp	.+136    	; 0x2500 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	9a 81       	ldd	r25, Y+2	; 0x02
    247c:	80 70       	andi	r24, 0x00	; 0
    247e:	97 70       	andi	r25, 0x07	; 7
    2480:	88 0f       	add	r24, r24
    2482:	89 2f       	mov	r24, r25
    2484:	88 1f       	adc	r24, r24
    2486:	99 0b       	sbc	r25, r25
    2488:	91 95       	neg	r25
    248a:	80 6a       	ori	r24, 0xA0	; 160
    248c:	0e 94 ba 12 	call	0x2574	; 0x2574 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    2490:	0e 94 f7 12 	call	0x25ee	; 0x25ee <TWI_getStatus>
    2494:	88 31       	cpi	r24, 0x18	; 24
    2496:	11 f0       	breq	.+4      	; 0x249c <EEPROM_readByte+0x4a>
        return ERROR;
    2498:	1d 82       	std	Y+5, r1	; 0x05
    249a:	32 c0       	rjmp	.+100    	; 0x2500 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	0e 94 ba 12 	call	0x2574	; 0x2574 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    24a2:	0e 94 f7 12 	call	0x25ee	; 0x25ee <TWI_getStatus>
    24a6:	88 32       	cpi	r24, 0x28	; 40
    24a8:	11 f0       	breq	.+4      	; 0x24ae <EEPROM_readByte+0x5c>
        return ERROR;
    24aa:	1d 82       	std	Y+5, r1	; 0x05
    24ac:	29 c0       	rjmp	.+82     	; 0x2500 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    24ae:	0e 94 9f 12 	call	0x253e	; 0x253e <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    24b2:	0e 94 f7 12 	call	0x25ee	; 0x25ee <TWI_getStatus>
    24b6:	80 31       	cpi	r24, 0x10	; 16
    24b8:	11 f0       	breq	.+4      	; 0x24be <EEPROM_readByte+0x6c>
        return ERROR;
    24ba:	1d 82       	std	Y+5, r1	; 0x05
    24bc:	21 c0       	rjmp	.+66     	; 0x2500 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	9a 81       	ldd	r25, Y+2	; 0x02
    24c2:	80 70       	andi	r24, 0x00	; 0
    24c4:	97 70       	andi	r25, 0x07	; 7
    24c6:	88 0f       	add	r24, r24
    24c8:	89 2f       	mov	r24, r25
    24ca:	88 1f       	adc	r24, r24
    24cc:	99 0b       	sbc	r25, r25
    24ce:	91 95       	neg	r25
    24d0:	81 6a       	ori	r24, 0xA1	; 161
    24d2:	0e 94 ba 12 	call	0x2574	; 0x2574 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    24d6:	0e 94 f7 12 	call	0x25ee	; 0x25ee <TWI_getStatus>
    24da:	80 34       	cpi	r24, 0x40	; 64
    24dc:	11 f0       	breq	.+4      	; 0x24e2 <EEPROM_readByte+0x90>
        return ERROR;
    24de:	1d 82       	std	Y+5, r1	; 0x05
    24e0:	0f c0       	rjmp	.+30     	; 0x2500 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    24e2:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <TWI_readWithNACK>
    24e6:	eb 81       	ldd	r30, Y+3	; 0x03
    24e8:	fc 81       	ldd	r31, Y+4	; 0x04
    24ea:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    24ec:	0e 94 f7 12 	call	0x25ee	; 0x25ee <TWI_getStatus>
    24f0:	88 35       	cpi	r24, 0x58	; 88
    24f2:	11 f0       	breq	.+4      	; 0x24f8 <EEPROM_readByte+0xa6>
        return ERROR;
    24f4:	1d 82       	std	Y+5, r1	; 0x05
    24f6:	04 c0       	rjmp	.+8      	; 0x2500 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    24f8:	0e 94 af 12 	call	0x255e	; 0x255e <TWI_stop>
    return SUCCESS;
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	8d 83       	std	Y+5, r24	; 0x05
    2500:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2502:	0f 90       	pop	r0
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    251a:	e0 e2       	ldi	r30, 0x20	; 32
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	82 e0       	ldi	r24, 0x02	; 2
    2520:	80 83       	st	Z, r24
	TWSR = 0x00;
    2522:	e1 e2       	ldi	r30, 0x21	; 33
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    2528:	e2 e2       	ldi	r30, 0x22	; 34
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	82 e0       	ldi	r24, 0x02	; 2
    252e:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2530:	e6 e5       	ldi	r30, 0x56	; 86
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	84 e0       	ldi	r24, 0x04	; 4
    2536:	80 83       	st	Z, r24
}
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	08 95       	ret

0000253e <TWI_start>:

void TWI_start(void)
{
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2546:	e6 e5       	ldi	r30, 0x56	; 86
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	84 ea       	ldi	r24, 0xA4	; 164
    254c:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    254e:	e6 e5       	ldi	r30, 0x56	; 86
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	88 23       	and	r24, r24
    2556:	dc f7       	brge	.-10     	; 0x254e <TWI_start+0x10>
}
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	08 95       	ret

0000255e <TWI_stop>:

void TWI_stop(void)
{
    255e:	df 93       	push	r29
    2560:	cf 93       	push	r28
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2566:	e6 e5       	ldi	r30, 0x56	; 86
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	84 e9       	ldi	r24, 0x94	; 148
    256c:	80 83       	st	Z, r24
}
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	08 95       	ret

00002574 <TWI_write>:

void TWI_write(uint8 data)
{
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	0f 92       	push	r0
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    257e:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2580:	e3 e2       	ldi	r30, 0x23	; 35
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2588:	e6 e5       	ldi	r30, 0x56	; 86
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	84 e8       	ldi	r24, 0x84	; 132
    258e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2590:	e6 e5       	ldi	r30, 0x56	; 86
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	88 23       	and	r24, r24
    2598:	dc f7       	brge	.-10     	; 0x2590 <TWI_write+0x1c>
}
    259a:	0f 90       	pop	r0
    259c:	cf 91       	pop	r28
    259e:	df 91       	pop	r29
    25a0:	08 95       	ret

000025a2 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    25aa:	e6 e5       	ldi	r30, 0x56	; 86
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	84 ec       	ldi	r24, 0xC4	; 196
    25b0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    25b2:	e6 e5       	ldi	r30, 0x56	; 86
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	88 23       	and	r24, r24
    25ba:	dc f7       	brge	.-10     	; 0x25b2 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    25bc:	e3 e2       	ldi	r30, 0x23	; 35
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
}
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	08 95       	ret

000025c8 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    25d0:	e6 e5       	ldi	r30, 0x56	; 86
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	84 e8       	ldi	r24, 0x84	; 132
    25d6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    25d8:	e6 e5       	ldi	r30, 0x56	; 86
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	88 23       	and	r24, r24
    25e0:	dc f7       	brge	.-10     	; 0x25d8 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    25e2:	e3 e2       	ldi	r30, 0x23	; 35
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
}
    25e8:	cf 91       	pop	r28
    25ea:	df 91       	pop	r29
    25ec:	08 95       	ret

000025ee <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	0f 92       	push	r0
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    25f8:	e1 e2       	ldi	r30, 0x21	; 33
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	88 7f       	andi	r24, 0xF8	; 248
    2600:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2602:	89 81       	ldd	r24, Y+1	; 0x01
}
    2604:	0f 90       	pop	r0
    2606:	cf 91       	pop	r28
    2608:	df 91       	pop	r29
    260a:	08 95       	ret

0000260c <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	00 d0       	rcall	.+0      	; 0x2612 <KeyPad_getPressedKey+0x6>
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    2616:	1a 82       	std	Y+2, r1	; 0x02
    2618:	4c c0       	rjmp	.+152    	; 0x26b2 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    261a:	ea e3       	ldi	r30, 0x3A	; 58
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	28 2f       	mov	r18, r24
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	80 e1       	ldi	r24, 0x10	; 16
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	02 c0       	rjmp	.+4      	; 0x262e <KeyPad_getPressedKey+0x22>
    262a:	88 0f       	add	r24, r24
    262c:	99 1f       	adc	r25, r25
    262e:	2a 95       	dec	r18
    2630:	e2 f7       	brpl	.-8      	; 0x262a <KeyPad_getPressedKey+0x1e>
    2632:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    2634:	eb e3       	ldi	r30, 0x3B	; 59
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	28 2f       	mov	r18, r24
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	80 e1       	ldi	r24, 0x10	; 16
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	02 2e       	mov	r0, r18
    2644:	02 c0       	rjmp	.+4      	; 0x264a <KeyPad_getPressedKey+0x3e>
    2646:	88 0f       	add	r24, r24
    2648:	99 1f       	adc	r25, r25
    264a:	0a 94       	dec	r0
    264c:	e2 f7       	brpl	.-8      	; 0x2646 <KeyPad_getPressedKey+0x3a>
    264e:	80 95       	com	r24
    2650:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    2652:	19 82       	std	Y+1, r1	; 0x01
    2654:	28 c0       	rjmp	.+80     	; 0x26a6 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    2656:	e9 e3       	ldi	r30, 0x39	; 57
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	88 2f       	mov	r24, r24
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	a9 01       	movw	r20, r18
    2668:	02 c0       	rjmp	.+4      	; 0x266e <KeyPad_getPressedKey+0x62>
    266a:	55 95       	asr	r21
    266c:	47 95       	ror	r20
    266e:	8a 95       	dec	r24
    2670:	e2 f7       	brpl	.-8      	; 0x266a <KeyPad_getPressedKey+0x5e>
    2672:	ca 01       	movw	r24, r20
    2674:	81 70       	andi	r24, 0x01	; 1
    2676:	90 70       	andi	r25, 0x00	; 0
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	91 f4       	brne	.+36     	; 0x26a0 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	88 2f       	mov	r24, r24
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	88 0f       	add	r24, r24
    2684:	99 1f       	adc	r25, r25
    2686:	88 0f       	add	r24, r24
    2688:	99 1f       	adc	r25, r25
    268a:	98 2f       	mov	r25, r24
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	89 0f       	add	r24, r25
    2690:	8f 5f       	subi	r24, 0xFF	; 255
    2692:	0e 94 5e 13 	call	0x26bc	; 0x26bc <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	cf 91       	pop	r28
    269c:	df 91       	pop	r29
    269e:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	8f 5f       	subi	r24, 0xFF	; 255
    26a4:	89 83       	std	Y+1, r24	; 0x01
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
    26a8:	84 30       	cpi	r24, 0x04	; 4
    26aa:	a8 f2       	brcs	.-86     	; 0x2656 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	8f 5f       	subi	r24, 0xFF	; 255
    26b0:	8a 83       	std	Y+2, r24	; 0x02
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	84 30       	cpi	r24, 0x04	; 4
    26b6:	08 f4       	brcc	.+2      	; 0x26ba <KeyPad_getPressedKey+0xae>
    26b8:	b0 cf       	rjmp	.-160    	; 0x261a <KeyPad_getPressedKey+0xe>
    26ba:	ad cf       	rjmp	.-166    	; 0x2616 <KeyPad_getPressedKey+0xa>

000026bc <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <KeyPad_4x4_adjustKeyNumber+0x6>
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <KeyPad_4x4_adjustKeyNumber+0x8>
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	28 2f       	mov	r18, r24
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	3c 83       	std	Y+4, r19	; 0x04
    26d2:	2b 83       	std	Y+3, r18	; 0x03
    26d4:	8b 81       	ldd	r24, Y+3	; 0x03
    26d6:	9c 81       	ldd	r25, Y+4	; 0x04
    26d8:	88 30       	cpi	r24, 0x08	; 8
    26da:	91 05       	cpc	r25, r1
    26dc:	09 f4       	brne	.+2      	; 0x26e0 <KeyPad_4x4_adjustKeyNumber+0x24>
    26de:	70 c0       	rjmp	.+224    	; 0x27c0 <KeyPad_4x4_adjustKeyNumber+0x104>
    26e0:	2b 81       	ldd	r18, Y+3	; 0x03
    26e2:	3c 81       	ldd	r19, Y+4	; 0x04
    26e4:	29 30       	cpi	r18, 0x09	; 9
    26e6:	31 05       	cpc	r19, r1
    26e8:	5c f5       	brge	.+86     	; 0x2740 <KeyPad_4x4_adjustKeyNumber+0x84>
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	9c 81       	ldd	r25, Y+4	; 0x04
    26ee:	84 30       	cpi	r24, 0x04	; 4
    26f0:	91 05       	cpc	r25, r1
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <KeyPad_4x4_adjustKeyNumber+0x3a>
    26f4:	59 c0       	rjmp	.+178    	; 0x27a8 <KeyPad_4x4_adjustKeyNumber+0xec>
    26f6:	2b 81       	ldd	r18, Y+3	; 0x03
    26f8:	3c 81       	ldd	r19, Y+4	; 0x04
    26fa:	25 30       	cpi	r18, 0x05	; 5
    26fc:	31 05       	cpc	r19, r1
    26fe:	9c f4       	brge	.+38     	; 0x2726 <KeyPad_4x4_adjustKeyNumber+0x6a>
    2700:	8b 81       	ldd	r24, Y+3	; 0x03
    2702:	9c 81       	ldd	r25, Y+4	; 0x04
    2704:	82 30       	cpi	r24, 0x02	; 2
    2706:	91 05       	cpc	r25, r1
    2708:	09 f4       	brne	.+2      	; 0x270c <KeyPad_4x4_adjustKeyNumber+0x50>
    270a:	48 c0       	rjmp	.+144    	; 0x279c <KeyPad_4x4_adjustKeyNumber+0xe0>
    270c:	2b 81       	ldd	r18, Y+3	; 0x03
    270e:	3c 81       	ldd	r19, Y+4	; 0x04
    2710:	23 30       	cpi	r18, 0x03	; 3
    2712:	31 05       	cpc	r19, r1
    2714:	0c f0       	brlt	.+2      	; 0x2718 <KeyPad_4x4_adjustKeyNumber+0x5c>
    2716:	45 c0       	rjmp	.+138    	; 0x27a2 <KeyPad_4x4_adjustKeyNumber+0xe6>
    2718:	8b 81       	ldd	r24, Y+3	; 0x03
    271a:	9c 81       	ldd	r25, Y+4	; 0x04
    271c:	81 30       	cpi	r24, 0x01	; 1
    271e:	91 05       	cpc	r25, r1
    2720:	09 f4       	brne	.+2      	; 0x2724 <KeyPad_4x4_adjustKeyNumber+0x68>
    2722:	39 c0       	rjmp	.+114    	; 0x2796 <KeyPad_4x4_adjustKeyNumber+0xda>
    2724:	67 c0       	rjmp	.+206    	; 0x27f4 <KeyPad_4x4_adjustKeyNumber+0x138>
    2726:	2b 81       	ldd	r18, Y+3	; 0x03
    2728:	3c 81       	ldd	r19, Y+4	; 0x04
    272a:	26 30       	cpi	r18, 0x06	; 6
    272c:	31 05       	cpc	r19, r1
    272e:	09 f4       	brne	.+2      	; 0x2732 <KeyPad_4x4_adjustKeyNumber+0x76>
    2730:	41 c0       	rjmp	.+130    	; 0x27b4 <KeyPad_4x4_adjustKeyNumber+0xf8>
    2732:	8b 81       	ldd	r24, Y+3	; 0x03
    2734:	9c 81       	ldd	r25, Y+4	; 0x04
    2736:	87 30       	cpi	r24, 0x07	; 7
    2738:	91 05       	cpc	r25, r1
    273a:	0c f0       	brlt	.+2      	; 0x273e <KeyPad_4x4_adjustKeyNumber+0x82>
    273c:	3e c0       	rjmp	.+124    	; 0x27ba <KeyPad_4x4_adjustKeyNumber+0xfe>
    273e:	37 c0       	rjmp	.+110    	; 0x27ae <KeyPad_4x4_adjustKeyNumber+0xf2>
    2740:	2b 81       	ldd	r18, Y+3	; 0x03
    2742:	3c 81       	ldd	r19, Y+4	; 0x04
    2744:	2c 30       	cpi	r18, 0x0C	; 12
    2746:	31 05       	cpc	r19, r1
    2748:	09 f4       	brne	.+2      	; 0x274c <KeyPad_4x4_adjustKeyNumber+0x90>
    274a:	46 c0       	rjmp	.+140    	; 0x27d8 <KeyPad_4x4_adjustKeyNumber+0x11c>
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	9c 81       	ldd	r25, Y+4	; 0x04
    2750:	8d 30       	cpi	r24, 0x0D	; 13
    2752:	91 05       	cpc	r25, r1
    2754:	5c f4       	brge	.+22     	; 0x276c <KeyPad_4x4_adjustKeyNumber+0xb0>
    2756:	2b 81       	ldd	r18, Y+3	; 0x03
    2758:	3c 81       	ldd	r19, Y+4	; 0x04
    275a:	2a 30       	cpi	r18, 0x0A	; 10
    275c:	31 05       	cpc	r19, r1
    275e:	b1 f1       	breq	.+108    	; 0x27cc <KeyPad_4x4_adjustKeyNumber+0x110>
    2760:	8b 81       	ldd	r24, Y+3	; 0x03
    2762:	9c 81       	ldd	r25, Y+4	; 0x04
    2764:	8b 30       	cpi	r24, 0x0B	; 11
    2766:	91 05       	cpc	r25, r1
    2768:	a4 f5       	brge	.+104    	; 0x27d2 <KeyPad_4x4_adjustKeyNumber+0x116>
    276a:	2d c0       	rjmp	.+90     	; 0x27c6 <KeyPad_4x4_adjustKeyNumber+0x10a>
    276c:	2b 81       	ldd	r18, Y+3	; 0x03
    276e:	3c 81       	ldd	r19, Y+4	; 0x04
    2770:	2e 30       	cpi	r18, 0x0E	; 14
    2772:	31 05       	cpc	r19, r1
    2774:	b9 f1       	breq	.+110    	; 0x27e4 <KeyPad_4x4_adjustKeyNumber+0x128>
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	9c 81       	ldd	r25, Y+4	; 0x04
    277a:	8e 30       	cpi	r24, 0x0E	; 14
    277c:	91 05       	cpc	r25, r1
    277e:	7c f1       	brlt	.+94     	; 0x27de <KeyPad_4x4_adjustKeyNumber+0x122>
    2780:	2b 81       	ldd	r18, Y+3	; 0x03
    2782:	3c 81       	ldd	r19, Y+4	; 0x04
    2784:	2f 30       	cpi	r18, 0x0F	; 15
    2786:	31 05       	cpc	r19, r1
    2788:	79 f1       	breq	.+94     	; 0x27e8 <KeyPad_4x4_adjustKeyNumber+0x12c>
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	9c 81       	ldd	r25, Y+4	; 0x04
    278e:	80 31       	cpi	r24, 0x10	; 16
    2790:	91 05       	cpc	r25, r1
    2792:	69 f1       	breq	.+90     	; 0x27ee <KeyPad_4x4_adjustKeyNumber+0x132>
    2794:	2f c0       	rjmp	.+94     	; 0x27f4 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    2796:	97 e0       	ldi	r25, 0x07	; 7
    2798:	9a 83       	std	Y+2, r25	; 0x02
    279a:	2e c0       	rjmp	.+92     	; 0x27f8 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    279c:	28 e0       	ldi	r18, 0x08	; 8
    279e:	2a 83       	std	Y+2, r18	; 0x02
    27a0:	2b c0       	rjmp	.+86     	; 0x27f8 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    27a2:	39 e0       	ldi	r19, 0x09	; 9
    27a4:	3a 83       	std	Y+2, r19	; 0x02
    27a6:	28 c0       	rjmp	.+80     	; 0x27f8 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    27a8:	85 e2       	ldi	r24, 0x25	; 37
    27aa:	8a 83       	std	Y+2, r24	; 0x02
    27ac:	25 c0       	rjmp	.+74     	; 0x27f8 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    27ae:	94 e0       	ldi	r25, 0x04	; 4
    27b0:	9a 83       	std	Y+2, r25	; 0x02
    27b2:	22 c0       	rjmp	.+68     	; 0x27f8 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    27b4:	25 e0       	ldi	r18, 0x05	; 5
    27b6:	2a 83       	std	Y+2, r18	; 0x02
    27b8:	1f c0       	rjmp	.+62     	; 0x27f8 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    27ba:	36 e0       	ldi	r19, 0x06	; 6
    27bc:	3a 83       	std	Y+2, r19	; 0x02
    27be:	1c c0       	rjmp	.+56     	; 0x27f8 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    27c0:	8a e2       	ldi	r24, 0x2A	; 42
    27c2:	8a 83       	std	Y+2, r24	; 0x02
    27c4:	19 c0       	rjmp	.+50     	; 0x27f8 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    27c6:	91 e0       	ldi	r25, 0x01	; 1
    27c8:	9a 83       	std	Y+2, r25	; 0x02
    27ca:	16 c0       	rjmp	.+44     	; 0x27f8 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    27cc:	22 e0       	ldi	r18, 0x02	; 2
    27ce:	2a 83       	std	Y+2, r18	; 0x02
    27d0:	13 c0       	rjmp	.+38     	; 0x27f8 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    27d2:	33 e0       	ldi	r19, 0x03	; 3
    27d4:	3a 83       	std	Y+2, r19	; 0x02
    27d6:	10 c0       	rjmp	.+32     	; 0x27f8 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    27d8:	8d e2       	ldi	r24, 0x2D	; 45
    27da:	8a 83       	std	Y+2, r24	; 0x02
    27dc:	0d c0       	rjmp	.+26     	; 0x27f8 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    27de:	9d e0       	ldi	r25, 0x0D	; 13
    27e0:	9a 83       	std	Y+2, r25	; 0x02
    27e2:	0a c0       	rjmp	.+20     	; 0x27f8 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    27e4:	1a 82       	std	Y+2, r1	; 0x02
    27e6:	08 c0       	rjmp	.+16     	; 0x27f8 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    27e8:	2d e3       	ldi	r18, 0x3D	; 61
    27ea:	2a 83       	std	Y+2, r18	; 0x02
    27ec:	05 c0       	rjmp	.+10     	; 0x27f8 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    27ee:	3b e2       	ldi	r19, 0x2B	; 43
    27f0:	3a 83       	std	Y+2, r19	; 0x02
    27f2:	02 c0       	rjmp	.+4      	; 0x27f8 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	8a 83       	std	Y+2, r24	; 0x02
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	cf 91       	pop	r28
    2804:	df 91       	pop	r29
    2806:	08 95       	ret

00002808 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    2810:	e4 e3       	ldi	r30, 0x34	; 52
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	8f ef       	ldi	r24, 0xFF	; 255
    2816:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    2818:	a1 e3       	ldi	r26, 0x31	; 49
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	e1 e3       	ldi	r30, 0x31	; 49
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	80 67       	ori	r24, 0x70	; 112
    2824:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2826:	88 e3       	ldi	r24, 0x38	; 56
    2828:	0e 94 1f 14 	call	0x283e	; 0x283e <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    282c:	8c e0       	ldi	r24, 0x0C	; 12
    282e:	0e 94 1f 14 	call	0x283e	; 0x283e <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	0e 94 1f 14 	call	0x283e	; 0x283e <LCD_sendCommand>
}
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret

0000283e <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    283e:	df 93       	push	r29
    2840:	cf 93       	push	r28
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	e9 97       	sbiw	r28, 0x39	; 57
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    2854:	a2 e3       	ldi	r26, 0x32	; 50
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	e2 e3       	ldi	r30, 0x32	; 50
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	80 81       	ld	r24, Z
    285e:	8f 7e       	andi	r24, 0xEF	; 239
    2860:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2862:	a2 e3       	ldi	r26, 0x32	; 50
    2864:	b0 e0       	ldi	r27, 0x00	; 0
    2866:	e2 e3       	ldi	r30, 0x32	; 50
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	8f 7d       	andi	r24, 0xDF	; 223
    286e:	8c 93       	st	X, r24
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	a0 e8       	ldi	r26, 0x80	; 128
    2876:	bf e3       	ldi	r27, 0x3F	; 63
    2878:	8d ab       	std	Y+53, r24	; 0x35
    287a:	9e ab       	std	Y+54, r25	; 0x36
    287c:	af ab       	std	Y+55, r26	; 0x37
    287e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2880:	6d a9       	ldd	r22, Y+53	; 0x35
    2882:	7e a9       	ldd	r23, Y+54	; 0x36
    2884:	8f a9       	ldd	r24, Y+55	; 0x37
    2886:	98 ad       	ldd	r25, Y+56	; 0x38
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	4a e7       	ldi	r20, 0x7A	; 122
    288e:	53 e4       	ldi	r21, 0x43	; 67
    2890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	89 ab       	std	Y+49, r24	; 0x31
    289a:	9a ab       	std	Y+50, r25	; 0x32
    289c:	ab ab       	std	Y+51, r26	; 0x33
    289e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28a0:	69 a9       	ldd	r22, Y+49	; 0x31
    28a2:	7a a9       	ldd	r23, Y+50	; 0x32
    28a4:	8b a9       	ldd	r24, Y+51	; 0x33
    28a6:	9c a9       	ldd	r25, Y+52	; 0x34
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	40 e8       	ldi	r20, 0x80	; 128
    28ae:	5f e3       	ldi	r21, 0x3F	; 63
    28b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28b4:	88 23       	and	r24, r24
    28b6:	2c f4       	brge	.+10     	; 0x28c2 <LCD_sendCommand+0x84>
		__ticks = 1;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	98 ab       	std	Y+48, r25	; 0x30
    28be:	8f a7       	std	Y+47, r24	; 0x2f
    28c0:	3f c0       	rjmp	.+126    	; 0x2940 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    28c2:	69 a9       	ldd	r22, Y+49	; 0x31
    28c4:	7a a9       	ldd	r23, Y+50	; 0x32
    28c6:	8b a9       	ldd	r24, Y+51	; 0x33
    28c8:	9c a9       	ldd	r25, Y+52	; 0x34
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	3f ef       	ldi	r19, 0xFF	; 255
    28ce:	4f e7       	ldi	r20, 0x7F	; 127
    28d0:	57 e4       	ldi	r21, 0x47	; 71
    28d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28d6:	18 16       	cp	r1, r24
    28d8:	4c f5       	brge	.+82     	; 0x292c <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28da:	6d a9       	ldd	r22, Y+53	; 0x35
    28dc:	7e a9       	ldd	r23, Y+54	; 0x36
    28de:	8f a9       	ldd	r24, Y+55	; 0x37
    28e0:	98 ad       	ldd	r25, Y+56	; 0x38
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e2       	ldi	r20, 0x20	; 32
    28e8:	51 e4       	ldi	r21, 0x41	; 65
    28ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	bc 01       	movw	r22, r24
    28f4:	cd 01       	movw	r24, r26
    28f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	98 ab       	std	Y+48, r25	; 0x30
    2900:	8f a7       	std	Y+47, r24	; 0x2f
    2902:	0f c0       	rjmp	.+30     	; 0x2922 <LCD_sendCommand+0xe4>
    2904:	89 e1       	ldi	r24, 0x19	; 25
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	9e a7       	std	Y+46, r25	; 0x2e
    290a:	8d a7       	std	Y+45, r24	; 0x2d
    290c:	8d a5       	ldd	r24, Y+45	; 0x2d
    290e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <LCD_sendCommand+0xd2>
    2914:	9e a7       	std	Y+46, r25	; 0x2e
    2916:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2918:	8f a5       	ldd	r24, Y+47	; 0x2f
    291a:	98 a9       	ldd	r25, Y+48	; 0x30
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	98 ab       	std	Y+48, r25	; 0x30
    2920:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2922:	8f a5       	ldd	r24, Y+47	; 0x2f
    2924:	98 a9       	ldd	r25, Y+48	; 0x30
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	69 f7       	brne	.-38     	; 0x2904 <LCD_sendCommand+0xc6>
    292a:	14 c0       	rjmp	.+40     	; 0x2954 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    292c:	69 a9       	ldd	r22, Y+49	; 0x31
    292e:	7a a9       	ldd	r23, Y+50	; 0x32
    2930:	8b a9       	ldd	r24, Y+51	; 0x33
    2932:	9c a9       	ldd	r25, Y+52	; 0x34
    2934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	98 ab       	std	Y+48, r25	; 0x30
    293e:	8f a7       	std	Y+47, r24	; 0x2f
    2940:	8f a5       	ldd	r24, Y+47	; 0x2f
    2942:	98 a9       	ldd	r25, Y+48	; 0x30
    2944:	9c a7       	std	Y+44, r25	; 0x2c
    2946:	8b a7       	std	Y+43, r24	; 0x2b
    2948:	8b a5       	ldd	r24, Y+43	; 0x2b
    294a:	9c a5       	ldd	r25, Y+44	; 0x2c
    294c:	01 97       	sbiw	r24, 0x01	; 1
    294e:	f1 f7       	brne	.-4      	; 0x294c <LCD_sendCommand+0x10e>
    2950:	9c a7       	std	Y+44, r25	; 0x2c
    2952:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2954:	a2 e3       	ldi	r26, 0x32	; 50
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	e2 e3       	ldi	r30, 0x32	; 50
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	80 64       	ori	r24, 0x40	; 64
    2960:	8c 93       	st	X, r24
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	a0 e8       	ldi	r26, 0x80	; 128
    2968:	bf e3       	ldi	r27, 0x3F	; 63
    296a:	8f a3       	std	Y+39, r24	; 0x27
    296c:	98 a7       	std	Y+40, r25	; 0x28
    296e:	a9 a7       	std	Y+41, r26	; 0x29
    2970:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2972:	6f a1       	ldd	r22, Y+39	; 0x27
    2974:	78 a5       	ldd	r23, Y+40	; 0x28
    2976:	89 a5       	ldd	r24, Y+41	; 0x29
    2978:	9a a5       	ldd	r25, Y+42	; 0x2a
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	4a e7       	ldi	r20, 0x7A	; 122
    2980:	53 e4       	ldi	r21, 0x43	; 67
    2982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	8b a3       	std	Y+35, r24	; 0x23
    298c:	9c a3       	std	Y+36, r25	; 0x24
    298e:	ad a3       	std	Y+37, r26	; 0x25
    2990:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2992:	6b a1       	ldd	r22, Y+35	; 0x23
    2994:	7c a1       	ldd	r23, Y+36	; 0x24
    2996:	8d a1       	ldd	r24, Y+37	; 0x25
    2998:	9e a1       	ldd	r25, Y+38	; 0x26
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	40 e8       	ldi	r20, 0x80	; 128
    29a0:	5f e3       	ldi	r21, 0x3F	; 63
    29a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a6:	88 23       	and	r24, r24
    29a8:	2c f4       	brge	.+10     	; 0x29b4 <LCD_sendCommand+0x176>
		__ticks = 1;
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	9a a3       	std	Y+34, r25	; 0x22
    29b0:	89 a3       	std	Y+33, r24	; 0x21
    29b2:	3f c0       	rjmp	.+126    	; 0x2a32 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    29b4:	6b a1       	ldd	r22, Y+35	; 0x23
    29b6:	7c a1       	ldd	r23, Y+36	; 0x24
    29b8:	8d a1       	ldd	r24, Y+37	; 0x25
    29ba:	9e a1       	ldd	r25, Y+38	; 0x26
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	3f ef       	ldi	r19, 0xFF	; 255
    29c0:	4f e7       	ldi	r20, 0x7F	; 127
    29c2:	57 e4       	ldi	r21, 0x47	; 71
    29c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29c8:	18 16       	cp	r1, r24
    29ca:	4c f5       	brge	.+82     	; 0x2a1e <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29cc:	6f a1       	ldd	r22, Y+39	; 0x27
    29ce:	78 a5       	ldd	r23, Y+40	; 0x28
    29d0:	89 a5       	ldd	r24, Y+41	; 0x29
    29d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e2       	ldi	r20, 0x20	; 32
    29da:	51 e4       	ldi	r21, 0x41	; 65
    29dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	bc 01       	movw	r22, r24
    29e6:	cd 01       	movw	r24, r26
    29e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	9a a3       	std	Y+34, r25	; 0x22
    29f2:	89 a3       	std	Y+33, r24	; 0x21
    29f4:	0f c0       	rjmp	.+30     	; 0x2a14 <LCD_sendCommand+0x1d6>
    29f6:	89 e1       	ldi	r24, 0x19	; 25
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	98 a3       	std	Y+32, r25	; 0x20
    29fc:	8f 8f       	std	Y+31, r24	; 0x1f
    29fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a00:	98 a1       	ldd	r25, Y+32	; 0x20
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	f1 f7       	brne	.-4      	; 0x2a02 <LCD_sendCommand+0x1c4>
    2a06:	98 a3       	std	Y+32, r25	; 0x20
    2a08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a0c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	9a a3       	std	Y+34, r25	; 0x22
    2a12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a14:	89 a1       	ldd	r24, Y+33	; 0x21
    2a16:	9a a1       	ldd	r25, Y+34	; 0x22
    2a18:	00 97       	sbiw	r24, 0x00	; 0
    2a1a:	69 f7       	brne	.-38     	; 0x29f6 <LCD_sendCommand+0x1b8>
    2a1c:	14 c0       	rjmp	.+40     	; 0x2a46 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a20:	7c a1       	ldd	r23, Y+36	; 0x24
    2a22:	8d a1       	ldd	r24, Y+37	; 0x25
    2a24:	9e a1       	ldd	r25, Y+38	; 0x26
    2a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	9a a3       	std	Y+34, r25	; 0x22
    2a30:	89 a3       	std	Y+33, r24	; 0x21
    2a32:	89 a1       	ldd	r24, Y+33	; 0x21
    2a34:	9a a1       	ldd	r25, Y+34	; 0x22
    2a36:	9e 8f       	std	Y+30, r25	; 0x1e
    2a38:	8d 8f       	std	Y+29, r24	; 0x1d
    2a3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	f1 f7       	brne	.-4      	; 0x2a3e <LCD_sendCommand+0x200>
    2a42:	9e 8f       	std	Y+30, r25	; 0x1e
    2a44:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    2a46:	e5 e3       	ldi	r30, 0x35	; 53
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	89 ad       	ldd	r24, Y+57	; 0x39
    2a4c:	80 83       	st	Z, r24
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	a0 e8       	ldi	r26, 0x80	; 128
    2a54:	bf e3       	ldi	r27, 0x3F	; 63
    2a56:	89 8f       	std	Y+25, r24	; 0x19
    2a58:	9a 8f       	std	Y+26, r25	; 0x1a
    2a5a:	ab 8f       	std	Y+27, r26	; 0x1b
    2a5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	4a e7       	ldi	r20, 0x7A	; 122
    2a6c:	53 e4       	ldi	r21, 0x43	; 67
    2a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	8d 8b       	std	Y+21, r24	; 0x15
    2a78:	9e 8b       	std	Y+22, r25	; 0x16
    2a7a:	af 8b       	std	Y+23, r26	; 0x17
    2a7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a80:	7e 89       	ldd	r23, Y+22	; 0x16
    2a82:	8f 89       	ldd	r24, Y+23	; 0x17
    2a84:	98 8d       	ldd	r25, Y+24	; 0x18
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	40 e8       	ldi	r20, 0x80	; 128
    2a8c:	5f e3       	ldi	r21, 0x3F	; 63
    2a8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a92:	88 23       	and	r24, r24
    2a94:	2c f4       	brge	.+10     	; 0x2aa0 <LCD_sendCommand+0x262>
		__ticks = 1;
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	9c 8b       	std	Y+20, r25	; 0x14
    2a9c:	8b 8b       	std	Y+19, r24	; 0x13
    2a9e:	3f c0       	rjmp	.+126    	; 0x2b1e <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    2aa0:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa2:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa4:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa6:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	3f ef       	ldi	r19, 0xFF	; 255
    2aac:	4f e7       	ldi	r20, 0x7F	; 127
    2aae:	57 e4       	ldi	r21, 0x47	; 71
    2ab0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ab4:	18 16       	cp	r1, r24
    2ab6:	4c f5       	brge	.+82     	; 0x2b0a <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab8:	69 8d       	ldd	r22, Y+25	; 0x19
    2aba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2abc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2abe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	40 e2       	ldi	r20, 0x20	; 32
    2ac6:	51 e4       	ldi	r21, 0x41	; 65
    2ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	bc 01       	movw	r22, r24
    2ad2:	cd 01       	movw	r24, r26
    2ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	9c 8b       	std	Y+20, r25	; 0x14
    2ade:	8b 8b       	std	Y+19, r24	; 0x13
    2ae0:	0f c0       	rjmp	.+30     	; 0x2b00 <LCD_sendCommand+0x2c2>
    2ae2:	89 e1       	ldi	r24, 0x19	; 25
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	9a 8b       	std	Y+18, r25	; 0x12
    2ae8:	89 8b       	std	Y+17, r24	; 0x11
    2aea:	89 89       	ldd	r24, Y+17	; 0x11
    2aec:	9a 89       	ldd	r25, Y+18	; 0x12
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	f1 f7       	brne	.-4      	; 0x2aee <LCD_sendCommand+0x2b0>
    2af2:	9a 8b       	std	Y+18, r25	; 0x12
    2af4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af6:	8b 89       	ldd	r24, Y+19	; 0x13
    2af8:	9c 89       	ldd	r25, Y+20	; 0x14
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	9c 8b       	std	Y+20, r25	; 0x14
    2afe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b00:	8b 89       	ldd	r24, Y+19	; 0x13
    2b02:	9c 89       	ldd	r25, Y+20	; 0x14
    2b04:	00 97       	sbiw	r24, 0x00	; 0
    2b06:	69 f7       	brne	.-38     	; 0x2ae2 <LCD_sendCommand+0x2a4>
    2b08:	14 c0       	rjmp	.+40     	; 0x2b32 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b10:	98 8d       	ldd	r25, Y+24	; 0x18
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9c 8b       	std	Y+20, r25	; 0x14
    2b1c:	8b 8b       	std	Y+19, r24	; 0x13
    2b1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b20:	9c 89       	ldd	r25, Y+20	; 0x14
    2b22:	98 8b       	std	Y+16, r25	; 0x10
    2b24:	8f 87       	std	Y+15, r24	; 0x0f
    2b26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b28:	98 89       	ldd	r25, Y+16	; 0x10
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	f1 f7       	brne	.-4      	; 0x2b2a <LCD_sendCommand+0x2ec>
    2b2e:	98 8b       	std	Y+16, r25	; 0x10
    2b30:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2b32:	a2 e3       	ldi	r26, 0x32	; 50
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	e2 e3       	ldi	r30, 0x32	; 50
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	8f 7b       	andi	r24, 0xBF	; 191
    2b3e:	8c 93       	st	X, r24
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	a0 e8       	ldi	r26, 0x80	; 128
    2b46:	bf e3       	ldi	r27, 0x3F	; 63
    2b48:	8b 87       	std	Y+11, r24	; 0x0b
    2b4a:	9c 87       	std	Y+12, r25	; 0x0c
    2b4c:	ad 87       	std	Y+13, r26	; 0x0d
    2b4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b50:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b52:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	4a e7       	ldi	r20, 0x7A	; 122
    2b5e:	53 e4       	ldi	r21, 0x43	; 67
    2b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	8f 83       	std	Y+7, r24	; 0x07
    2b6a:	98 87       	std	Y+8, r25	; 0x08
    2b6c:	a9 87       	std	Y+9, r26	; 0x09
    2b6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b70:	6f 81       	ldd	r22, Y+7	; 0x07
    2b72:	78 85       	ldd	r23, Y+8	; 0x08
    2b74:	89 85       	ldd	r24, Y+9	; 0x09
    2b76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e8       	ldi	r20, 0x80	; 128
    2b7e:	5f e3       	ldi	r21, 0x3F	; 63
    2b80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b84:	88 23       	and	r24, r24
    2b86:	2c f4       	brge	.+10     	; 0x2b92 <LCD_sendCommand+0x354>
		__ticks = 1;
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	9e 83       	std	Y+6, r25	; 0x06
    2b8e:	8d 83       	std	Y+5, r24	; 0x05
    2b90:	3f c0       	rjmp	.+126    	; 0x2c10 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    2b92:	6f 81       	ldd	r22, Y+7	; 0x07
    2b94:	78 85       	ldd	r23, Y+8	; 0x08
    2b96:	89 85       	ldd	r24, Y+9	; 0x09
    2b98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	3f ef       	ldi	r19, 0xFF	; 255
    2b9e:	4f e7       	ldi	r20, 0x7F	; 127
    2ba0:	57 e4       	ldi	r21, 0x47	; 71
    2ba2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ba6:	18 16       	cp	r1, r24
    2ba8:	4c f5       	brge	.+82     	; 0x2bfc <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2baa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e2       	ldi	r20, 0x20	; 32
    2bb8:	51 e4       	ldi	r21, 0x41	; 65
    2bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	bc 01       	movw	r22, r24
    2bc4:	cd 01       	movw	r24, r26
    2bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	9e 83       	std	Y+6, r25	; 0x06
    2bd0:	8d 83       	std	Y+5, r24	; 0x05
    2bd2:	0f c0       	rjmp	.+30     	; 0x2bf2 <LCD_sendCommand+0x3b4>
    2bd4:	89 e1       	ldi	r24, 0x19	; 25
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	9c 83       	std	Y+4, r25	; 0x04
    2bda:	8b 83       	std	Y+3, r24	; 0x03
    2bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bde:	9c 81       	ldd	r25, Y+4	; 0x04
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <LCD_sendCommand+0x3a2>
    2be4:	9c 83       	std	Y+4, r25	; 0x04
    2be6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bea:	9e 81       	ldd	r25, Y+6	; 0x06
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	9e 83       	std	Y+6, r25	; 0x06
    2bf0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf6:	00 97       	sbiw	r24, 0x00	; 0
    2bf8:	69 f7       	brne	.-38     	; 0x2bd4 <LCD_sendCommand+0x396>
    2bfa:	14 c0       	rjmp	.+40     	; 0x2c24 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bfe:	78 85       	ldd	r23, Y+8	; 0x08
    2c00:	89 85       	ldd	r24, Y+9	; 0x09
    2c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	9e 83       	std	Y+6, r25	; 0x06
    2c0e:	8d 83       	std	Y+5, r24	; 0x05
    2c10:	8d 81       	ldd	r24, Y+5	; 0x05
    2c12:	9e 81       	ldd	r25, Y+6	; 0x06
    2c14:	9a 83       	std	Y+2, r25	; 0x02
    2c16:	89 83       	std	Y+1, r24	; 0x01
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	f1 f7       	brne	.-4      	; 0x2c1c <LCD_sendCommand+0x3de>
    2c20:	9a 83       	std	Y+2, r25	; 0x02
    2c22:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2c24:	e9 96       	adiw	r28, 0x39	; 57
    2c26:	0f b6       	in	r0, 0x3f	; 63
    2c28:	f8 94       	cli
    2c2a:	de bf       	out	0x3e, r29	; 62
    2c2c:	0f be       	out	0x3f, r0	; 63
    2c2e:	cd bf       	out	0x3d, r28	; 61
    2c30:	cf 91       	pop	r28
    2c32:	df 91       	pop	r29
    2c34:	08 95       	ret

00002c36 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	e9 97       	sbiw	r28, 0x39	; 57
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    2c4c:	a2 e3       	ldi	r26, 0x32	; 50
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	e2 e3       	ldi	r30, 0x32	; 50
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	80 61       	ori	r24, 0x10	; 16
    2c58:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2c5a:	a2 e3       	ldi	r26, 0x32	; 50
    2c5c:	b0 e0       	ldi	r27, 0x00	; 0
    2c5e:	e2 e3       	ldi	r30, 0x32	; 50
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	80 81       	ld	r24, Z
    2c64:	8f 7d       	andi	r24, 0xDF	; 223
    2c66:	8c 93       	st	X, r24
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	a0 e8       	ldi	r26, 0x80	; 128
    2c6e:	bf e3       	ldi	r27, 0x3F	; 63
    2c70:	8d ab       	std	Y+53, r24	; 0x35
    2c72:	9e ab       	std	Y+54, r25	; 0x36
    2c74:	af ab       	std	Y+55, r26	; 0x37
    2c76:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c78:	6d a9       	ldd	r22, Y+53	; 0x35
    2c7a:	7e a9       	ldd	r23, Y+54	; 0x36
    2c7c:	8f a9       	ldd	r24, Y+55	; 0x37
    2c7e:	98 ad       	ldd	r25, Y+56	; 0x38
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	4a e7       	ldi	r20, 0x7A	; 122
    2c86:	53 e4       	ldi	r21, 0x43	; 67
    2c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	89 ab       	std	Y+49, r24	; 0x31
    2c92:	9a ab       	std	Y+50, r25	; 0x32
    2c94:	ab ab       	std	Y+51, r26	; 0x33
    2c96:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c98:	69 a9       	ldd	r22, Y+49	; 0x31
    2c9a:	7a a9       	ldd	r23, Y+50	; 0x32
    2c9c:	8b a9       	ldd	r24, Y+51	; 0x33
    2c9e:	9c a9       	ldd	r25, Y+52	; 0x34
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e8       	ldi	r20, 0x80	; 128
    2ca6:	5f e3       	ldi	r21, 0x3F	; 63
    2ca8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cac:	88 23       	and	r24, r24
    2cae:	2c f4       	brge	.+10     	; 0x2cba <LCD_displayCharacter+0x84>
		__ticks = 1;
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	98 ab       	std	Y+48, r25	; 0x30
    2cb6:	8f a7       	std	Y+47, r24	; 0x2f
    2cb8:	3f c0       	rjmp	.+126    	; 0x2d38 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    2cba:	69 a9       	ldd	r22, Y+49	; 0x31
    2cbc:	7a a9       	ldd	r23, Y+50	; 0x32
    2cbe:	8b a9       	ldd	r24, Y+51	; 0x33
    2cc0:	9c a9       	ldd	r25, Y+52	; 0x34
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	3f ef       	ldi	r19, 0xFF	; 255
    2cc6:	4f e7       	ldi	r20, 0x7F	; 127
    2cc8:	57 e4       	ldi	r21, 0x47	; 71
    2cca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cce:	18 16       	cp	r1, r24
    2cd0:	4c f5       	brge	.+82     	; 0x2d24 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd2:	6d a9       	ldd	r22, Y+53	; 0x35
    2cd4:	7e a9       	ldd	r23, Y+54	; 0x36
    2cd6:	8f a9       	ldd	r24, Y+55	; 0x37
    2cd8:	98 ad       	ldd	r25, Y+56	; 0x38
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	40 e2       	ldi	r20, 0x20	; 32
    2ce0:	51 e4       	ldi	r21, 0x41	; 65
    2ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	bc 01       	movw	r22, r24
    2cec:	cd 01       	movw	r24, r26
    2cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	98 ab       	std	Y+48, r25	; 0x30
    2cf8:	8f a7       	std	Y+47, r24	; 0x2f
    2cfa:	0f c0       	rjmp	.+30     	; 0x2d1a <LCD_displayCharacter+0xe4>
    2cfc:	89 e1       	ldi	r24, 0x19	; 25
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	9e a7       	std	Y+46, r25	; 0x2e
    2d02:	8d a7       	std	Y+45, r24	; 0x2d
    2d04:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d06:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d08:	01 97       	sbiw	r24, 0x01	; 1
    2d0a:	f1 f7       	brne	.-4      	; 0x2d08 <LCD_displayCharacter+0xd2>
    2d0c:	9e a7       	std	Y+46, r25	; 0x2e
    2d0e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d10:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d12:	98 a9       	ldd	r25, Y+48	; 0x30
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	98 ab       	std	Y+48, r25	; 0x30
    2d18:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d1c:	98 a9       	ldd	r25, Y+48	; 0x30
    2d1e:	00 97       	sbiw	r24, 0x00	; 0
    2d20:	69 f7       	brne	.-38     	; 0x2cfc <LCD_displayCharacter+0xc6>
    2d22:	14 c0       	rjmp	.+40     	; 0x2d4c <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d24:	69 a9       	ldd	r22, Y+49	; 0x31
    2d26:	7a a9       	ldd	r23, Y+50	; 0x32
    2d28:	8b a9       	ldd	r24, Y+51	; 0x33
    2d2a:	9c a9       	ldd	r25, Y+52	; 0x34
    2d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	98 ab       	std	Y+48, r25	; 0x30
    2d36:	8f a7       	std	Y+47, r24	; 0x2f
    2d38:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d3a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d3c:	9c a7       	std	Y+44, r25	; 0x2c
    2d3e:	8b a7       	std	Y+43, r24	; 0x2b
    2d40:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d42:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d44:	01 97       	sbiw	r24, 0x01	; 1
    2d46:	f1 f7       	brne	.-4      	; 0x2d44 <LCD_displayCharacter+0x10e>
    2d48:	9c a7       	std	Y+44, r25	; 0x2c
    2d4a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2d4c:	a2 e3       	ldi	r26, 0x32	; 50
    2d4e:	b0 e0       	ldi	r27, 0x00	; 0
    2d50:	e2 e3       	ldi	r30, 0x32	; 50
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	80 64       	ori	r24, 0x40	; 64
    2d58:	8c 93       	st	X, r24
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	a0 e8       	ldi	r26, 0x80	; 128
    2d60:	bf e3       	ldi	r27, 0x3F	; 63
    2d62:	8f a3       	std	Y+39, r24	; 0x27
    2d64:	98 a7       	std	Y+40, r25	; 0x28
    2d66:	a9 a7       	std	Y+41, r26	; 0x29
    2d68:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6a:	6f a1       	ldd	r22, Y+39	; 0x27
    2d6c:	78 a5       	ldd	r23, Y+40	; 0x28
    2d6e:	89 a5       	ldd	r24, Y+41	; 0x29
    2d70:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	4a e7       	ldi	r20, 0x7A	; 122
    2d78:	53 e4       	ldi	r21, 0x43	; 67
    2d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	8b a3       	std	Y+35, r24	; 0x23
    2d84:	9c a3       	std	Y+36, r25	; 0x24
    2d86:	ad a3       	std	Y+37, r26	; 0x25
    2d88:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d8a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d8c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d8e:	8d a1       	ldd	r24, Y+37	; 0x25
    2d90:	9e a1       	ldd	r25, Y+38	; 0x26
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	40 e8       	ldi	r20, 0x80	; 128
    2d98:	5f e3       	ldi	r21, 0x3F	; 63
    2d9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d9e:	88 23       	and	r24, r24
    2da0:	2c f4       	brge	.+10     	; 0x2dac <LCD_displayCharacter+0x176>
		__ticks = 1;
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	9a a3       	std	Y+34, r25	; 0x22
    2da8:	89 a3       	std	Y+33, r24	; 0x21
    2daa:	3f c0       	rjmp	.+126    	; 0x2e2a <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    2dac:	6b a1       	ldd	r22, Y+35	; 0x23
    2dae:	7c a1       	ldd	r23, Y+36	; 0x24
    2db0:	8d a1       	ldd	r24, Y+37	; 0x25
    2db2:	9e a1       	ldd	r25, Y+38	; 0x26
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	3f ef       	ldi	r19, 0xFF	; 255
    2db8:	4f e7       	ldi	r20, 0x7F	; 127
    2dba:	57 e4       	ldi	r21, 0x47	; 71
    2dbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dc0:	18 16       	cp	r1, r24
    2dc2:	4c f5       	brge	.+82     	; 0x2e16 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc4:	6f a1       	ldd	r22, Y+39	; 0x27
    2dc6:	78 a5       	ldd	r23, Y+40	; 0x28
    2dc8:	89 a5       	ldd	r24, Y+41	; 0x29
    2dca:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	40 e2       	ldi	r20, 0x20	; 32
    2dd2:	51 e4       	ldi	r21, 0x41	; 65
    2dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	bc 01       	movw	r22, r24
    2dde:	cd 01       	movw	r24, r26
    2de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	9a a3       	std	Y+34, r25	; 0x22
    2dea:	89 a3       	std	Y+33, r24	; 0x21
    2dec:	0f c0       	rjmp	.+30     	; 0x2e0c <LCD_displayCharacter+0x1d6>
    2dee:	89 e1       	ldi	r24, 0x19	; 25
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	98 a3       	std	Y+32, r25	; 0x20
    2df4:	8f 8f       	std	Y+31, r24	; 0x1f
    2df6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2df8:	98 a1       	ldd	r25, Y+32	; 0x20
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	f1 f7       	brne	.-4      	; 0x2dfa <LCD_displayCharacter+0x1c4>
    2dfe:	98 a3       	std	Y+32, r25	; 0x20
    2e00:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e02:	89 a1       	ldd	r24, Y+33	; 0x21
    2e04:	9a a1       	ldd	r25, Y+34	; 0x22
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	9a a3       	std	Y+34, r25	; 0x22
    2e0a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0c:	89 a1       	ldd	r24, Y+33	; 0x21
    2e0e:	9a a1       	ldd	r25, Y+34	; 0x22
    2e10:	00 97       	sbiw	r24, 0x00	; 0
    2e12:	69 f7       	brne	.-38     	; 0x2dee <LCD_displayCharacter+0x1b8>
    2e14:	14 c0       	rjmp	.+40     	; 0x2e3e <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e16:	6b a1       	ldd	r22, Y+35	; 0x23
    2e18:	7c a1       	ldd	r23, Y+36	; 0x24
    2e1a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e1c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	9a a3       	std	Y+34, r25	; 0x22
    2e28:	89 a3       	std	Y+33, r24	; 0x21
    2e2a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e2c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e2e:	9e 8f       	std	Y+30, r25	; 0x1e
    2e30:	8d 8f       	std	Y+29, r24	; 0x1d
    2e32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e34:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	f1 f7       	brne	.-4      	; 0x2e36 <LCD_displayCharacter+0x200>
    2e3a:	9e 8f       	std	Y+30, r25	; 0x1e
    2e3c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    2e3e:	e5 e3       	ldi	r30, 0x35	; 53
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	89 ad       	ldd	r24, Y+57	; 0x39
    2e44:	80 83       	st	Z, r24
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	a0 e8       	ldi	r26, 0x80	; 128
    2e4c:	bf e3       	ldi	r27, 0x3F	; 63
    2e4e:	89 8f       	std	Y+25, r24	; 0x19
    2e50:	9a 8f       	std	Y+26, r25	; 0x1a
    2e52:	ab 8f       	std	Y+27, r26	; 0x1b
    2e54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e56:	69 8d       	ldd	r22, Y+25	; 0x19
    2e58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	4a e7       	ldi	r20, 0x7A	; 122
    2e64:	53 e4       	ldi	r21, 0x43	; 67
    2e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	8d 8b       	std	Y+21, r24	; 0x15
    2e70:	9e 8b       	std	Y+22, r25	; 0x16
    2e72:	af 8b       	std	Y+23, r26	; 0x17
    2e74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e76:	6d 89       	ldd	r22, Y+21	; 0x15
    2e78:	7e 89       	ldd	r23, Y+22	; 0x16
    2e7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e8       	ldi	r20, 0x80	; 128
    2e84:	5f e3       	ldi	r21, 0x3F	; 63
    2e86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e8a:	88 23       	and	r24, r24
    2e8c:	2c f4       	brge	.+10     	; 0x2e98 <LCD_displayCharacter+0x262>
		__ticks = 1;
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	9c 8b       	std	Y+20, r25	; 0x14
    2e94:	8b 8b       	std	Y+19, r24	; 0x13
    2e96:	3f c0       	rjmp	.+126    	; 0x2f16 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    2e98:	6d 89       	ldd	r22, Y+21	; 0x15
    2e9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	3f ef       	ldi	r19, 0xFF	; 255
    2ea4:	4f e7       	ldi	r20, 0x7F	; 127
    2ea6:	57 e4       	ldi	r21, 0x47	; 71
    2ea8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eac:	18 16       	cp	r1, r24
    2eae:	4c f5       	brge	.+82     	; 0x2f02 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb0:	69 8d       	ldd	r22, Y+25	; 0x19
    2eb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	40 e2       	ldi	r20, 0x20	; 32
    2ebe:	51 e4       	ldi	r21, 0x41	; 65
    2ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	bc 01       	movw	r22, r24
    2eca:	cd 01       	movw	r24, r26
    2ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	9c 8b       	std	Y+20, r25	; 0x14
    2ed6:	8b 8b       	std	Y+19, r24	; 0x13
    2ed8:	0f c0       	rjmp	.+30     	; 0x2ef8 <LCD_displayCharacter+0x2c2>
    2eda:	89 e1       	ldi	r24, 0x19	; 25
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	9a 8b       	std	Y+18, r25	; 0x12
    2ee0:	89 8b       	std	Y+17, r24	; 0x11
    2ee2:	89 89       	ldd	r24, Y+17	; 0x11
    2ee4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ee6:	01 97       	sbiw	r24, 0x01	; 1
    2ee8:	f1 f7       	brne	.-4      	; 0x2ee6 <LCD_displayCharacter+0x2b0>
    2eea:	9a 8b       	std	Y+18, r25	; 0x12
    2eec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eee:	8b 89       	ldd	r24, Y+19	; 0x13
    2ef0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ef2:	01 97       	sbiw	r24, 0x01	; 1
    2ef4:	9c 8b       	std	Y+20, r25	; 0x14
    2ef6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    2efa:	9c 89       	ldd	r25, Y+20	; 0x14
    2efc:	00 97       	sbiw	r24, 0x00	; 0
    2efe:	69 f7       	brne	.-38     	; 0x2eda <LCD_displayCharacter+0x2a4>
    2f00:	14 c0       	rjmp	.+40     	; 0x2f2a <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f02:	6d 89       	ldd	r22, Y+21	; 0x15
    2f04:	7e 89       	ldd	r23, Y+22	; 0x16
    2f06:	8f 89       	ldd	r24, Y+23	; 0x17
    2f08:	98 8d       	ldd	r25, Y+24	; 0x18
    2f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	9c 8b       	std	Y+20, r25	; 0x14
    2f14:	8b 8b       	std	Y+19, r24	; 0x13
    2f16:	8b 89       	ldd	r24, Y+19	; 0x13
    2f18:	9c 89       	ldd	r25, Y+20	; 0x14
    2f1a:	98 8b       	std	Y+16, r25	; 0x10
    2f1c:	8f 87       	std	Y+15, r24	; 0x0f
    2f1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f20:	98 89       	ldd	r25, Y+16	; 0x10
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	f1 f7       	brne	.-4      	; 0x2f22 <LCD_displayCharacter+0x2ec>
    2f26:	98 8b       	std	Y+16, r25	; 0x10
    2f28:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2f2a:	a2 e3       	ldi	r26, 0x32	; 50
    2f2c:	b0 e0       	ldi	r27, 0x00	; 0
    2f2e:	e2 e3       	ldi	r30, 0x32	; 50
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	80 81       	ld	r24, Z
    2f34:	8f 7b       	andi	r24, 0xBF	; 191
    2f36:	8c 93       	st	X, r24
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	a0 e8       	ldi	r26, 0x80	; 128
    2f3e:	bf e3       	ldi	r27, 0x3F	; 63
    2f40:	8b 87       	std	Y+11, r24	; 0x0b
    2f42:	9c 87       	std	Y+12, r25	; 0x0c
    2f44:	ad 87       	std	Y+13, r26	; 0x0d
    2f46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	4a e7       	ldi	r20, 0x7A	; 122
    2f56:	53 e4       	ldi	r21, 0x43	; 67
    2f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	8f 83       	std	Y+7, r24	; 0x07
    2f62:	98 87       	std	Y+8, r25	; 0x08
    2f64:	a9 87       	std	Y+9, r26	; 0x09
    2f66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f68:	6f 81       	ldd	r22, Y+7	; 0x07
    2f6a:	78 85       	ldd	r23, Y+8	; 0x08
    2f6c:	89 85       	ldd	r24, Y+9	; 0x09
    2f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	40 e8       	ldi	r20, 0x80	; 128
    2f76:	5f e3       	ldi	r21, 0x3F	; 63
    2f78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f7c:	88 23       	and	r24, r24
    2f7e:	2c f4       	brge	.+10     	; 0x2f8a <LCD_displayCharacter+0x354>
		__ticks = 1;
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	9e 83       	std	Y+6, r25	; 0x06
    2f86:	8d 83       	std	Y+5, r24	; 0x05
    2f88:	3f c0       	rjmp	.+126    	; 0x3008 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2f8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f8c:	78 85       	ldd	r23, Y+8	; 0x08
    2f8e:	89 85       	ldd	r24, Y+9	; 0x09
    2f90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	3f ef       	ldi	r19, 0xFF	; 255
    2f96:	4f e7       	ldi	r20, 0x7F	; 127
    2f98:	57 e4       	ldi	r21, 0x47	; 71
    2f9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f9e:	18 16       	cp	r1, r24
    2fa0:	4c f5       	brge	.+82     	; 0x2ff4 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	40 e2       	ldi	r20, 0x20	; 32
    2fb0:	51 e4       	ldi	r21, 0x41	; 65
    2fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	bc 01       	movw	r22, r24
    2fbc:	cd 01       	movw	r24, r26
    2fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	9e 83       	std	Y+6, r25	; 0x06
    2fc8:	8d 83       	std	Y+5, r24	; 0x05
    2fca:	0f c0       	rjmp	.+30     	; 0x2fea <LCD_displayCharacter+0x3b4>
    2fcc:	89 e1       	ldi	r24, 0x19	; 25
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	9c 83       	std	Y+4, r25	; 0x04
    2fd2:	8b 83       	std	Y+3, r24	; 0x03
    2fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	f1 f7       	brne	.-4      	; 0x2fd8 <LCD_displayCharacter+0x3a2>
    2fdc:	9c 83       	std	Y+4, r25	; 0x04
    2fde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	9e 83       	std	Y+6, r25	; 0x06
    2fe8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fea:	8d 81       	ldd	r24, Y+5	; 0x05
    2fec:	9e 81       	ldd	r25, Y+6	; 0x06
    2fee:	00 97       	sbiw	r24, 0x00	; 0
    2ff0:	69 f7       	brne	.-38     	; 0x2fcc <LCD_displayCharacter+0x396>
    2ff2:	14 c0       	rjmp	.+40     	; 0x301c <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff6:	78 85       	ldd	r23, Y+8	; 0x08
    2ff8:	89 85       	ldd	r24, Y+9	; 0x09
    2ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	9e 83       	std	Y+6, r25	; 0x06
    3006:	8d 83       	std	Y+5, r24	; 0x05
    3008:	8d 81       	ldd	r24, Y+5	; 0x05
    300a:	9e 81       	ldd	r25, Y+6	; 0x06
    300c:	9a 83       	std	Y+2, r25	; 0x02
    300e:	89 83       	std	Y+1, r24	; 0x01
    3010:	89 81       	ldd	r24, Y+1	; 0x01
    3012:	9a 81       	ldd	r25, Y+2	; 0x02
    3014:	01 97       	sbiw	r24, 0x01	; 1
    3016:	f1 f7       	brne	.-4      	; 0x3014 <LCD_displayCharacter+0x3de>
    3018:	9a 83       	std	Y+2, r25	; 0x02
    301a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    301c:	e9 96       	adiw	r28, 0x39	; 57
    301e:	0f b6       	in	r0, 0x3f	; 63
    3020:	f8 94       	cli
    3022:	de bf       	out	0x3e, r29	; 62
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	cd bf       	out	0x3d, r28	; 61
    3028:	cf 91       	pop	r28
    302a:	df 91       	pop	r29
    302c:	08 95       	ret

0000302e <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    302e:	df 93       	push	r29
    3030:	cf 93       	push	r28
    3032:	00 d0       	rcall	.+0      	; 0x3034 <LCD_displayString+0x6>
    3034:	0f 92       	push	r0
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
    303a:	9b 83       	std	Y+3, r25	; 0x03
    303c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    303e:	19 82       	std	Y+1, r1	; 0x01
    3040:	0e c0       	rjmp	.+28     	; 0x305e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3042:	89 81       	ldd	r24, Y+1	; 0x01
    3044:	28 2f       	mov	r18, r24
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	8a 81       	ldd	r24, Y+2	; 0x02
    304a:	9b 81       	ldd	r25, Y+3	; 0x03
    304c:	fc 01       	movw	r30, r24
    304e:	e2 0f       	add	r30, r18
    3050:	f3 1f       	adc	r31, r19
    3052:	80 81       	ld	r24, Z
    3054:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <LCD_displayCharacter>
		i++;
    3058:	89 81       	ldd	r24, Y+1	; 0x01
    305a:	8f 5f       	subi	r24, 0xFF	; 255
    305c:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    305e:	89 81       	ldd	r24, Y+1	; 0x01
    3060:	28 2f       	mov	r18, r24
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	8a 81       	ldd	r24, Y+2	; 0x02
    3066:	9b 81       	ldd	r25, Y+3	; 0x03
    3068:	fc 01       	movw	r30, r24
    306a:	e2 0f       	add	r30, r18
    306c:	f3 1f       	adc	r31, r19
    306e:	80 81       	ld	r24, Z
    3070:	88 23       	and	r24, r24
    3072:	39 f7       	brne	.-50     	; 0x3042 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	cf 91       	pop	r28
    307c:	df 91       	pop	r29
    307e:	08 95       	ret

00003080 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    3080:	df 93       	push	r29
    3082:	cf 93       	push	r28
    3084:	00 d0       	rcall	.+0      	; 0x3086 <LCD_goToRowColumn+0x6>
    3086:	00 d0       	rcall	.+0      	; 0x3088 <LCD_goToRowColumn+0x8>
    3088:	0f 92       	push	r0
    308a:	cd b7       	in	r28, 0x3d	; 61
    308c:	de b7       	in	r29, 0x3e	; 62
    308e:	8a 83       	std	Y+2, r24	; 0x02
    3090:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    3092:	8a 81       	ldd	r24, Y+2	; 0x02
    3094:	28 2f       	mov	r18, r24
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	3d 83       	std	Y+5, r19	; 0x05
    309a:	2c 83       	std	Y+4, r18	; 0x04
    309c:	8c 81       	ldd	r24, Y+4	; 0x04
    309e:	9d 81       	ldd	r25, Y+5	; 0x05
    30a0:	81 30       	cpi	r24, 0x01	; 1
    30a2:	91 05       	cpc	r25, r1
    30a4:	c1 f0       	breq	.+48     	; 0x30d6 <LCD_goToRowColumn+0x56>
    30a6:	2c 81       	ldd	r18, Y+4	; 0x04
    30a8:	3d 81       	ldd	r19, Y+5	; 0x05
    30aa:	22 30       	cpi	r18, 0x02	; 2
    30ac:	31 05       	cpc	r19, r1
    30ae:	2c f4       	brge	.+10     	; 0x30ba <LCD_goToRowColumn+0x3a>
    30b0:	8c 81       	ldd	r24, Y+4	; 0x04
    30b2:	9d 81       	ldd	r25, Y+5	; 0x05
    30b4:	00 97       	sbiw	r24, 0x00	; 0
    30b6:	61 f0       	breq	.+24     	; 0x30d0 <LCD_goToRowColumn+0x50>
    30b8:	19 c0       	rjmp	.+50     	; 0x30ec <LCD_goToRowColumn+0x6c>
    30ba:	2c 81       	ldd	r18, Y+4	; 0x04
    30bc:	3d 81       	ldd	r19, Y+5	; 0x05
    30be:	22 30       	cpi	r18, 0x02	; 2
    30c0:	31 05       	cpc	r19, r1
    30c2:	69 f0       	breq	.+26     	; 0x30de <LCD_goToRowColumn+0x5e>
    30c4:	8c 81       	ldd	r24, Y+4	; 0x04
    30c6:	9d 81       	ldd	r25, Y+5	; 0x05
    30c8:	83 30       	cpi	r24, 0x03	; 3
    30ca:	91 05       	cpc	r25, r1
    30cc:	61 f0       	breq	.+24     	; 0x30e6 <LCD_goToRowColumn+0x66>
    30ce:	0e c0       	rjmp	.+28     	; 0x30ec <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	89 83       	std	Y+1, r24	; 0x01
    30d4:	0b c0       	rjmp	.+22     	; 0x30ec <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    30d6:	8b 81       	ldd	r24, Y+3	; 0x03
    30d8:	80 5c       	subi	r24, 0xC0	; 192
    30da:	89 83       	std	Y+1, r24	; 0x01
    30dc:	07 c0       	rjmp	.+14     	; 0x30ec <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    30de:	8b 81       	ldd	r24, Y+3	; 0x03
    30e0:	80 5f       	subi	r24, 0xF0	; 240
    30e2:	89 83       	std	Y+1, r24	; 0x01
    30e4:	03 c0       	rjmp	.+6      	; 0x30ec <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    30e6:	8b 81       	ldd	r24, Y+3	; 0x03
    30e8:	80 5b       	subi	r24, 0xB0	; 176
    30ea:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    30ec:	89 81       	ldd	r24, Y+1	; 0x01
    30ee:	80 68       	ori	r24, 0x80	; 128
    30f0:	0e 94 1f 14 	call	0x283e	; 0x283e <LCD_sendCommand>
}
    30f4:	0f 90       	pop	r0
    30f6:	0f 90       	pop	r0
    30f8:	0f 90       	pop	r0
    30fa:	0f 90       	pop	r0
    30fc:	0f 90       	pop	r0
    30fe:	cf 91       	pop	r28
    3100:	df 91       	pop	r29
    3102:	08 95       	ret

00003104 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3104:	df 93       	push	r29
    3106:	cf 93       	push	r28
    3108:	00 d0       	rcall	.+0      	; 0x310a <LCD_displayStringRowColumn+0x6>
    310a:	00 d0       	rcall	.+0      	; 0x310c <LCD_displayStringRowColumn+0x8>
    310c:	cd b7       	in	r28, 0x3d	; 61
    310e:	de b7       	in	r29, 0x3e	; 62
    3110:	89 83       	std	Y+1, r24	; 0x01
    3112:	6a 83       	std	Y+2, r22	; 0x02
    3114:	5c 83       	std	Y+4, r21	; 0x04
    3116:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	6a 81       	ldd	r22, Y+2	; 0x02
    311c:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    3120:	8b 81       	ldd	r24, Y+3	; 0x03
    3122:	9c 81       	ldd	r25, Y+4	; 0x04
    3124:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>
}
    3128:	0f 90       	pop	r0
    312a:	0f 90       	pop	r0
    312c:	0f 90       	pop	r0
    312e:	0f 90       	pop	r0
    3130:	cf 91       	pop	r28
    3132:	df 91       	pop	r29
    3134:	08 95       	ret

00003136 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    3136:	df 93       	push	r29
    3138:	cf 93       	push	r28
    313a:	cd b7       	in	r28, 0x3d	; 61
    313c:	de b7       	in	r29, 0x3e	; 62
    313e:	62 97       	sbiw	r28, 0x12	; 18
    3140:	0f b6       	in	r0, 0x3f	; 63
    3142:	f8 94       	cli
    3144:	de bf       	out	0x3e, r29	; 62
    3146:	0f be       	out	0x3f, r0	; 63
    3148:	cd bf       	out	0x3d, r28	; 61
    314a:	9a 8b       	std	Y+18, r25	; 0x12
    314c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    314e:	89 89       	ldd	r24, Y+17	; 0x11
    3150:	9a 89       	ldd	r25, Y+18	; 0x12
    3152:	9e 01       	movw	r18, r28
    3154:	2f 5f       	subi	r18, 0xFF	; 255
    3156:	3f 4f       	sbci	r19, 0xFF	; 255
    3158:	b9 01       	movw	r22, r18
    315a:	4a e0       	ldi	r20, 0x0A	; 10
    315c:	50 e0       	ldi	r21, 0x00	; 0
    315e:	0e 94 1a 1a 	call	0x3434	; 0x3434 <itoa>
   LCD_displayString(buff);
    3162:	ce 01       	movw	r24, r28
    3164:	01 96       	adiw	r24, 0x01	; 1
    3166:	0e 94 17 18 	call	0x302e	; 0x302e <LCD_displayString>
}
    316a:	62 96       	adiw	r28, 0x12	; 18
    316c:	0f b6       	in	r0, 0x3f	; 63
    316e:	f8 94       	cli
    3170:	de bf       	out	0x3e, r29	; 62
    3172:	0f be       	out	0x3f, r0	; 63
    3174:	cd bf       	out	0x3d, r28	; 61
    3176:	cf 91       	pop	r28
    3178:	df 91       	pop	r29
    317a:	08 95       	ret

0000317c <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    317c:	df 93       	push	r29
    317e:	cf 93       	push	r28
    3180:	cd b7       	in	r28, 0x3d	; 61
    3182:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	0e 94 1f 14 	call	0x283e	; 0x283e <LCD_sendCommand>
}
    318a:	cf 91       	pop	r28
    318c:	df 91       	pop	r29
    318e:	08 95       	ret

00003190 <Timer_OF_init>:

unsigned int g_tick = 0;
static volatile void (*g_Timer0_Call_Back_Ptr)(void);

void Timer_OF_init()
{
    3190:	df 93       	push	r29
    3192:	cf 93       	push	r28
    3194:	cd b7       	in	r28, 0x3d	; 61
    3196:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1<<FOC0) | (1<<CS00) | (CS02);
    3198:	e3 e5       	ldi	r30, 0x53	; 83
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	83 e8       	ldi	r24, 0x83	; 131
    319e:	80 83       	st	Z, r24
	TCNT0 = 0;
    31a0:	e2 e5       	ldi	r30, 0x52	; 82
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	10 82       	st	Z, r1
	TIMSK = (1<<TOIE0);
    31a6:	e9 e5       	ldi	r30, 0x59	; 89
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	80 83       	st	Z, r24
}
    31ae:	cf 91       	pop	r28
    31b0:	df 91       	pop	r29
    31b2:	08 95       	ret

000031b4 <setCallBackFunc>:
{
	TCCR0 = (1<<WGM01) | (1<<WGM00) | (1<<CS00) | (CS02);
}
*/
void setCallBackFunc(void(*ptr2func)(uint8))
{
    31b4:	df 93       	push	r29
    31b6:	cf 93       	push	r28
    31b8:	00 d0       	rcall	.+0      	; 0x31ba <setCallBackFunc+0x6>
    31ba:	cd b7       	in	r28, 0x3d	; 61
    31bc:	de b7       	in	r29, 0x3e	; 62
    31be:	9a 83       	std	Y+2, r25	; 0x02
    31c0:	89 83       	std	Y+1, r24	; 0x01
	g_Timer0_Call_Back_Ptr = ptr2func;
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	9a 81       	ldd	r25, Y+2	; 0x02
    31c6:	90 93 ad 00 	sts	0x00AD, r25
    31ca:	80 93 ac 00 	sts	0x00AC, r24
}
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	cf 91       	pop	r28
    31d4:	df 91       	pop	r29
    31d6:	08 95       	ret

000031d8 <Timer_stop>:

void Timer_stop ()
{
    31d8:	df 93       	push	r29
    31da:	cf 93       	push	r28
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    31e0:	e3 e5       	ldi	r30, 0x53	; 83
    31e2:	f0 e0       	ldi	r31, 0x00	; 0
    31e4:	10 82       	st	Z, r1
}
    31e6:	cf 91       	pop	r28
    31e8:	df 91       	pop	r29
    31ea:	08 95       	ret

000031ec <__vector_9>:

ISR (TIMER0_OVF_vect)
{
    31ec:	1f 92       	push	r1
    31ee:	0f 92       	push	r0
    31f0:	0f b6       	in	r0, 0x3f	; 63
    31f2:	0f 92       	push	r0
    31f4:	11 24       	eor	r1, r1
    31f6:	2f 93       	push	r18
    31f8:	3f 93       	push	r19
    31fa:	4f 93       	push	r20
    31fc:	5f 93       	push	r21
    31fe:	6f 93       	push	r22
    3200:	7f 93       	push	r23
    3202:	8f 93       	push	r24
    3204:	9f 93       	push	r25
    3206:	af 93       	push	r26
    3208:	bf 93       	push	r27
    320a:	ef 93       	push	r30
    320c:	ff 93       	push	r31
    320e:	df 93       	push	r29
    3210:	cf 93       	push	r28
    3212:	cd b7       	in	r28, 0x3d	; 61
    3214:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    3216:	80 91 aa 00 	lds	r24, 0x00AA
    321a:	90 91 ab 00 	lds	r25, 0x00AB
    321e:	01 96       	adiw	r24, 0x01	; 1
    3220:	90 93 ab 00 	sts	0x00AB, r25
    3224:	80 93 aa 00 	sts	0x00AA, r24
	if(g_tick == NUMBER_OF_OVERFLOWS_PER_SECOND)
    3228:	80 91 aa 00 	lds	r24, 0x00AA
    322c:	90 91 ab 00 	lds	r25, 0x00AB
    3230:	8f 31       	cpi	r24, 0x1F	; 31
    3232:	91 05       	cpc	r25, r1
    3234:	49 f4       	brne	.+18     	; 0x3248 <__vector_9+0x5c>
	{
		g_Timer0_Call_Back_Ptr();
    3236:	e0 91 ac 00 	lds	r30, 0x00AC
    323a:	f0 91 ad 00 	lds	r31, 0x00AD
    323e:	09 95       	icall
		g_tick = 0;
    3240:	10 92 ab 00 	sts	0x00AB, r1
    3244:	10 92 aa 00 	sts	0x00AA, r1
	}
}
    3248:	cf 91       	pop	r28
    324a:	df 91       	pop	r29
    324c:	ff 91       	pop	r31
    324e:	ef 91       	pop	r30
    3250:	bf 91       	pop	r27
    3252:	af 91       	pop	r26
    3254:	9f 91       	pop	r25
    3256:	8f 91       	pop	r24
    3258:	7f 91       	pop	r23
    325a:	6f 91       	pop	r22
    325c:	5f 91       	pop	r21
    325e:	4f 91       	pop	r20
    3260:	3f 91       	pop	r19
    3262:	2f 91       	pop	r18
    3264:	0f 90       	pop	r0
    3266:	0f be       	out	0x3f, r0	; 63
    3268:	0f 90       	pop	r0
    326a:	1f 90       	pop	r1
    326c:	18 95       	reti

0000326e <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    326e:	df 93       	push	r29
    3270:	cf 93       	push	r28
    3272:	cd b7       	in	r28, 0x3d	; 61
    3274:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3276:	eb e2       	ldi	r30, 0x2B	; 43
    3278:	f0 e0       	ldi	r31, 0x00	; 0
    327a:	82 e0       	ldi	r24, 0x02	; 2
    327c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    327e:	ea e2       	ldi	r30, 0x2A	; 42
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	88 e1       	ldi	r24, 0x18	; 24
    3284:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    3286:	e0 e4       	ldi	r30, 0x40	; 64
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	86 e8       	ldi	r24, 0x86	; 134
    328c:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    328e:	e0 e4       	ldi	r30, 0x40	; 64
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    3294:	e9 e2       	ldi	r30, 0x29	; 41
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	8c e0       	ldi	r24, 0x0C	; 12
    329a:	80 83       	st	Z, r24
}
    329c:	cf 91       	pop	r28
    329e:	df 91       	pop	r29
    32a0:	08 95       	ret

000032a2 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    32a2:	df 93       	push	r29
    32a4:	cf 93       	push	r28
    32a6:	0f 92       	push	r0
    32a8:	cd b7       	in	r28, 0x3d	; 61
    32aa:	de b7       	in	r29, 0x3e	; 62
    32ac:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    32ae:	eb e2       	ldi	r30, 0x2B	; 43
    32b0:	f0 e0       	ldi	r31, 0x00	; 0
    32b2:	80 81       	ld	r24, Z
    32b4:	88 2f       	mov	r24, r24
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	80 72       	andi	r24, 0x20	; 32
    32ba:	90 70       	andi	r25, 0x00	; 0
    32bc:	00 97       	sbiw	r24, 0x00	; 0
    32be:	b9 f3       	breq	.-18     	; 0x32ae <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    32c0:	ec e2       	ldi	r30, 0x2C	; 44
    32c2:	f0 e0       	ldi	r31, 0x00	; 0
    32c4:	89 81       	ldd	r24, Y+1	; 0x01
    32c6:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    32c8:	0f 90       	pop	r0
    32ca:	cf 91       	pop	r28
    32cc:	df 91       	pop	r29
    32ce:	08 95       	ret

000032d0 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    32d0:	df 93       	push	r29
    32d2:	cf 93       	push	r28
    32d4:	cd b7       	in	r28, 0x3d	; 61
    32d6:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    32d8:	eb e2       	ldi	r30, 0x2B	; 43
    32da:	f0 e0       	ldi	r31, 0x00	; 0
    32dc:	80 81       	ld	r24, Z
    32de:	88 23       	and	r24, r24
    32e0:	dc f7       	brge	.-10     	; 0x32d8 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    32e2:	ec e2       	ldi	r30, 0x2C	; 44
    32e4:	f0 e0       	ldi	r31, 0x00	; 0
    32e6:	80 81       	ld	r24, Z
}
    32e8:	cf 91       	pop	r28
    32ea:	df 91       	pop	r29
    32ec:	08 95       	ret

000032ee <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    32ee:	df 93       	push	r29
    32f0:	cf 93       	push	r28
    32f2:	00 d0       	rcall	.+0      	; 0x32f4 <UART_sendString+0x6>
    32f4:	0f 92       	push	r0
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62
    32fa:	9b 83       	std	Y+3, r25	; 0x03
    32fc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    32fe:	19 82       	std	Y+1, r1	; 0x01
    3300:	0e c0       	rjmp	.+28     	; 0x331e <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3302:	89 81       	ldd	r24, Y+1	; 0x01
    3304:	28 2f       	mov	r18, r24
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	8a 81       	ldd	r24, Y+2	; 0x02
    330a:	9b 81       	ldd	r25, Y+3	; 0x03
    330c:	fc 01       	movw	r30, r24
    330e:	e2 0f       	add	r30, r18
    3310:	f3 1f       	adc	r31, r19
    3312:	80 81       	ld	r24, Z
    3314:	0e 94 51 19 	call	0x32a2	; 0x32a2 <UART_sendByte>
		i++;
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	8f 5f       	subi	r24, 0xFF	; 255
    331c:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    331e:	89 81       	ldd	r24, Y+1	; 0x01
    3320:	28 2f       	mov	r18, r24
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	8a 81       	ldd	r24, Y+2	; 0x02
    3326:	9b 81       	ldd	r25, Y+3	; 0x03
    3328:	fc 01       	movw	r30, r24
    332a:	e2 0f       	add	r30, r18
    332c:	f3 1f       	adc	r31, r19
    332e:	80 81       	ld	r24, Z
    3330:	88 23       	and	r24, r24
    3332:	39 f7       	brne	.-50     	; 0x3302 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	cf 91       	pop	r28
    333c:	df 91       	pop	r29
    333e:	08 95       	ret

00003340 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    3340:	0f 93       	push	r16
    3342:	1f 93       	push	r17
    3344:	df 93       	push	r29
    3346:	cf 93       	push	r28
    3348:	00 d0       	rcall	.+0      	; 0x334a <UART_receiveString+0xa>
    334a:	0f 92       	push	r0
    334c:	cd b7       	in	r28, 0x3d	; 61
    334e:	de b7       	in	r29, 0x3e	; 62
    3350:	9b 83       	std	Y+3, r25	; 0x03
    3352:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3354:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    3356:	89 81       	ldd	r24, Y+1	; 0x01
    3358:	28 2f       	mov	r18, r24
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	8a 81       	ldd	r24, Y+2	; 0x02
    335e:	9b 81       	ldd	r25, Y+3	; 0x03
    3360:	8c 01       	movw	r16, r24
    3362:	02 0f       	add	r16, r18
    3364:	13 1f       	adc	r17, r19
    3366:	0e 94 68 19 	call	0x32d0	; 0x32d0 <UART_recieveByte>
    336a:	f8 01       	movw	r30, r16
    336c:	80 83       	st	Z, r24
    336e:	0f c0       	rjmp	.+30     	; 0x338e <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	8f 5f       	subi	r24, 0xFF	; 255
    3374:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3376:	89 81       	ldd	r24, Y+1	; 0x01
    3378:	28 2f       	mov	r18, r24
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	8a 81       	ldd	r24, Y+2	; 0x02
    337e:	9b 81       	ldd	r25, Y+3	; 0x03
    3380:	8c 01       	movw	r16, r24
    3382:	02 0f       	add	r16, r18
    3384:	13 1f       	adc	r17, r19
    3386:	0e 94 68 19 	call	0x32d0	; 0x32d0 <UART_recieveByte>
    338a:	f8 01       	movw	r30, r16
    338c:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    338e:	89 81       	ldd	r24, Y+1	; 0x01
    3390:	28 2f       	mov	r18, r24
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	8a 81       	ldd	r24, Y+2	; 0x02
    3396:	9b 81       	ldd	r25, Y+3	; 0x03
    3398:	fc 01       	movw	r30, r24
    339a:	e2 0f       	add	r30, r18
    339c:	f3 1f       	adc	r31, r19
    339e:	80 81       	ld	r24, Z
    33a0:	83 32       	cpi	r24, 0x23	; 35
    33a2:	31 f7       	brne	.-52     	; 0x3370 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    33a4:	89 81       	ldd	r24, Y+1	; 0x01
    33a6:	28 2f       	mov	r18, r24
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	8a 81       	ldd	r24, Y+2	; 0x02
    33ac:	9b 81       	ldd	r25, Y+3	; 0x03
    33ae:	fc 01       	movw	r30, r24
    33b0:	e2 0f       	add	r30, r18
    33b2:	f3 1f       	adc	r31, r19
    33b4:	10 82       	st	Z, r1
}
    33b6:	0f 90       	pop	r0
    33b8:	0f 90       	pop	r0
    33ba:	0f 90       	pop	r0
    33bc:	cf 91       	pop	r28
    33be:	df 91       	pop	r29
    33c0:	1f 91       	pop	r17
    33c2:	0f 91       	pop	r16
    33c4:	08 95       	ret

000033c6 <__prologue_saves__>:
    33c6:	2f 92       	push	r2
    33c8:	3f 92       	push	r3
    33ca:	4f 92       	push	r4
    33cc:	5f 92       	push	r5
    33ce:	6f 92       	push	r6
    33d0:	7f 92       	push	r7
    33d2:	8f 92       	push	r8
    33d4:	9f 92       	push	r9
    33d6:	af 92       	push	r10
    33d8:	bf 92       	push	r11
    33da:	cf 92       	push	r12
    33dc:	df 92       	push	r13
    33de:	ef 92       	push	r14
    33e0:	ff 92       	push	r15
    33e2:	0f 93       	push	r16
    33e4:	1f 93       	push	r17
    33e6:	cf 93       	push	r28
    33e8:	df 93       	push	r29
    33ea:	cd b7       	in	r28, 0x3d	; 61
    33ec:	de b7       	in	r29, 0x3e	; 62
    33ee:	ca 1b       	sub	r28, r26
    33f0:	db 0b       	sbc	r29, r27
    33f2:	0f b6       	in	r0, 0x3f	; 63
    33f4:	f8 94       	cli
    33f6:	de bf       	out	0x3e, r29	; 62
    33f8:	0f be       	out	0x3f, r0	; 63
    33fa:	cd bf       	out	0x3d, r28	; 61
    33fc:	09 94       	ijmp

000033fe <__epilogue_restores__>:
    33fe:	2a 88       	ldd	r2, Y+18	; 0x12
    3400:	39 88       	ldd	r3, Y+17	; 0x11
    3402:	48 88       	ldd	r4, Y+16	; 0x10
    3404:	5f 84       	ldd	r5, Y+15	; 0x0f
    3406:	6e 84       	ldd	r6, Y+14	; 0x0e
    3408:	7d 84       	ldd	r7, Y+13	; 0x0d
    340a:	8c 84       	ldd	r8, Y+12	; 0x0c
    340c:	9b 84       	ldd	r9, Y+11	; 0x0b
    340e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3410:	b9 84       	ldd	r11, Y+9	; 0x09
    3412:	c8 84       	ldd	r12, Y+8	; 0x08
    3414:	df 80       	ldd	r13, Y+7	; 0x07
    3416:	ee 80       	ldd	r14, Y+6	; 0x06
    3418:	fd 80       	ldd	r15, Y+5	; 0x05
    341a:	0c 81       	ldd	r16, Y+4	; 0x04
    341c:	1b 81       	ldd	r17, Y+3	; 0x03
    341e:	aa 81       	ldd	r26, Y+2	; 0x02
    3420:	b9 81       	ldd	r27, Y+1	; 0x01
    3422:	ce 0f       	add	r28, r30
    3424:	d1 1d       	adc	r29, r1
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	f8 94       	cli
    342a:	de bf       	out	0x3e, r29	; 62
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	cd bf       	out	0x3d, r28	; 61
    3430:	ed 01       	movw	r28, r26
    3432:	08 95       	ret

00003434 <itoa>:
    3434:	fb 01       	movw	r30, r22
    3436:	9f 01       	movw	r18, r30
    3438:	e8 94       	clt
    343a:	42 30       	cpi	r20, 0x02	; 2
    343c:	c4 f0       	brlt	.+48     	; 0x346e <itoa+0x3a>
    343e:	45 32       	cpi	r20, 0x25	; 37
    3440:	b4 f4       	brge	.+44     	; 0x346e <itoa+0x3a>
    3442:	4a 30       	cpi	r20, 0x0A	; 10
    3444:	29 f4       	brne	.+10     	; 0x3450 <itoa+0x1c>
    3446:	97 fb       	bst	r25, 7
    3448:	1e f4       	brtc	.+6      	; 0x3450 <itoa+0x1c>
    344a:	90 95       	com	r25
    344c:	81 95       	neg	r24
    344e:	9f 4f       	sbci	r25, 0xFF	; 255
    3450:	64 2f       	mov	r22, r20
    3452:	77 27       	eor	r23, r23
    3454:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__udivmodhi4>
    3458:	80 5d       	subi	r24, 0xD0	; 208
    345a:	8a 33       	cpi	r24, 0x3A	; 58
    345c:	0c f0       	brlt	.+2      	; 0x3460 <itoa+0x2c>
    345e:	89 5d       	subi	r24, 0xD9	; 217
    3460:	81 93       	st	Z+, r24
    3462:	cb 01       	movw	r24, r22
    3464:	00 97       	sbiw	r24, 0x00	; 0
    3466:	a1 f7       	brne	.-24     	; 0x3450 <itoa+0x1c>
    3468:	16 f4       	brtc	.+4      	; 0x346e <itoa+0x3a>
    346a:	5d e2       	ldi	r21, 0x2D	; 45
    346c:	51 93       	st	Z+, r21
    346e:	10 82       	st	Z, r1
    3470:	c9 01       	movw	r24, r18
    3472:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <strrev>

00003476 <strrev>:
    3476:	dc 01       	movw	r26, r24
    3478:	fc 01       	movw	r30, r24
    347a:	67 2f       	mov	r22, r23
    347c:	71 91       	ld	r23, Z+
    347e:	77 23       	and	r23, r23
    3480:	e1 f7       	brne	.-8      	; 0x347a <strrev+0x4>
    3482:	32 97       	sbiw	r30, 0x02	; 2
    3484:	04 c0       	rjmp	.+8      	; 0x348e <strrev+0x18>
    3486:	7c 91       	ld	r23, X
    3488:	6d 93       	st	X+, r22
    348a:	70 83       	st	Z, r23
    348c:	62 91       	ld	r22, -Z
    348e:	ae 17       	cp	r26, r30
    3490:	bf 07       	cpc	r27, r31
    3492:	c8 f3       	brcs	.-14     	; 0x3486 <strrev+0x10>
    3494:	08 95       	ret

00003496 <__udivmodhi4>:
    3496:	aa 1b       	sub	r26, r26
    3498:	bb 1b       	sub	r27, r27
    349a:	51 e1       	ldi	r21, 0x11	; 17
    349c:	07 c0       	rjmp	.+14     	; 0x34ac <__udivmodhi4_ep>

0000349e <__udivmodhi4_loop>:
    349e:	aa 1f       	adc	r26, r26
    34a0:	bb 1f       	adc	r27, r27
    34a2:	a6 17       	cp	r26, r22
    34a4:	b7 07       	cpc	r27, r23
    34a6:	10 f0       	brcs	.+4      	; 0x34ac <__udivmodhi4_ep>
    34a8:	a6 1b       	sub	r26, r22
    34aa:	b7 0b       	sbc	r27, r23

000034ac <__udivmodhi4_ep>:
    34ac:	88 1f       	adc	r24, r24
    34ae:	99 1f       	adc	r25, r25
    34b0:	5a 95       	dec	r21
    34b2:	a9 f7       	brne	.-22     	; 0x349e <__udivmodhi4_loop>
    34b4:	80 95       	com	r24
    34b6:	90 95       	com	r25
    34b8:	bc 01       	movw	r22, r24
    34ba:	cd 01       	movw	r24, r26
    34bc:	08 95       	ret

000034be <_exit>:
    34be:	f8 94       	cli

000034c0 <__stop_program>:
    34c0:	ff cf       	rjmp	.-2      	; 0x34c0 <__stop_program>


MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ee0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00002ee0  00002f74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000a2  008000a2  00002fb6  2**0
                  ALLOC
  3 .stab         00002d30  00000000  00000000  00002fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ea6  00000000  00000000  00005ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008a87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009972  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a720  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a880  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ab0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b2db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3a       	cpi	r26, 0xA6	; 166
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cd 05 	call	0xb9a	; 0xb9a <main>
      8a:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e9       	ldi	r26, 0x9A	; 154
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a e9       	ldi	r24, 0x9A	; 154
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <getPow>:
#include"MC1.h"
#include "avr/delay.h"

uint8 getPow(uint8 pow , uint8 num)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <getPow+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <getPow+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	8c 83       	std	Y+4, r24	; 0x04
     b56:	6d 83       	std	Y+5, r22	; 0x05
	uint8 result = 1;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	8b 83       	std	Y+3, r24	; 0x03
	for( int i = 0; i<pow ; i++)
     b5c:	1a 82       	std	Y+2, r1	; 0x02
     b5e:	19 82       	std	Y+1, r1	; 0x01
     b60:	0b c0       	rjmp	.+22     	; 0xb78 <getPow+0x32>
	{
		result *= num;
     b62:	9b 81       	ldd	r25, Y+3	; 0x03
     b64:	8d 81       	ldd	r24, Y+5	; 0x05
     b66:	98 9f       	mul	r25, r24
     b68:	80 2d       	mov	r24, r0
     b6a:	11 24       	eor	r1, r1
     b6c:	8b 83       	std	Y+3, r24	; 0x03
#include "avr/delay.h"

uint8 getPow(uint8 pow , uint8 num)
{
	uint8 result = 1;
	for( int i = 0; i<pow ; i++)
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	01 96       	adiw	r24, 0x01	; 1
     b74:	9a 83       	std	Y+2, r25	; 0x02
     b76:	89 83       	std	Y+1, r24	; 0x01
     b78:	8c 81       	ldd	r24, Y+4	; 0x04
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	9a 81       	ldd	r25, Y+2	; 0x02
     b82:	82 17       	cp	r24, r18
     b84:	93 07       	cpc	r25, r19
     b86:	6c f3       	brlt	.-38     	; 0xb62 <getPow+0x1c>
	{
		result *= num;
	}
	return result;
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
}
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	08 95       	ret

00000b9a <main>:

void main()
{
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	cf 5a       	subi	r28, 0xAF	; 175
     ba8:	d0 40       	sbci	r29, 0x00	; 0
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
	uint8 counter = 0;
     bb4:	fe 01       	movw	r30, r28
     bb6:	eb 55       	subi	r30, 0x5B	; 91
     bb8:	ff 4f       	sbci	r31, 0xFF	; 255
     bba:	10 82       	st	Z, r1
	uint8 passArr1[3];
	uint8 passArr2[3];
	uint8 passEntered[3];
	uint8 password1 = 0;
     bbc:	fe 01       	movw	r30, r28
     bbe:	ec 55       	subi	r30, 0x5C	; 92
     bc0:	ff 4f       	sbci	r31, 0xFF	; 255
     bc2:	10 82       	st	Z, r1
	uint8 password2 = 0;
     bc4:	fe 01       	movw	r30, r28
     bc6:	ed 55       	subi	r30, 0x5D	; 93
     bc8:	ff 4f       	sbci	r31, 0xFF	; 255
     bca:	10 82       	st	Z, r1
	uint8 sentpassword=0;
     bcc:	fe 01       	movw	r30, r28
     bce:	ee 55       	subi	r30, 0x5E	; 94
     bd0:	ff 4f       	sbci	r31, 0xFF	; 255
     bd2:	10 82       	st	Z, r1
	uint8 noOfPasswordSetting;
	uint8 noOfPasswordEntering;
	uint8 numPressed;
	uint8 M2_reply;
	uint8 passIsTrue=0;
     bd4:	fe 01       	movw	r30, r28
     bd6:	e3 56       	subi	r30, 0x63	; 99
     bd8:	ff 4f       	sbci	r31, 0xFF	; 255
     bda:	10 82       	st	Z, r1
	uint8 passFlag;
	uint8 respond_pass;
	DDRB = 0XFF;
     bdc:	e7 e3       	ldi	r30, 0x37	; 55
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	8f ef       	ldi	r24, 0xFF	; 255
     be2:	80 83       	st	Z, r24
	PORTB = 0;
     be4:	e8 e3       	ldi	r30, 0x38	; 56
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	10 82       	st	Z, r1
	uint8 test;

	LCD_init();
     bea:	0e 94 13 11 	call	0x2226	; 0x2226 <LCD_init>
	UART_init();
     bee:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <UART_init>
	EEPROM_init();
     bf2:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <EEPROM_init>
     bf6:	fe 01       	movw	r30, r28
     bf8:	e9 56       	subi	r30, 0x69	; 105
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	a8 ec       	ldi	r26, 0xC8	; 200
     c02:	b2 e4       	ldi	r27, 0x42	; 66
     c04:	80 83       	st	Z, r24
     c06:	91 83       	std	Z+1, r25	; 0x01
     c08:	a2 83       	std	Z+2, r26	; 0x02
     c0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c0c:	8e 01       	movw	r16, r28
     c0e:	0d 56       	subi	r16, 0x6D	; 109
     c10:	1f 4f       	sbci	r17, 0xFF	; 255
     c12:	fe 01       	movw	r30, r28
     c14:	e9 56       	subi	r30, 0x69	; 105
     c16:	ff 4f       	sbci	r31, 0xFF	; 255
     c18:	60 81       	ld	r22, Z
     c1a:	71 81       	ldd	r23, Z+1	; 0x01
     c1c:	82 81       	ldd	r24, Z+2	; 0x02
     c1e:	93 81       	ldd	r25, Z+3	; 0x03
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	4a e7       	ldi	r20, 0x7A	; 122
     c26:	53 e4       	ldi	r21, 0x43	; 67
     c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	f8 01       	movw	r30, r16
     c32:	80 83       	st	Z, r24
     c34:	91 83       	std	Z+1, r25	; 0x01
     c36:	a2 83       	std	Z+2, r26	; 0x02
     c38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c3a:	fe 01       	movw	r30, r28
     c3c:	ed 56       	subi	r30, 0x6D	; 109
     c3e:	ff 4f       	sbci	r31, 0xFF	; 255
     c40:	60 81       	ld	r22, Z
     c42:	71 81       	ldd	r23, Z+1	; 0x01
     c44:	82 81       	ldd	r24, Z+2	; 0x02
     c46:	93 81       	ldd	r25, Z+3	; 0x03
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e8       	ldi	r20, 0x80	; 128
     c4e:	5f e3       	ldi	r21, 0x3F	; 63
     c50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c54:	88 23       	and	r24, r24
     c56:	44 f4       	brge	.+16     	; 0xc68 <main+0xce>
		__ticks = 1;
     c58:	fe 01       	movw	r30, r28
     c5a:	ef 56       	subi	r30, 0x6F	; 111
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	91 83       	std	Z+1, r25	; 0x01
     c64:	80 83       	st	Z, r24
     c66:	64 c0       	rjmp	.+200    	; 0xd30 <main+0x196>
	else if (__tmp > 65535)
     c68:	fe 01       	movw	r30, r28
     c6a:	ed 56       	subi	r30, 0x6D	; 109
     c6c:	ff 4f       	sbci	r31, 0xFF	; 255
     c6e:	60 81       	ld	r22, Z
     c70:	71 81       	ldd	r23, Z+1	; 0x01
     c72:	82 81       	ldd	r24, Z+2	; 0x02
     c74:	93 81       	ldd	r25, Z+3	; 0x03
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	3f ef       	ldi	r19, 0xFF	; 255
     c7a:	4f e7       	ldi	r20, 0x7F	; 127
     c7c:	57 e4       	ldi	r21, 0x47	; 71
     c7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c82:	18 16       	cp	r1, r24
     c84:	0c f0       	brlt	.+2      	; 0xc88 <main+0xee>
     c86:	43 c0       	rjmp	.+134    	; 0xd0e <main+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c88:	fe 01       	movw	r30, r28
     c8a:	e9 56       	subi	r30, 0x69	; 105
     c8c:	ff 4f       	sbci	r31, 0xFF	; 255
     c8e:	60 81       	ld	r22, Z
     c90:	71 81       	ldd	r23, Z+1	; 0x01
     c92:	82 81       	ldd	r24, Z+2	; 0x02
     c94:	93 81       	ldd	r25, Z+3	; 0x03
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	40 e2       	ldi	r20, 0x20	; 32
     c9c:	51 e4       	ldi	r21, 0x41	; 65
     c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca2:	dc 01       	movw	r26, r24
     ca4:	cb 01       	movw	r24, r22
     ca6:	8e 01       	movw	r16, r28
     ca8:	0f 56       	subi	r16, 0x6F	; 111
     caa:	1f 4f       	sbci	r17, 0xFF	; 255
     cac:	bc 01       	movw	r22, r24
     cae:	cd 01       	movw	r24, r26
     cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cb4:	dc 01       	movw	r26, r24
     cb6:	cb 01       	movw	r24, r22
     cb8:	f8 01       	movw	r30, r16
     cba:	91 83       	std	Z+1, r25	; 0x01
     cbc:	80 83       	st	Z, r24
     cbe:	1f c0       	rjmp	.+62     	; 0xcfe <main+0x164>
     cc0:	fe 01       	movw	r30, r28
     cc2:	e1 57       	subi	r30, 0x71	; 113
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	89 e1       	ldi	r24, 0x19	; 25
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	91 83       	std	Z+1, r25	; 0x01
     ccc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cce:	fe 01       	movw	r30, r28
     cd0:	e1 57       	subi	r30, 0x71	; 113
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	80 81       	ld	r24, Z
     cd6:	91 81       	ldd	r25, Z+1	; 0x01
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <main+0x13e>
     cdc:	fe 01       	movw	r30, r28
     cde:	e1 57       	subi	r30, 0x71	; 113
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	91 83       	std	Z+1, r25	; 0x01
     ce4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce6:	de 01       	movw	r26, r28
     ce8:	af 56       	subi	r26, 0x6F	; 111
     cea:	bf 4f       	sbci	r27, 0xFF	; 255
     cec:	fe 01       	movw	r30, r28
     cee:	ef 56       	subi	r30, 0x6F	; 111
     cf0:	ff 4f       	sbci	r31, 0xFF	; 255
     cf2:	80 81       	ld	r24, Z
     cf4:	91 81       	ldd	r25, Z+1	; 0x01
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	11 96       	adiw	r26, 0x01	; 1
     cfa:	9c 93       	st	X, r25
     cfc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cfe:	fe 01       	movw	r30, r28
     d00:	ef 56       	subi	r30, 0x6F	; 111
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	80 81       	ld	r24, Z
     d06:	91 81       	ldd	r25, Z+1	; 0x01
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	d1 f6       	brne	.-76     	; 0xcc0 <main+0x126>
     d0c:	27 c0       	rjmp	.+78     	; 0xd5c <main+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d0e:	8e 01       	movw	r16, r28
     d10:	0f 56       	subi	r16, 0x6F	; 111
     d12:	1f 4f       	sbci	r17, 0xFF	; 255
     d14:	fe 01       	movw	r30, r28
     d16:	ed 56       	subi	r30, 0x6D	; 109
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	60 81       	ld	r22, Z
     d1c:	71 81       	ldd	r23, Z+1	; 0x01
     d1e:	82 81       	ldd	r24, Z+2	; 0x02
     d20:	93 81       	ldd	r25, Z+3	; 0x03
     d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	f8 01       	movw	r30, r16
     d2c:	91 83       	std	Z+1, r25	; 0x01
     d2e:	80 83       	st	Z, r24
     d30:	de 01       	movw	r26, r28
     d32:	a3 57       	subi	r26, 0x73	; 115
     d34:	bf 4f       	sbci	r27, 0xFF	; 255
     d36:	fe 01       	movw	r30, r28
     d38:	ef 56       	subi	r30, 0x6F	; 111
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	80 81       	ld	r24, Z
     d3e:	91 81       	ldd	r25, Z+1	; 0x01
     d40:	8d 93       	st	X+, r24
     d42:	9c 93       	st	X, r25
     d44:	fe 01       	movw	r30, r28
     d46:	e3 57       	subi	r30, 0x73	; 115
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	80 81       	ld	r24, Z
     d4c:	91 81       	ldd	r25, Z+1	; 0x01
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <main+0x1b4>
     d52:	fe 01       	movw	r30, r28
     d54:	e3 57       	subi	r30, 0x73	; 115
     d56:	ff 4f       	sbci	r31, 0xFF	; 255
     d58:	91 83       	std	Z+1, r25	; 0x01
     d5a:	80 83       	st	Z, r24
	do
	{
		//Here we're entering the password for the 1st time
		_delay_ms(100);
		//recieveFlag = 0;
		noOfPasswordSetting = 0;
     d5c:	fe 01       	movw	r30, r28
     d5e:	ef 55       	subi	r30, 0x5F	; 95
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	10 82       	st	Z, r1

		LCD_clearScreen();
     d64:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Set Pass");
     d68:	20 e6       	ldi	r18, 0x60	; 96
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	a9 01       	movw	r20, r18
     d72:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"Pass:");
     d76:	29 e6       	ldi	r18, 0x69	; 105
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	a9 01       	movw	r20, r18
     d80:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_displayStringRowColumn>
		LCD_goToRowColumn(1,6);
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	66 e0       	ldi	r22, 0x06	; 6
     d88:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_goToRowColumn>

		//Enter password of 3 numbers
		for(counter = 0 ; counter < 3 ; counter++)
     d8c:	fe 01       	movw	r30, r28
     d8e:	eb 55       	subi	r30, 0x5B	; 91
     d90:	ff 4f       	sbci	r31, 0xFF	; 255
     d92:	10 82       	st	Z, r1
     d94:	db c0       	rjmp	.+438    	; 0xf4c <main+0x3b2>
		{
			//_delay_ms(500);
			//get number preesed
			numPressed = KeyPad_getPressedKey();
     d96:	0e 94 15 10 	call	0x202a	; 0x202a <KeyPad_getPressedKey>
     d9a:	fe 01       	movw	r30, r28
     d9c:	e1 56       	subi	r30, 0x61	; 97
     d9e:	ff 4f       	sbci	r31, 0xFF	; 255
     da0:	80 83       	st	Z, r24
     da2:	fe 01       	movw	r30, r28
     da4:	e7 57       	subi	r30, 0x77	; 119
     da6:	ff 4f       	sbci	r31, 0xFF	; 255
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	aa ef       	ldi	r26, 0xFA	; 250
     dae:	b3 e4       	ldi	r27, 0x43	; 67
     db0:	80 83       	st	Z, r24
     db2:	91 83       	std	Z+1, r25	; 0x01
     db4:	a2 83       	std	Z+2, r26	; 0x02
     db6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db8:	8e 01       	movw	r16, r28
     dba:	0b 57       	subi	r16, 0x7B	; 123
     dbc:	1f 4f       	sbci	r17, 0xFF	; 255
     dbe:	fe 01       	movw	r30, r28
     dc0:	e7 57       	subi	r30, 0x77	; 119
     dc2:	ff 4f       	sbci	r31, 0xFF	; 255
     dc4:	60 81       	ld	r22, Z
     dc6:	71 81       	ldd	r23, Z+1	; 0x01
     dc8:	82 81       	ldd	r24, Z+2	; 0x02
     dca:	93 81       	ldd	r25, Z+3	; 0x03
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	4a e7       	ldi	r20, 0x7A	; 122
     dd2:	53 e4       	ldi	r21, 0x43	; 67
     dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	f8 01       	movw	r30, r16
     dde:	80 83       	st	Z, r24
     de0:	91 83       	std	Z+1, r25	; 0x01
     de2:	a2 83       	std	Z+2, r26	; 0x02
     de4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     de6:	fe 01       	movw	r30, r28
     de8:	eb 57       	subi	r30, 0x7B	; 123
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	60 81       	ld	r22, Z
     dee:	71 81       	ldd	r23, Z+1	; 0x01
     df0:	82 81       	ldd	r24, Z+2	; 0x02
     df2:	93 81       	ldd	r25, Z+3	; 0x03
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	40 e8       	ldi	r20, 0x80	; 128
     dfa:	5f e3       	ldi	r21, 0x3F	; 63
     dfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e00:	88 23       	and	r24, r24
     e02:	44 f4       	brge	.+16     	; 0xe14 <main+0x27a>
		__ticks = 1;
     e04:	fe 01       	movw	r30, r28
     e06:	ed 57       	subi	r30, 0x7D	; 125
     e08:	ff 4f       	sbci	r31, 0xFF	; 255
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	91 83       	std	Z+1, r25	; 0x01
     e10:	80 83       	st	Z, r24
     e12:	64 c0       	rjmp	.+200    	; 0xedc <main+0x342>
	else if (__tmp > 65535)
     e14:	fe 01       	movw	r30, r28
     e16:	eb 57       	subi	r30, 0x7B	; 123
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	60 81       	ld	r22, Z
     e1c:	71 81       	ldd	r23, Z+1	; 0x01
     e1e:	82 81       	ldd	r24, Z+2	; 0x02
     e20:	93 81       	ldd	r25, Z+3	; 0x03
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	3f ef       	ldi	r19, 0xFF	; 255
     e26:	4f e7       	ldi	r20, 0x7F	; 127
     e28:	57 e4       	ldi	r21, 0x47	; 71
     e2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e2e:	18 16       	cp	r1, r24
     e30:	0c f0       	brlt	.+2      	; 0xe34 <main+0x29a>
     e32:	43 c0       	rjmp	.+134    	; 0xeba <main+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e34:	fe 01       	movw	r30, r28
     e36:	e7 57       	subi	r30, 0x77	; 119
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	60 81       	ld	r22, Z
     e3c:	71 81       	ldd	r23, Z+1	; 0x01
     e3e:	82 81       	ldd	r24, Z+2	; 0x02
     e40:	93 81       	ldd	r25, Z+3	; 0x03
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e2       	ldi	r20, 0x20	; 32
     e48:	51 e4       	ldi	r21, 0x41	; 65
     e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e4e:	dc 01       	movw	r26, r24
     e50:	cb 01       	movw	r24, r22
     e52:	8e 01       	movw	r16, r28
     e54:	0d 57       	subi	r16, 0x7D	; 125
     e56:	1f 4f       	sbci	r17, 0xFF	; 255
     e58:	bc 01       	movw	r22, r24
     e5a:	cd 01       	movw	r24, r26
     e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	f8 01       	movw	r30, r16
     e66:	91 83       	std	Z+1, r25	; 0x01
     e68:	80 83       	st	Z, r24
     e6a:	1f c0       	rjmp	.+62     	; 0xeaa <main+0x310>
     e6c:	fe 01       	movw	r30, r28
     e6e:	ef 57       	subi	r30, 0x7F	; 127
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	89 e1       	ldi	r24, 0x19	; 25
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	91 83       	std	Z+1, r25	; 0x01
     e78:	80 83       	st	Z, r24
     e7a:	fe 01       	movw	r30, r28
     e7c:	ef 57       	subi	r30, 0x7F	; 127
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	80 81       	ld	r24, Z
     e82:	91 81       	ldd	r25, Z+1	; 0x01
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	f1 f7       	brne	.-4      	; 0xe84 <main+0x2ea>
     e88:	fe 01       	movw	r30, r28
     e8a:	ef 57       	subi	r30, 0x7F	; 127
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	91 83       	std	Z+1, r25	; 0x01
     e90:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e92:	de 01       	movw	r26, r28
     e94:	ad 57       	subi	r26, 0x7D	; 125
     e96:	bf 4f       	sbci	r27, 0xFF	; 255
     e98:	fe 01       	movw	r30, r28
     e9a:	ed 57       	subi	r30, 0x7D	; 125
     e9c:	ff 4f       	sbci	r31, 0xFF	; 255
     e9e:	80 81       	ld	r24, Z
     ea0:	91 81       	ldd	r25, Z+1	; 0x01
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	11 96       	adiw	r26, 0x01	; 1
     ea6:	9c 93       	st	X, r25
     ea8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eaa:	fe 01       	movw	r30, r28
     eac:	ed 57       	subi	r30, 0x7D	; 125
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	d1 f6       	brne	.-76     	; 0xe6c <main+0x2d2>
     eb8:	27 c0       	rjmp	.+78     	; 0xf08 <main+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eba:	8e 01       	movw	r16, r28
     ebc:	0d 57       	subi	r16, 0x7D	; 125
     ebe:	1f 4f       	sbci	r17, 0xFF	; 255
     ec0:	fe 01       	movw	r30, r28
     ec2:	eb 57       	subi	r30, 0x7B	; 123
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	60 81       	ld	r22, Z
     ec8:	71 81       	ldd	r23, Z+1	; 0x01
     eca:	82 81       	ldd	r24, Z+2	; 0x02
     ecc:	93 81       	ldd	r25, Z+3	; 0x03
     ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed2:	dc 01       	movw	r26, r24
     ed4:	cb 01       	movw	r24, r22
     ed6:	f8 01       	movw	r30, r16
     ed8:	91 83       	std	Z+1, r25	; 0x01
     eda:	80 83       	st	Z, r24
     edc:	de 01       	movw	r26, r28
     ede:	a1 58       	subi	r26, 0x81	; 129
     ee0:	bf 4f       	sbci	r27, 0xFF	; 255
     ee2:	fe 01       	movw	r30, r28
     ee4:	ed 57       	subi	r30, 0x7D	; 125
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	80 81       	ld	r24, Z
     eea:	91 81       	ldd	r25, Z+1	; 0x01
     eec:	8d 93       	st	X+, r24
     eee:	9c 93       	st	X, r25
     ef0:	fe 01       	movw	r30, r28
     ef2:	e1 58       	subi	r30, 0x81	; 129
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	80 81       	ld	r24, Z
     ef8:	91 81       	ldd	r25, Z+1	; 0x01
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	f1 f7       	brne	.-4      	; 0xefa <main+0x360>
     efe:	fe 01       	movw	r30, r28
     f00:	e1 58       	subi	r30, 0x81	; 129
     f02:	ff 4f       	sbci	r31, 0xFF	; 255
     f04:	91 83       	std	Z+1, r25	; 0x01
     f06:	80 83       	st	Z, r24
			_delay_ms(500);
			LCD_intgerToString(numPressed);
     f08:	fe 01       	movw	r30, r28
     f0a:	e1 56       	subi	r30, 0x61	; 97
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	80 81       	ld	r24, Z
     f10:	88 2f       	mov	r24, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <LCD_intgerToString>
			//store this number in an array
			passArr1[counter]=numPressed;
     f18:	fe 01       	movw	r30, r28
     f1a:	eb 55       	subi	r30, 0x5B	; 91
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	80 81       	ld	r24, Z
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	ce 01       	movw	r24, r28
     f26:	8a 55       	subi	r24, 0x5A	; 90
     f28:	9f 4f       	sbci	r25, 0xFF	; 255
     f2a:	dc 01       	movw	r26, r24
     f2c:	a2 0f       	add	r26, r18
     f2e:	b3 1f       	adc	r27, r19
     f30:	fe 01       	movw	r30, r28
     f32:	e1 56       	subi	r30, 0x61	; 97
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	80 81       	ld	r24, Z
     f38:	8c 93       	st	X, r24
		LCD_displayStringRowColumn(0,0,"Set Pass");
		LCD_displayStringRowColumn(1,0,"Pass:");
		LCD_goToRowColumn(1,6);

		//Enter password of 3 numbers
		for(counter = 0 ; counter < 3 ; counter++)
     f3a:	de 01       	movw	r26, r28
     f3c:	ab 55       	subi	r26, 0x5B	; 91
     f3e:	bf 4f       	sbci	r27, 0xFF	; 255
     f40:	fe 01       	movw	r30, r28
     f42:	eb 55       	subi	r30, 0x5B	; 91
     f44:	ff 4f       	sbci	r31, 0xFF	; 255
     f46:	80 81       	ld	r24, Z
     f48:	8f 5f       	subi	r24, 0xFF	; 255
     f4a:	8c 93       	st	X, r24
     f4c:	fe 01       	movw	r30, r28
     f4e:	eb 55       	subi	r30, 0x5B	; 91
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	80 81       	ld	r24, Z
     f54:	83 30       	cpi	r24, 0x03	; 3
     f56:	08 f4       	brcc	.+2      	; 0xf5a <main+0x3c0>
     f58:	1e cf       	rjmp	.-452    	; 0xd96 <main+0x1fc>

		//Verifying the password
		do
		{
			//_delay_ms(500);
			passFlag=0;
     f5a:	fe 01       	movw	r30, r28
     f5c:	e4 56       	subi	r30, 0x64	; 100
     f5e:	ff 4f       	sbci	r31, 0xFF	; 255
     f60:	10 82       	st	Z, r1
			noOfPasswordSetting++;
     f62:	de 01       	movw	r26, r28
     f64:	af 55       	subi	r26, 0x5F	; 95
     f66:	bf 4f       	sbci	r27, 0xFF	; 255
     f68:	fe 01       	movw	r30, r28
     f6a:	ef 55       	subi	r30, 0x5F	; 95
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	80 81       	ld	r24, Z
     f70:	8f 5f       	subi	r24, 0xFF	; 255
     f72:	8c 93       	st	X, r24
			LCD_clearScreen();
     f74:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Set Pass again");
     f78:	2f e6       	ldi	r18, 0x6F	; 111
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	a9 01       	movw	r20, r18
     f82:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"Pass:");
     f86:	29 e6       	ldi	r18, 0x69	; 105
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	a9 01       	movw	r20, r18
     f90:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_displayStringRowColumn>
			LCD_goToRowColumn(1,6);
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	66 e0       	ldi	r22, 0x06	; 6
     f98:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_goToRowColumn>

			for(counter = 0 ; counter < 3 ; counter++)
     f9c:	fe 01       	movw	r30, r28
     f9e:	eb 55       	subi	r30, 0x5B	; 91
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	10 82       	st	Z, r1
     fa4:	db c0       	rjmp	.+438    	; 0x115c <main+0x5c2>
			{
				//_delay_ms(1000);
				//get number preesed
			    numPressed = KeyPad_getPressedKey();
     fa6:	0e 94 15 10 	call	0x202a	; 0x202a <KeyPad_getPressedKey>
     faa:	fe 01       	movw	r30, r28
     fac:	e1 56       	subi	r30, 0x61	; 97
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	80 83       	st	Z, r24
     fb2:	fe 01       	movw	r30, r28
     fb4:	e5 58       	subi	r30, 0x85	; 133
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	aa ef       	ldi	r26, 0xFA	; 250
     fbe:	b3 e4       	ldi	r27, 0x43	; 67
     fc0:	80 83       	st	Z, r24
     fc2:	91 83       	std	Z+1, r25	; 0x01
     fc4:	a2 83       	std	Z+2, r26	; 0x02
     fc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc8:	8e 01       	movw	r16, r28
     fca:	09 58       	subi	r16, 0x89	; 137
     fcc:	1f 4f       	sbci	r17, 0xFF	; 255
     fce:	fe 01       	movw	r30, r28
     fd0:	e5 58       	subi	r30, 0x85	; 133
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	60 81       	ld	r22, Z
     fd6:	71 81       	ldd	r23, Z+1	; 0x01
     fd8:	82 81       	ldd	r24, Z+2	; 0x02
     fda:	93 81       	ldd	r25, Z+3	; 0x03
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	4a e7       	ldi	r20, 0x7A	; 122
     fe2:	53 e4       	ldi	r21, 0x43	; 67
     fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	f8 01       	movw	r30, r16
     fee:	80 83       	st	Z, r24
     ff0:	91 83       	std	Z+1, r25	; 0x01
     ff2:	a2 83       	std	Z+2, r26	; 0x02
     ff4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ff6:	fe 01       	movw	r30, r28
     ff8:	e9 58       	subi	r30, 0x89	; 137
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	60 81       	ld	r22, Z
     ffe:	71 81       	ldd	r23, Z+1	; 0x01
    1000:	82 81       	ldd	r24, Z+2	; 0x02
    1002:	93 81       	ldd	r25, Z+3	; 0x03
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e8       	ldi	r20, 0x80	; 128
    100a:	5f e3       	ldi	r21, 0x3F	; 63
    100c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1010:	88 23       	and	r24, r24
    1012:	44 f4       	brge	.+16     	; 0x1024 <main+0x48a>
		__ticks = 1;
    1014:	fe 01       	movw	r30, r28
    1016:	eb 58       	subi	r30, 0x8B	; 139
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	91 83       	std	Z+1, r25	; 0x01
    1020:	80 83       	st	Z, r24
    1022:	64 c0       	rjmp	.+200    	; 0x10ec <main+0x552>
	else if (__tmp > 65535)
    1024:	fe 01       	movw	r30, r28
    1026:	e9 58       	subi	r30, 0x89	; 137
    1028:	ff 4f       	sbci	r31, 0xFF	; 255
    102a:	60 81       	ld	r22, Z
    102c:	71 81       	ldd	r23, Z+1	; 0x01
    102e:	82 81       	ldd	r24, Z+2	; 0x02
    1030:	93 81       	ldd	r25, Z+3	; 0x03
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	3f ef       	ldi	r19, 0xFF	; 255
    1036:	4f e7       	ldi	r20, 0x7F	; 127
    1038:	57 e4       	ldi	r21, 0x47	; 71
    103a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    103e:	18 16       	cp	r1, r24
    1040:	0c f0       	brlt	.+2      	; 0x1044 <main+0x4aa>
    1042:	43 c0       	rjmp	.+134    	; 0x10ca <main+0x530>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1044:	fe 01       	movw	r30, r28
    1046:	e5 58       	subi	r30, 0x85	; 133
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	60 81       	ld	r22, Z
    104c:	71 81       	ldd	r23, Z+1	; 0x01
    104e:	82 81       	ldd	r24, Z+2	; 0x02
    1050:	93 81       	ldd	r25, Z+3	; 0x03
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e2       	ldi	r20, 0x20	; 32
    1058:	51 e4       	ldi	r21, 0x41	; 65
    105a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	8e 01       	movw	r16, r28
    1064:	0b 58       	subi	r16, 0x8B	; 139
    1066:	1f 4f       	sbci	r17, 0xFF	; 255
    1068:	bc 01       	movw	r22, r24
    106a:	cd 01       	movw	r24, r26
    106c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
    1074:	f8 01       	movw	r30, r16
    1076:	91 83       	std	Z+1, r25	; 0x01
    1078:	80 83       	st	Z, r24
    107a:	1f c0       	rjmp	.+62     	; 0x10ba <main+0x520>
    107c:	fe 01       	movw	r30, r28
    107e:	ed 58       	subi	r30, 0x8D	; 141
    1080:	ff 4f       	sbci	r31, 0xFF	; 255
    1082:	89 e1       	ldi	r24, 0x19	; 25
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	91 83       	std	Z+1, r25	; 0x01
    1088:	80 83       	st	Z, r24
    108a:	fe 01       	movw	r30, r28
    108c:	ed 58       	subi	r30, 0x8D	; 141
    108e:	ff 4f       	sbci	r31, 0xFF	; 255
    1090:	80 81       	ld	r24, Z
    1092:	91 81       	ldd	r25, Z+1	; 0x01
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	f1 f7       	brne	.-4      	; 0x1094 <main+0x4fa>
    1098:	fe 01       	movw	r30, r28
    109a:	ed 58       	subi	r30, 0x8D	; 141
    109c:	ff 4f       	sbci	r31, 0xFF	; 255
    109e:	91 83       	std	Z+1, r25	; 0x01
    10a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a2:	de 01       	movw	r26, r28
    10a4:	ab 58       	subi	r26, 0x8B	; 139
    10a6:	bf 4f       	sbci	r27, 0xFF	; 255
    10a8:	fe 01       	movw	r30, r28
    10aa:	eb 58       	subi	r30, 0x8B	; 139
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	80 81       	ld	r24, Z
    10b0:	91 81       	ldd	r25, Z+1	; 0x01
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	11 96       	adiw	r26, 0x01	; 1
    10b6:	9c 93       	st	X, r25
    10b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ba:	fe 01       	movw	r30, r28
    10bc:	eb 58       	subi	r30, 0x8B	; 139
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	80 81       	ld	r24, Z
    10c2:	91 81       	ldd	r25, Z+1	; 0x01
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	d1 f6       	brne	.-76     	; 0x107c <main+0x4e2>
    10c8:	27 c0       	rjmp	.+78     	; 0x1118 <main+0x57e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ca:	8e 01       	movw	r16, r28
    10cc:	0b 58       	subi	r16, 0x8B	; 139
    10ce:	1f 4f       	sbci	r17, 0xFF	; 255
    10d0:	fe 01       	movw	r30, r28
    10d2:	e9 58       	subi	r30, 0x89	; 137
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	60 81       	ld	r22, Z
    10d8:	71 81       	ldd	r23, Z+1	; 0x01
    10da:	82 81       	ldd	r24, Z+2	; 0x02
    10dc:	93 81       	ldd	r25, Z+3	; 0x03
    10de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	f8 01       	movw	r30, r16
    10e8:	91 83       	std	Z+1, r25	; 0x01
    10ea:	80 83       	st	Z, r24
    10ec:	de 01       	movw	r26, r28
    10ee:	af 58       	subi	r26, 0x8F	; 143
    10f0:	bf 4f       	sbci	r27, 0xFF	; 255
    10f2:	fe 01       	movw	r30, r28
    10f4:	eb 58       	subi	r30, 0x8B	; 139
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	80 81       	ld	r24, Z
    10fa:	91 81       	ldd	r25, Z+1	; 0x01
    10fc:	8d 93       	st	X+, r24
    10fe:	9c 93       	st	X, r25
    1100:	fe 01       	movw	r30, r28
    1102:	ef 58       	subi	r30, 0x8F	; 143
    1104:	ff 4f       	sbci	r31, 0xFF	; 255
    1106:	80 81       	ld	r24, Z
    1108:	91 81       	ldd	r25, Z+1	; 0x01
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	f1 f7       	brne	.-4      	; 0x110a <main+0x570>
    110e:	fe 01       	movw	r30, r28
    1110:	ef 58       	subi	r30, 0x8F	; 143
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	91 83       	std	Z+1, r25	; 0x01
    1116:	80 83       	st	Z, r24
				_delay_ms(500);
				LCD_intgerToString(numPressed);
    1118:	fe 01       	movw	r30, r28
    111a:	e1 56       	subi	r30, 0x61	; 97
    111c:	ff 4f       	sbci	r31, 0xFF	; 255
    111e:	80 81       	ld	r24, Z
    1120:	88 2f       	mov	r24, r24
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <LCD_intgerToString>
				//store this number in an array
				passArr2[counter]=numPressed;
    1128:	fe 01       	movw	r30, r28
    112a:	eb 55       	subi	r30, 0x5B	; 91
    112c:	ff 4f       	sbci	r31, 0xFF	; 255
    112e:	80 81       	ld	r24, Z
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	ce 01       	movw	r24, r28
    1136:	87 55       	subi	r24, 0x57	; 87
    1138:	9f 4f       	sbci	r25, 0xFF	; 255
    113a:	dc 01       	movw	r26, r24
    113c:	a2 0f       	add	r26, r18
    113e:	b3 1f       	adc	r27, r19
    1140:	fe 01       	movw	r30, r28
    1142:	e1 56       	subi	r30, 0x61	; 97
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	80 81       	ld	r24, Z
    1148:	8c 93       	st	X, r24
			LCD_clearScreen();
			LCD_displayStringRowColumn(0,0,"Set Pass again");
			LCD_displayStringRowColumn(1,0,"Pass:");
			LCD_goToRowColumn(1,6);

			for(counter = 0 ; counter < 3 ; counter++)
    114a:	de 01       	movw	r26, r28
    114c:	ab 55       	subi	r26, 0x5B	; 91
    114e:	bf 4f       	sbci	r27, 0xFF	; 255
    1150:	fe 01       	movw	r30, r28
    1152:	eb 55       	subi	r30, 0x5B	; 91
    1154:	ff 4f       	sbci	r31, 0xFF	; 255
    1156:	80 81       	ld	r24, Z
    1158:	8f 5f       	subi	r24, 0xFF	; 255
    115a:	8c 93       	st	X, r24
    115c:	fe 01       	movw	r30, r28
    115e:	eb 55       	subi	r30, 0x5B	; 91
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	80 81       	ld	r24, Z
    1164:	83 30       	cpi	r24, 0x03	; 3
    1166:	08 f4       	brcc	.+2      	; 0x116a <main+0x5d0>
    1168:	1e cf       	rjmp	.-452    	; 0xfa6 <main+0x40c>
				//store this number in an array
				passArr2[counter]=numPressed;
			}

			//Make sure the Re-entered password is matching the 1st one
			for ( counter = 0 ; counter<3 ; counter ++)
    116a:	fe 01       	movw	r30, r28
    116c:	eb 55       	subi	r30, 0x5B	; 91
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	10 82       	st	Z, r1
    1172:	2a c0       	rjmp	.+84     	; 0x11c8 <main+0x62e>
			{
				if (passArr1[counter] != passArr2[counter])
    1174:	fe 01       	movw	r30, r28
    1176:	eb 55       	subi	r30, 0x5B	; 91
    1178:	ff 4f       	sbci	r31, 0xFF	; 255
    117a:	80 81       	ld	r24, Z
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	ce 01       	movw	r24, r28
    1182:	8a 55       	subi	r24, 0x5A	; 90
    1184:	9f 4f       	sbci	r25, 0xFF	; 255
    1186:	fc 01       	movw	r30, r24
    1188:	e2 0f       	add	r30, r18
    118a:	f3 1f       	adc	r31, r19
    118c:	40 81       	ld	r20, Z
    118e:	fe 01       	movw	r30, r28
    1190:	eb 55       	subi	r30, 0x5B	; 91
    1192:	ff 4f       	sbci	r31, 0xFF	; 255
    1194:	80 81       	ld	r24, Z
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	ce 01       	movw	r24, r28
    119c:	87 55       	subi	r24, 0x57	; 87
    119e:	9f 4f       	sbci	r25, 0xFF	; 255
    11a0:	fc 01       	movw	r30, r24
    11a2:	e2 0f       	add	r30, r18
    11a4:	f3 1f       	adc	r31, r19
    11a6:	80 81       	ld	r24, Z
    11a8:	48 17       	cp	r20, r24
    11aa:	29 f0       	breq	.+10     	; 0x11b6 <main+0x61c>
				{
					passFlag=1;
    11ac:	fe 01       	movw	r30, r28
    11ae:	e4 56       	subi	r30, 0x64	; 100
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	80 83       	st	Z, r24
				//store this number in an array
				passArr2[counter]=numPressed;
			}

			//Make sure the Re-entered password is matching the 1st one
			for ( counter = 0 ; counter<3 ; counter ++)
    11b6:	de 01       	movw	r26, r28
    11b8:	ab 55       	subi	r26, 0x5B	; 91
    11ba:	bf 4f       	sbci	r27, 0xFF	; 255
    11bc:	fe 01       	movw	r30, r28
    11be:	eb 55       	subi	r30, 0x5B	; 91
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	80 81       	ld	r24, Z
    11c4:	8f 5f       	subi	r24, 0xFF	; 255
    11c6:	8c 93       	st	X, r24
    11c8:	fe 01       	movw	r30, r28
    11ca:	eb 55       	subi	r30, 0x5B	; 91
    11cc:	ff 4f       	sbci	r31, 0xFF	; 255
    11ce:	80 81       	ld	r24, Z
    11d0:	83 30       	cpi	r24, 0x03	; 3
    11d2:	80 f2       	brcs	.-96     	; 0x1174 <main+0x5da>
				}
			}
		}
		//Re-enter the same password if the he didnot verified the first password
		//and the number of password setting is < 3
		while (noOfPasswordSetting < 3 &&  passFlag==1);
    11d4:	fe 01       	movw	r30, r28
    11d6:	ef 55       	subi	r30, 0x5F	; 95
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	80 81       	ld	r24, Z
    11dc:	83 30       	cpi	r24, 0x03	; 3
    11de:	38 f4       	brcc	.+14     	; 0x11ee <main+0x654>
    11e0:	fe 01       	movw	r30, r28
    11e2:	e4 56       	subi	r30, 0x64	; 100
    11e4:	ff 4f       	sbci	r31, 0xFF	; 255
    11e6:	80 81       	ld	r24, Z
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	09 f4       	brne	.+2      	; 0x11ee <main+0x654>
    11ec:	b6 ce       	rjmp	.-660    	; 0xf5a <main+0x3c0>

	}
	while ( passFlag == 1); // if the two password aren't same after 4 times of entering the second one
    11ee:	fe 01       	movw	r30, r28
    11f0:	e4 56       	subi	r30, 0x64	; 100
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	80 81       	ld	r24, Z
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	09 f4       	brne	.+2      	; 0x11fc <main+0x662>
    11fa:	fd cc       	rjmp	.-1542   	; 0xbf6 <main+0x5c>
	//Hand Shaking
	while (UART_recieveByte() != START) {} //WAITINTG UNTILL THE 2ND MC BECOME AVAILABLE

	_delay_ms(1000);
	*/
	LCD_clearScreen();
    11fc:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"OK");
    1200:	2e e7       	ldi	r18, 0x7E	; 126
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	a9 01       	movw	r20, r18
    120a:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_displayStringRowColumn>




	//making the password as 1-bytenumber not as an array
	for (counter = 0 ; counter <3 ; counter ++)
    120e:	fe 01       	movw	r30, r28
    1210:	eb 55       	subi	r30, 0x5B	; 91
    1212:	ff 4f       	sbci	r31, 0xFF	; 255
    1214:	10 82       	st	Z, r1
    1216:	29 c0       	rjmp	.+82     	; 0x126a <main+0x6d0>
	{
		password1 += passArr1[counter] * getPow(counter , 10);
    1218:	fe 01       	movw	r30, r28
    121a:	eb 55       	subi	r30, 0x5B	; 91
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	80 81       	ld	r24, Z
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	ce 01       	movw	r24, r28
    1226:	8a 55       	subi	r24, 0x5A	; 90
    1228:	9f 4f       	sbci	r25, 0xFF	; 255
    122a:	fc 01       	movw	r30, r24
    122c:	e2 0f       	add	r30, r18
    122e:	f3 1f       	adc	r31, r19
    1230:	10 81       	ld	r17, Z
    1232:	fe 01       	movw	r30, r28
    1234:	eb 55       	subi	r30, 0x5B	; 91
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	80 81       	ld	r24, Z
    123a:	6a e0       	ldi	r22, 0x0A	; 10
    123c:	0e 94 a3 05 	call	0xb46	; 0xb46 <getPow>
    1240:	18 9f       	mul	r17, r24
    1242:	90 2d       	mov	r25, r0
    1244:	11 24       	eor	r1, r1
    1246:	de 01       	movw	r26, r28
    1248:	ac 55       	subi	r26, 0x5C	; 92
    124a:	bf 4f       	sbci	r27, 0xFF	; 255
    124c:	fe 01       	movw	r30, r28
    124e:	ec 55       	subi	r30, 0x5C	; 92
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	80 81       	ld	r24, Z
    1254:	89 0f       	add	r24, r25
    1256:	8c 93       	st	X, r24




	//making the password as 1-bytenumber not as an array
	for (counter = 0 ; counter <3 ; counter ++)
    1258:	de 01       	movw	r26, r28
    125a:	ab 55       	subi	r26, 0x5B	; 91
    125c:	bf 4f       	sbci	r27, 0xFF	; 255
    125e:	fe 01       	movw	r30, r28
    1260:	eb 55       	subi	r30, 0x5B	; 91
    1262:	ff 4f       	sbci	r31, 0xFF	; 255
    1264:	80 81       	ld	r24, Z
    1266:	8f 5f       	subi	r24, 0xFF	; 255
    1268:	8c 93       	st	X, r24
    126a:	fe 01       	movw	r30, r28
    126c:	eb 55       	subi	r30, 0x5B	; 91
    126e:	ff 4f       	sbci	r31, 0xFF	; 255
    1270:	80 81       	ld	r24, Z
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	88 f2       	brcs	.-94     	; 0x1218 <main+0x67e>
    1276:	fe 01       	movw	r30, r28
    1278:	e3 59       	subi	r30, 0x93	; 147
    127a:	ff 4f       	sbci	r31, 0xFF	; 255
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	aa ef       	ldi	r26, 0xFA	; 250
    1282:	b3 e4       	ldi	r27, 0x43	; 67
    1284:	80 83       	st	Z, r24
    1286:	91 83       	std	Z+1, r25	; 0x01
    1288:	a2 83       	std	Z+2, r26	; 0x02
    128a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    128c:	8e 01       	movw	r16, r28
    128e:	07 59       	subi	r16, 0x97	; 151
    1290:	1f 4f       	sbci	r17, 0xFF	; 255
    1292:	fe 01       	movw	r30, r28
    1294:	e3 59       	subi	r30, 0x93	; 147
    1296:	ff 4f       	sbci	r31, 0xFF	; 255
    1298:	60 81       	ld	r22, Z
    129a:	71 81       	ldd	r23, Z+1	; 0x01
    129c:	82 81       	ldd	r24, Z+2	; 0x02
    129e:	93 81       	ldd	r25, Z+3	; 0x03
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	4a e7       	ldi	r20, 0x7A	; 122
    12a6:	53 e4       	ldi	r21, 0x43	; 67
    12a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	f8 01       	movw	r30, r16
    12b2:	80 83       	st	Z, r24
    12b4:	91 83       	std	Z+1, r25	; 0x01
    12b6:	a2 83       	std	Z+2, r26	; 0x02
    12b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12ba:	fe 01       	movw	r30, r28
    12bc:	e7 59       	subi	r30, 0x97	; 151
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	60 81       	ld	r22, Z
    12c2:	71 81       	ldd	r23, Z+1	; 0x01
    12c4:	82 81       	ldd	r24, Z+2	; 0x02
    12c6:	93 81       	ldd	r25, Z+3	; 0x03
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e8       	ldi	r20, 0x80	; 128
    12ce:	5f e3       	ldi	r21, 0x3F	; 63
    12d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12d4:	88 23       	and	r24, r24
    12d6:	44 f4       	brge	.+16     	; 0x12e8 <main+0x74e>
		__ticks = 1;
    12d8:	fe 01       	movw	r30, r28
    12da:	e9 59       	subi	r30, 0x99	; 153
    12dc:	ff 4f       	sbci	r31, 0xFF	; 255
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	91 83       	std	Z+1, r25	; 0x01
    12e4:	80 83       	st	Z, r24
    12e6:	64 c0       	rjmp	.+200    	; 0x13b0 <main+0x816>
	else if (__tmp > 65535)
    12e8:	fe 01       	movw	r30, r28
    12ea:	e7 59       	subi	r30, 0x97	; 151
    12ec:	ff 4f       	sbci	r31, 0xFF	; 255
    12ee:	60 81       	ld	r22, Z
    12f0:	71 81       	ldd	r23, Z+1	; 0x01
    12f2:	82 81       	ldd	r24, Z+2	; 0x02
    12f4:	93 81       	ldd	r25, Z+3	; 0x03
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	3f ef       	ldi	r19, 0xFF	; 255
    12fa:	4f e7       	ldi	r20, 0x7F	; 127
    12fc:	57 e4       	ldi	r21, 0x47	; 71
    12fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1302:	18 16       	cp	r1, r24
    1304:	0c f0       	brlt	.+2      	; 0x1308 <main+0x76e>
    1306:	43 c0       	rjmp	.+134    	; 0x138e <main+0x7f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1308:	fe 01       	movw	r30, r28
    130a:	e3 59       	subi	r30, 0x93	; 147
    130c:	ff 4f       	sbci	r31, 0xFF	; 255
    130e:	60 81       	ld	r22, Z
    1310:	71 81       	ldd	r23, Z+1	; 0x01
    1312:	82 81       	ldd	r24, Z+2	; 0x02
    1314:	93 81       	ldd	r25, Z+3	; 0x03
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e2       	ldi	r20, 0x20	; 32
    131c:	51 e4       	ldi	r21, 0x41	; 65
    131e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	8e 01       	movw	r16, r28
    1328:	09 59       	subi	r16, 0x99	; 153
    132a:	1f 4f       	sbci	r17, 0xFF	; 255
    132c:	bc 01       	movw	r22, r24
    132e:	cd 01       	movw	r24, r26
    1330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	f8 01       	movw	r30, r16
    133a:	91 83       	std	Z+1, r25	; 0x01
    133c:	80 83       	st	Z, r24
    133e:	1f c0       	rjmp	.+62     	; 0x137e <main+0x7e4>
    1340:	fe 01       	movw	r30, r28
    1342:	eb 59       	subi	r30, 0x9B	; 155
    1344:	ff 4f       	sbci	r31, 0xFF	; 255
    1346:	89 e1       	ldi	r24, 0x19	; 25
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	91 83       	std	Z+1, r25	; 0x01
    134c:	80 83       	st	Z, r24
    134e:	fe 01       	movw	r30, r28
    1350:	eb 59       	subi	r30, 0x9B	; 155
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	80 81       	ld	r24, Z
    1356:	91 81       	ldd	r25, Z+1	; 0x01
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	f1 f7       	brne	.-4      	; 0x1358 <main+0x7be>
    135c:	fe 01       	movw	r30, r28
    135e:	eb 59       	subi	r30, 0x9B	; 155
    1360:	ff 4f       	sbci	r31, 0xFF	; 255
    1362:	91 83       	std	Z+1, r25	; 0x01
    1364:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1366:	de 01       	movw	r26, r28
    1368:	a9 59       	subi	r26, 0x99	; 153
    136a:	bf 4f       	sbci	r27, 0xFF	; 255
    136c:	fe 01       	movw	r30, r28
    136e:	e9 59       	subi	r30, 0x99	; 153
    1370:	ff 4f       	sbci	r31, 0xFF	; 255
    1372:	80 81       	ld	r24, Z
    1374:	91 81       	ldd	r25, Z+1	; 0x01
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	11 96       	adiw	r26, 0x01	; 1
    137a:	9c 93       	st	X, r25
    137c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137e:	fe 01       	movw	r30, r28
    1380:	e9 59       	subi	r30, 0x99	; 153
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	80 81       	ld	r24, Z
    1386:	91 81       	ldd	r25, Z+1	; 0x01
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	d1 f6       	brne	.-76     	; 0x1340 <main+0x7a6>
    138c:	27 c0       	rjmp	.+78     	; 0x13dc <main+0x842>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138e:	8e 01       	movw	r16, r28
    1390:	09 59       	subi	r16, 0x99	; 153
    1392:	1f 4f       	sbci	r17, 0xFF	; 255
    1394:	fe 01       	movw	r30, r28
    1396:	e7 59       	subi	r30, 0x97	; 151
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	60 81       	ld	r22, Z
    139c:	71 81       	ldd	r23, Z+1	; 0x01
    139e:	82 81       	ldd	r24, Z+2	; 0x02
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	f8 01       	movw	r30, r16
    13ac:	91 83       	std	Z+1, r25	; 0x01
    13ae:	80 83       	st	Z, r24
    13b0:	de 01       	movw	r26, r28
    13b2:	ad 59       	subi	r26, 0x9D	; 157
    13b4:	bf 4f       	sbci	r27, 0xFF	; 255
    13b6:	fe 01       	movw	r30, r28
    13b8:	e9 59       	subi	r30, 0x99	; 153
    13ba:	ff 4f       	sbci	r31, 0xFF	; 255
    13bc:	80 81       	ld	r24, Z
    13be:	91 81       	ldd	r25, Z+1	; 0x01
    13c0:	8d 93       	st	X+, r24
    13c2:	9c 93       	st	X, r25
    13c4:	fe 01       	movw	r30, r28
    13c6:	ed 59       	subi	r30, 0x9D	; 157
    13c8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ca:	80 81       	ld	r24, Z
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <main+0x834>
    13d2:	fe 01       	movw	r30, r28
    13d4:	ed 59       	subi	r30, 0x9D	; 157
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	91 83       	std	Z+1, r25	; 0x01
    13da:	80 83       	st	Z, r24
	//sending the password to the 2nd Uart to store it
	UART_sendByte(password1); //sending the original password to the second MC
	*/

	//Storing the origina; passwordd in the EEPROM
	while(! EEPROM_writeByte(0x0311, password1) ) {} //inserting the pass in the EEPROM--
    13dc:	fe 01       	movw	r30, r28
    13de:	ec 55       	subi	r30, 0x5C	; 92
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	81 e1       	ldi	r24, 0x11	; 17
    13e4:	93 e0       	ldi	r25, 0x03	; 3
    13e6:	60 81       	ld	r22, Z
    13e8:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <EEPROM_writeByte>
    13ec:	88 23       	and	r24, r24
    13ee:	b1 f3       	breq	.-20     	; 0x13dc <main+0x842>
    13f0:	fe 01       	movw	r30, r28
    13f2:	e1 5a       	subi	r30, 0xA1	; 161
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	aa ef       	ldi	r26, 0xFA	; 250
    13fc:	b3 e4       	ldi	r27, 0x43	; 67
    13fe:	80 83       	st	Z, r24
    1400:	91 83       	std	Z+1, r25	; 0x01
    1402:	a2 83       	std	Z+2, r26	; 0x02
    1404:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1406:	8e 01       	movw	r16, r28
    1408:	05 5a       	subi	r16, 0xA5	; 165
    140a:	1f 4f       	sbci	r17, 0xFF	; 255
    140c:	fe 01       	movw	r30, r28
    140e:	e1 5a       	subi	r30, 0xA1	; 161
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	60 81       	ld	r22, Z
    1414:	71 81       	ldd	r23, Z+1	; 0x01
    1416:	82 81       	ldd	r24, Z+2	; 0x02
    1418:	93 81       	ldd	r25, Z+3	; 0x03
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	4a e7       	ldi	r20, 0x7A	; 122
    1420:	53 e4       	ldi	r21, 0x43	; 67
    1422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	f8 01       	movw	r30, r16
    142c:	80 83       	st	Z, r24
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	a2 83       	std	Z+2, r26	; 0x02
    1432:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1434:	fe 01       	movw	r30, r28
    1436:	e5 5a       	subi	r30, 0xA5	; 165
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	60 81       	ld	r22, Z
    143c:	71 81       	ldd	r23, Z+1	; 0x01
    143e:	82 81       	ldd	r24, Z+2	; 0x02
    1440:	93 81       	ldd	r25, Z+3	; 0x03
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e8       	ldi	r20, 0x80	; 128
    1448:	5f e3       	ldi	r21, 0x3F	; 63
    144a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    144e:	88 23       	and	r24, r24
    1450:	44 f4       	brge	.+16     	; 0x1462 <main+0x8c8>
		__ticks = 1;
    1452:	fe 01       	movw	r30, r28
    1454:	e7 5a       	subi	r30, 0xA7	; 167
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	91 83       	std	Z+1, r25	; 0x01
    145e:	80 83       	st	Z, r24
    1460:	64 c0       	rjmp	.+200    	; 0x152a <main+0x990>
	else if (__tmp > 65535)
    1462:	fe 01       	movw	r30, r28
    1464:	e5 5a       	subi	r30, 0xA5	; 165
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	60 81       	ld	r22, Z
    146a:	71 81       	ldd	r23, Z+1	; 0x01
    146c:	82 81       	ldd	r24, Z+2	; 0x02
    146e:	93 81       	ldd	r25, Z+3	; 0x03
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	3f ef       	ldi	r19, 0xFF	; 255
    1474:	4f e7       	ldi	r20, 0x7F	; 127
    1476:	57 e4       	ldi	r21, 0x47	; 71
    1478:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    147c:	18 16       	cp	r1, r24
    147e:	0c f0       	brlt	.+2      	; 0x1482 <main+0x8e8>
    1480:	43 c0       	rjmp	.+134    	; 0x1508 <main+0x96e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1482:	fe 01       	movw	r30, r28
    1484:	e1 5a       	subi	r30, 0xA1	; 161
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	60 81       	ld	r22, Z
    148a:	71 81       	ldd	r23, Z+1	; 0x01
    148c:	82 81       	ldd	r24, Z+2	; 0x02
    148e:	93 81       	ldd	r25, Z+3	; 0x03
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e2       	ldi	r20, 0x20	; 32
    1496:	51 e4       	ldi	r21, 0x41	; 65
    1498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	8e 01       	movw	r16, r28
    14a2:	07 5a       	subi	r16, 0xA7	; 167
    14a4:	1f 4f       	sbci	r17, 0xFF	; 255
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	f8 01       	movw	r30, r16
    14b4:	91 83       	std	Z+1, r25	; 0x01
    14b6:	80 83       	st	Z, r24
    14b8:	1f c0       	rjmp	.+62     	; 0x14f8 <main+0x95e>
    14ba:	fe 01       	movw	r30, r28
    14bc:	e9 5a       	subi	r30, 0xA9	; 169
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	89 e1       	ldi	r24, 0x19	; 25
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	91 83       	std	Z+1, r25	; 0x01
    14c6:	80 83       	st	Z, r24
    14c8:	fe 01       	movw	r30, r28
    14ca:	e9 5a       	subi	r30, 0xA9	; 169
    14cc:	ff 4f       	sbci	r31, 0xFF	; 255
    14ce:	80 81       	ld	r24, Z
    14d0:	91 81       	ldd	r25, Z+1	; 0x01
    14d2:	01 97       	sbiw	r24, 0x01	; 1
    14d4:	f1 f7       	brne	.-4      	; 0x14d2 <main+0x938>
    14d6:	fe 01       	movw	r30, r28
    14d8:	e9 5a       	subi	r30, 0xA9	; 169
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	91 83       	std	Z+1, r25	; 0x01
    14de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e0:	de 01       	movw	r26, r28
    14e2:	a7 5a       	subi	r26, 0xA7	; 167
    14e4:	bf 4f       	sbci	r27, 0xFF	; 255
    14e6:	fe 01       	movw	r30, r28
    14e8:	e7 5a       	subi	r30, 0xA7	; 167
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	80 81       	ld	r24, Z
    14ee:	91 81       	ldd	r25, Z+1	; 0x01
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	11 96       	adiw	r26, 0x01	; 1
    14f4:	9c 93       	st	X, r25
    14f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f8:	fe 01       	movw	r30, r28
    14fa:	e7 5a       	subi	r30, 0xA7	; 167
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	80 81       	ld	r24, Z
    1500:	91 81       	ldd	r25, Z+1	; 0x01
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	d1 f6       	brne	.-76     	; 0x14ba <main+0x920>
    1506:	27 c0       	rjmp	.+78     	; 0x1556 <main+0x9bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1508:	8e 01       	movw	r16, r28
    150a:	07 5a       	subi	r16, 0xA7	; 167
    150c:	1f 4f       	sbci	r17, 0xFF	; 255
    150e:	fe 01       	movw	r30, r28
    1510:	e5 5a       	subi	r30, 0xA5	; 165
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	60 81       	ld	r22, Z
    1516:	71 81       	ldd	r23, Z+1	; 0x01
    1518:	82 81       	ldd	r24, Z+2	; 0x02
    151a:	93 81       	ldd	r25, Z+3	; 0x03
    151c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	f8 01       	movw	r30, r16
    1526:	91 83       	std	Z+1, r25	; 0x01
    1528:	80 83       	st	Z, r24
    152a:	de 01       	movw	r26, r28
    152c:	ab 5a       	subi	r26, 0xAB	; 171
    152e:	bf 4f       	sbci	r27, 0xFF	; 255
    1530:	fe 01       	movw	r30, r28
    1532:	e7 5a       	subi	r30, 0xA7	; 167
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	80 81       	ld	r24, Z
    1538:	91 81       	ldd	r25, Z+1	; 0x01
    153a:	8d 93       	st	X+, r24
    153c:	9c 93       	st	X, r25
    153e:	fe 01       	movw	r30, r28
    1540:	eb 5a       	subi	r30, 0xAB	; 171
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	80 81       	ld	r24, Z
    1546:	91 81       	ldd	r25, Z+1	; 0x01
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	f1 f7       	brne	.-4      	; 0x1548 <main+0x9ae>
    154c:	fe 01       	movw	r30, r28
    154e:	eb 5a       	subi	r30, 0xAB	; 171
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	91 83       	std	Z+1, r25	; 0x01
    1554:	80 83       	st	Z, r24
		/*test
		PORTB |= (1<<test);
		//PORTB |= 1<<PB1;*/


		noOfPasswordEntering = 0; // initialize the process
    1556:	fe 01       	movw	r30, r28
    1558:	e0 56       	subi	r30, 0x60	; 96
    155a:	ff 4f       	sbci	r31, 0xFF	; 255
    155c:	10 82       	st	Z, r1
    155e:	fe 01       	movw	r30, r28
    1560:	ef 5a       	subi	r30, 0xAF	; 175
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	aa ef       	ldi	r26, 0xFA	; 250
    156a:	b3 e4       	ldi	r27, 0x43	; 67
    156c:	80 83       	st	Z, r24
    156e:	91 83       	std	Z+1, r25	; 0x01
    1570:	a2 83       	std	Z+2, r26	; 0x02
    1572:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1574:	8e 01       	movw	r16, r28
    1576:	03 5b       	subi	r16, 0xB3	; 179
    1578:	1f 4f       	sbci	r17, 0xFF	; 255
    157a:	fe 01       	movw	r30, r28
    157c:	ef 5a       	subi	r30, 0xAF	; 175
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	60 81       	ld	r22, Z
    1582:	71 81       	ldd	r23, Z+1	; 0x01
    1584:	82 81       	ldd	r24, Z+2	; 0x02
    1586:	93 81       	ldd	r25, Z+3	; 0x03
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	4a e7       	ldi	r20, 0x7A	; 122
    158e:	53 e4       	ldi	r21, 0x43	; 67
    1590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	f8 01       	movw	r30, r16
    159a:	80 83       	st	Z, r24
    159c:	91 83       	std	Z+1, r25	; 0x01
    159e:	a2 83       	std	Z+2, r26	; 0x02
    15a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15a2:	fe 01       	movw	r30, r28
    15a4:	e3 5b       	subi	r30, 0xB3	; 179
    15a6:	ff 4f       	sbci	r31, 0xFF	; 255
    15a8:	60 81       	ld	r22, Z
    15aa:	71 81       	ldd	r23, Z+1	; 0x01
    15ac:	82 81       	ldd	r24, Z+2	; 0x02
    15ae:	93 81       	ldd	r25, Z+3	; 0x03
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	40 e8       	ldi	r20, 0x80	; 128
    15b6:	5f e3       	ldi	r21, 0x3F	; 63
    15b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15bc:	88 23       	and	r24, r24
    15be:	44 f4       	brge	.+16     	; 0x15d0 <main+0xa36>
		__ticks = 1;
    15c0:	fe 01       	movw	r30, r28
    15c2:	e5 5b       	subi	r30, 0xB5	; 181
    15c4:	ff 4f       	sbci	r31, 0xFF	; 255
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	91 83       	std	Z+1, r25	; 0x01
    15cc:	80 83       	st	Z, r24
    15ce:	64 c0       	rjmp	.+200    	; 0x1698 <main+0xafe>
	else if (__tmp > 65535)
    15d0:	fe 01       	movw	r30, r28
    15d2:	e3 5b       	subi	r30, 0xB3	; 179
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	3f ef       	ldi	r19, 0xFF	; 255
    15e2:	4f e7       	ldi	r20, 0x7F	; 127
    15e4:	57 e4       	ldi	r21, 0x47	; 71
    15e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ea:	18 16       	cp	r1, r24
    15ec:	0c f0       	brlt	.+2      	; 0x15f0 <main+0xa56>
    15ee:	43 c0       	rjmp	.+134    	; 0x1676 <main+0xadc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f0:	fe 01       	movw	r30, r28
    15f2:	ef 5a       	subi	r30, 0xAF	; 175
    15f4:	ff 4f       	sbci	r31, 0xFF	; 255
    15f6:	60 81       	ld	r22, Z
    15f8:	71 81       	ldd	r23, Z+1	; 0x01
    15fa:	82 81       	ldd	r24, Z+2	; 0x02
    15fc:	93 81       	ldd	r25, Z+3	; 0x03
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	40 e2       	ldi	r20, 0x20	; 32
    1604:	51 e4       	ldi	r21, 0x41	; 65
    1606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	8e 01       	movw	r16, r28
    1610:	05 5b       	subi	r16, 0xB5	; 181
    1612:	1f 4f       	sbci	r17, 0xFF	; 255
    1614:	bc 01       	movw	r22, r24
    1616:	cd 01       	movw	r24, r26
    1618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	f8 01       	movw	r30, r16
    1622:	91 83       	std	Z+1, r25	; 0x01
    1624:	80 83       	st	Z, r24
    1626:	1f c0       	rjmp	.+62     	; 0x1666 <main+0xacc>
    1628:	fe 01       	movw	r30, r28
    162a:	e7 5b       	subi	r30, 0xB7	; 183
    162c:	ff 4f       	sbci	r31, 0xFF	; 255
    162e:	89 e1       	ldi	r24, 0x19	; 25
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	91 83       	std	Z+1, r25	; 0x01
    1634:	80 83       	st	Z, r24
    1636:	fe 01       	movw	r30, r28
    1638:	e7 5b       	subi	r30, 0xB7	; 183
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	80 81       	ld	r24, Z
    163e:	91 81       	ldd	r25, Z+1	; 0x01
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <main+0xaa6>
    1644:	fe 01       	movw	r30, r28
    1646:	e7 5b       	subi	r30, 0xB7	; 183
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	91 83       	std	Z+1, r25	; 0x01
    164c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    164e:	de 01       	movw	r26, r28
    1650:	a5 5b       	subi	r26, 0xB5	; 181
    1652:	bf 4f       	sbci	r27, 0xFF	; 255
    1654:	fe 01       	movw	r30, r28
    1656:	e5 5b       	subi	r30, 0xB5	; 181
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	80 81       	ld	r24, Z
    165c:	91 81       	ldd	r25, Z+1	; 0x01
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	11 96       	adiw	r26, 0x01	; 1
    1662:	9c 93       	st	X, r25
    1664:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1666:	fe 01       	movw	r30, r28
    1668:	e5 5b       	subi	r30, 0xB5	; 181
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	80 81       	ld	r24, Z
    166e:	91 81       	ldd	r25, Z+1	; 0x01
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	d1 f6       	brne	.-76     	; 0x1628 <main+0xa8e>
    1674:	27 c0       	rjmp	.+78     	; 0x16c4 <main+0xb2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1676:	8e 01       	movw	r16, r28
    1678:	05 5b       	subi	r16, 0xB5	; 181
    167a:	1f 4f       	sbci	r17, 0xFF	; 255
    167c:	fe 01       	movw	r30, r28
    167e:	e3 5b       	subi	r30, 0xB3	; 179
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	60 81       	ld	r22, Z
    1684:	71 81       	ldd	r23, Z+1	; 0x01
    1686:	82 81       	ldd	r24, Z+2	; 0x02
    1688:	93 81       	ldd	r25, Z+3	; 0x03
    168a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	f8 01       	movw	r30, r16
    1694:	91 83       	std	Z+1, r25	; 0x01
    1696:	80 83       	st	Z, r24
    1698:	de 01       	movw	r26, r28
    169a:	a9 5b       	subi	r26, 0xB9	; 185
    169c:	bf 4f       	sbci	r27, 0xFF	; 255
    169e:	fe 01       	movw	r30, r28
    16a0:	e5 5b       	subi	r30, 0xB5	; 181
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	80 81       	ld	r24, Z
    16a6:	91 81       	ldd	r25, Z+1	; 0x01
    16a8:	8d 93       	st	X+, r24
    16aa:	9c 93       	st	X, r25
    16ac:	fe 01       	movw	r30, r28
    16ae:	e9 5b       	subi	r30, 0xB9	; 185
    16b0:	ff 4f       	sbci	r31, 0xFF	; 255
    16b2:	80 81       	ld	r24, Z
    16b4:	91 81       	ldd	r25, Z+1	; 0x01
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	f1 f7       	brne	.-4      	; 0x16b6 <main+0xb1c>
    16ba:	fe 01       	movw	r30, r28
    16bc:	e9 5b       	subi	r30, 0xB9	; 185
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	91 83       	std	Z+1, r25	; 0x01
    16c2:	80 83       	st	Z, r24

		do
		{

			_delay_ms(500);
			LCD_clearScreen();
    16c4:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Enter Pass");
    16c8:	21 e8       	ldi	r18, 0x81	; 129
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	60 e0       	ldi	r22, 0x00	; 0
    16d0:	a9 01       	movw	r20, r18
    16d2:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"Pass:");
    16d6:	29 e6       	ldi	r18, 0x69	; 105
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	a9 01       	movw	r20, r18
    16e0:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_displayStringRowColumn>
			//LCD_clearScreen();

			LCD_goToRowColumn(1,6);
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	66 e0       	ldi	r22, 0x06	; 6
    16e8:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_goToRowColumn>
			passIsTrue=0;
    16ec:	fe 01       	movw	r30, r28
    16ee:	e3 56       	subi	r30, 0x63	; 99
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	10 82       	st	Z, r1
			sentpassword=0;
    16f4:	fe 01       	movw	r30, r28
    16f6:	ee 55       	subi	r30, 0x5E	; 94
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	10 82       	st	Z, r1

			for(counter = 0 ; counter < 3 ; counter++)
    16fc:	fe 01       	movw	r30, r28
    16fe:	eb 55       	subi	r30, 0x5B	; 91
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	10 82       	st	Z, r1
    1704:	ad c0       	rjmp	.+346    	; 0x1860 <main+0xcc6>
			{
				//_delay_ms(1000);
				numPressed=KeyPad_getPressedKey();
    1706:	0e 94 15 10 	call	0x202a	; 0x202a <KeyPad_getPressedKey>
    170a:	fe 01       	movw	r30, r28
    170c:	e1 56       	subi	r30, 0x61	; 97
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	80 83       	st	Z, r24
    1712:	fe 01       	movw	r30, r28
    1714:	ed 5b       	subi	r30, 0xBD	; 189
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	aa ef       	ldi	r26, 0xFA	; 250
    171e:	b3 e4       	ldi	r27, 0x43	; 67
    1720:	80 83       	st	Z, r24
    1722:	91 83       	std	Z+1, r25	; 0x01
    1724:	a2 83       	std	Z+2, r26	; 0x02
    1726:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1728:	8e 01       	movw	r16, r28
    172a:	01 5c       	subi	r16, 0xC1	; 193
    172c:	1f 4f       	sbci	r17, 0xFF	; 255
    172e:	fe 01       	movw	r30, r28
    1730:	ed 5b       	subi	r30, 0xBD	; 189
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	60 81       	ld	r22, Z
    1736:	71 81       	ldd	r23, Z+1	; 0x01
    1738:	82 81       	ldd	r24, Z+2	; 0x02
    173a:	93 81       	ldd	r25, Z+3	; 0x03
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	4a e7       	ldi	r20, 0x7A	; 122
    1742:	53 e4       	ldi	r21, 0x43	; 67
    1744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	f8 01       	movw	r30, r16
    174e:	80 83       	st	Z, r24
    1750:	91 83       	std	Z+1, r25	; 0x01
    1752:	a2 83       	std	Z+2, r26	; 0x02
    1754:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1756:	fe 01       	movw	r30, r28
    1758:	ff 96       	adiw	r30, 0x3f	; 63
    175a:	60 81       	ld	r22, Z
    175c:	71 81       	ldd	r23, Z+1	; 0x01
    175e:	82 81       	ldd	r24, Z+2	; 0x02
    1760:	93 81       	ldd	r25, Z+3	; 0x03
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e8       	ldi	r20, 0x80	; 128
    1768:	5f e3       	ldi	r21, 0x3F	; 63
    176a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    176e:	88 23       	and	r24, r24
    1770:	2c f4       	brge	.+10     	; 0x177c <main+0xbe2>
		__ticks = 1;
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	9e af       	std	Y+62, r25	; 0x3e
    1778:	8d af       	std	Y+61, r24	; 0x3d
    177a:	46 c0       	rjmp	.+140    	; 0x1808 <main+0xc6e>
	else if (__tmp > 65535)
    177c:	fe 01       	movw	r30, r28
    177e:	ff 96       	adiw	r30, 0x3f	; 63
    1780:	60 81       	ld	r22, Z
    1782:	71 81       	ldd	r23, Z+1	; 0x01
    1784:	82 81       	ldd	r24, Z+2	; 0x02
    1786:	93 81       	ldd	r25, Z+3	; 0x03
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	3f ef       	ldi	r19, 0xFF	; 255
    178c:	4f e7       	ldi	r20, 0x7F	; 127
    178e:	57 e4       	ldi	r21, 0x47	; 71
    1790:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1794:	18 16       	cp	r1, r24
    1796:	64 f5       	brge	.+88     	; 0x17f0 <main+0xc56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1798:	fe 01       	movw	r30, r28
    179a:	ed 5b       	subi	r30, 0xBD	; 189
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	60 81       	ld	r22, Z
    17a0:	71 81       	ldd	r23, Z+1	; 0x01
    17a2:	82 81       	ldd	r24, Z+2	; 0x02
    17a4:	93 81       	ldd	r25, Z+3	; 0x03
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	40 e2       	ldi	r20, 0x20	; 32
    17ac:	51 e4       	ldi	r21, 0x41	; 65
    17ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	bc 01       	movw	r22, r24
    17b8:	cd 01       	movw	r24, r26
    17ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	9e af       	std	Y+62, r25	; 0x3e
    17c4:	8d af       	std	Y+61, r24	; 0x3d
    17c6:	0f c0       	rjmp	.+30     	; 0x17e6 <main+0xc4c>
    17c8:	89 e1       	ldi	r24, 0x19	; 25
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	9c af       	std	Y+60, r25	; 0x3c
    17ce:	8b af       	std	Y+59, r24	; 0x3b
    17d0:	8b ad       	ldd	r24, Y+59	; 0x3b
    17d2:	9c ad       	ldd	r25, Y+60	; 0x3c
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <main+0xc3a>
    17d8:	9c af       	std	Y+60, r25	; 0x3c
    17da:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    17de:	9e ad       	ldd	r25, Y+62	; 0x3e
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	9e af       	std	Y+62, r25	; 0x3e
    17e4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    17e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	69 f7       	brne	.-38     	; 0x17c8 <main+0xc2e>
    17ee:	16 c0       	rjmp	.+44     	; 0x181c <main+0xc82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f0:	fe 01       	movw	r30, r28
    17f2:	ff 96       	adiw	r30, 0x3f	; 63
    17f4:	60 81       	ld	r22, Z
    17f6:	71 81       	ldd	r23, Z+1	; 0x01
    17f8:	82 81       	ldd	r24, Z+2	; 0x02
    17fa:	93 81       	ldd	r25, Z+3	; 0x03
    17fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	9e af       	std	Y+62, r25	; 0x3e
    1806:	8d af       	std	Y+61, r24	; 0x3d
    1808:	8d ad       	ldd	r24, Y+61	; 0x3d
    180a:	9e ad       	ldd	r25, Y+62	; 0x3e
    180c:	9a af       	std	Y+58, r25	; 0x3a
    180e:	89 af       	std	Y+57, r24	; 0x39
    1810:	89 ad       	ldd	r24, Y+57	; 0x39
    1812:	9a ad       	ldd	r25, Y+58	; 0x3a
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	f1 f7       	brne	.-4      	; 0x1814 <main+0xc7a>
    1818:	9a af       	std	Y+58, r25	; 0x3a
    181a:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(500);
				LCD_intgerToString(numPressed);
    181c:	fe 01       	movw	r30, r28
    181e:	e1 56       	subi	r30, 0x61	; 97
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	80 81       	ld	r24, Z
    1824:	88 2f       	mov	r24, r24
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <LCD_intgerToString>
				passEntered[counter]=numPressed;
    182c:	fe 01       	movw	r30, r28
    182e:	eb 55       	subi	r30, 0x5B	; 91
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	80 81       	ld	r24, Z
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	ce 01       	movw	r24, r28
    183a:	84 55       	subi	r24, 0x54	; 84
    183c:	9f 4f       	sbci	r25, 0xFF	; 255
    183e:	dc 01       	movw	r26, r24
    1840:	a2 0f       	add	r26, r18
    1842:	b3 1f       	adc	r27, r19
    1844:	fe 01       	movw	r30, r28
    1846:	e1 56       	subi	r30, 0x61	; 97
    1848:	ff 4f       	sbci	r31, 0xFF	; 255
    184a:	80 81       	ld	r24, Z
    184c:	8c 93       	st	X, r24

			LCD_goToRowColumn(1,6);
			passIsTrue=0;
			sentpassword=0;

			for(counter = 0 ; counter < 3 ; counter++)
    184e:	de 01       	movw	r26, r28
    1850:	ab 55       	subi	r26, 0x5B	; 91
    1852:	bf 4f       	sbci	r27, 0xFF	; 255
    1854:	fe 01       	movw	r30, r28
    1856:	eb 55       	subi	r30, 0x5B	; 91
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	80 81       	ld	r24, Z
    185c:	8f 5f       	subi	r24, 0xFF	; 255
    185e:	8c 93       	st	X, r24
    1860:	fe 01       	movw	r30, r28
    1862:	eb 55       	subi	r30, 0x5B	; 91
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	80 81       	ld	r24, Z
    1868:	83 30       	cpi	r24, 0x03	; 3
    186a:	08 f4       	brcc	.+2      	; 0x186e <main+0xcd4>
    186c:	4c cf       	rjmp	.-360    	; 0x1706 <main+0xb6c>
				_delay_ms(500);
				LCD_intgerToString(numPressed);
				passEntered[counter]=numPressed;
			}

			for (counter = 0 ; counter <3 ; counter ++)
    186e:	fe 01       	movw	r30, r28
    1870:	eb 55       	subi	r30, 0x5B	; 91
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	10 82       	st	Z, r1
    1876:	29 c0       	rjmp	.+82     	; 0x18ca <main+0xd30>
			{
				sentpassword += passEntered[counter] * getPow(counter , 10);
    1878:	fe 01       	movw	r30, r28
    187a:	eb 55       	subi	r30, 0x5B	; 91
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	80 81       	ld	r24, Z
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	ce 01       	movw	r24, r28
    1886:	84 55       	subi	r24, 0x54	; 84
    1888:	9f 4f       	sbci	r25, 0xFF	; 255
    188a:	fc 01       	movw	r30, r24
    188c:	e2 0f       	add	r30, r18
    188e:	f3 1f       	adc	r31, r19
    1890:	10 81       	ld	r17, Z
    1892:	fe 01       	movw	r30, r28
    1894:	eb 55       	subi	r30, 0x5B	; 91
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	80 81       	ld	r24, Z
    189a:	6a e0       	ldi	r22, 0x0A	; 10
    189c:	0e 94 a3 05 	call	0xb46	; 0xb46 <getPow>
    18a0:	18 9f       	mul	r17, r24
    18a2:	90 2d       	mov	r25, r0
    18a4:	11 24       	eor	r1, r1
    18a6:	de 01       	movw	r26, r28
    18a8:	ae 55       	subi	r26, 0x5E	; 94
    18aa:	bf 4f       	sbci	r27, 0xFF	; 255
    18ac:	fe 01       	movw	r30, r28
    18ae:	ee 55       	subi	r30, 0x5E	; 94
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	80 81       	ld	r24, Z
    18b4:	89 0f       	add	r24, r25
    18b6:	8c 93       	st	X, r24
				_delay_ms(500);
				LCD_intgerToString(numPressed);
				passEntered[counter]=numPressed;
			}

			for (counter = 0 ; counter <3 ; counter ++)
    18b8:	de 01       	movw	r26, r28
    18ba:	ab 55       	subi	r26, 0x5B	; 91
    18bc:	bf 4f       	sbci	r27, 0xFF	; 255
    18be:	fe 01       	movw	r30, r28
    18c0:	eb 55       	subi	r30, 0x5B	; 91
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	80 81       	ld	r24, Z
    18c6:	8f 5f       	subi	r24, 0xFF	; 255
    18c8:	8c 93       	st	X, r24
    18ca:	fe 01       	movw	r30, r28
    18cc:	eb 55       	subi	r30, 0x5B	; 91
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	80 81       	ld	r24, Z
    18d2:	83 30       	cpi	r24, 0x03	; 3
    18d4:	88 f2       	brcs	.-94     	; 0x1878 <main+0xcde>
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	a0 e2       	ldi	r26, 0x20	; 32
    18dc:	b1 e4       	ldi	r27, 0x41	; 65
    18de:	8d ab       	std	Y+53, r24	; 0x35
    18e0:	9e ab       	std	Y+54, r25	; 0x36
    18e2:	af ab       	std	Y+55, r26	; 0x37
    18e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e6:	6d a9       	ldd	r22, Y+53	; 0x35
    18e8:	7e a9       	ldd	r23, Y+54	; 0x36
    18ea:	8f a9       	ldd	r24, Y+55	; 0x37
    18ec:	98 ad       	ldd	r25, Y+56	; 0x38
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	4a e7       	ldi	r20, 0x7A	; 122
    18f4:	53 e4       	ldi	r21, 0x43	; 67
    18f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	89 ab       	std	Y+49, r24	; 0x31
    1900:	9a ab       	std	Y+50, r25	; 0x32
    1902:	ab ab       	std	Y+51, r26	; 0x33
    1904:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1906:	69 a9       	ldd	r22, Y+49	; 0x31
    1908:	7a a9       	ldd	r23, Y+50	; 0x32
    190a:	8b a9       	ldd	r24, Y+51	; 0x33
    190c:	9c a9       	ldd	r25, Y+52	; 0x34
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	40 e8       	ldi	r20, 0x80	; 128
    1914:	5f e3       	ldi	r21, 0x3F	; 63
    1916:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    191a:	88 23       	and	r24, r24
    191c:	2c f4       	brge	.+10     	; 0x1928 <main+0xd8e>
		__ticks = 1;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	98 ab       	std	Y+48, r25	; 0x30
    1924:	8f a7       	std	Y+47, r24	; 0x2f
    1926:	3f c0       	rjmp	.+126    	; 0x19a6 <main+0xe0c>
	else if (__tmp > 65535)
    1928:	69 a9       	ldd	r22, Y+49	; 0x31
    192a:	7a a9       	ldd	r23, Y+50	; 0x32
    192c:	8b a9       	ldd	r24, Y+51	; 0x33
    192e:	9c a9       	ldd	r25, Y+52	; 0x34
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	3f ef       	ldi	r19, 0xFF	; 255
    1934:	4f e7       	ldi	r20, 0x7F	; 127
    1936:	57 e4       	ldi	r21, 0x47	; 71
    1938:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    193c:	18 16       	cp	r1, r24
    193e:	4c f5       	brge	.+82     	; 0x1992 <main+0xdf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1940:	6d a9       	ldd	r22, Y+53	; 0x35
    1942:	7e a9       	ldd	r23, Y+54	; 0x36
    1944:	8f a9       	ldd	r24, Y+55	; 0x37
    1946:	98 ad       	ldd	r25, Y+56	; 0x38
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	40 e2       	ldi	r20, 0x20	; 32
    194e:	51 e4       	ldi	r21, 0x41	; 65
    1950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	bc 01       	movw	r22, r24
    195a:	cd 01       	movw	r24, r26
    195c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	98 ab       	std	Y+48, r25	; 0x30
    1966:	8f a7       	std	Y+47, r24	; 0x2f
    1968:	0f c0       	rjmp	.+30     	; 0x1988 <main+0xdee>
    196a:	89 e1       	ldi	r24, 0x19	; 25
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	9e a7       	std	Y+46, r25	; 0x2e
    1970:	8d a7       	std	Y+45, r24	; 0x2d
    1972:	8d a5       	ldd	r24, Y+45	; 0x2d
    1974:	9e a5       	ldd	r25, Y+46	; 0x2e
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	f1 f7       	brne	.-4      	; 0x1976 <main+0xddc>
    197a:	9e a7       	std	Y+46, r25	; 0x2e
    197c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    197e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1980:	98 a9       	ldd	r25, Y+48	; 0x30
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	98 ab       	std	Y+48, r25	; 0x30
    1986:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1988:	8f a5       	ldd	r24, Y+47	; 0x2f
    198a:	98 a9       	ldd	r25, Y+48	; 0x30
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	69 f7       	brne	.-38     	; 0x196a <main+0xdd0>
    1990:	14 c0       	rjmp	.+40     	; 0x19ba <main+0xe20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1992:	69 a9       	ldd	r22, Y+49	; 0x31
    1994:	7a a9       	ldd	r23, Y+50	; 0x32
    1996:	8b a9       	ldd	r24, Y+51	; 0x33
    1998:	9c a9       	ldd	r25, Y+52	; 0x34
    199a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	98 ab       	std	Y+48, r25	; 0x30
    19a4:	8f a7       	std	Y+47, r24	; 0x2f
    19a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    19a8:	98 a9       	ldd	r25, Y+48	; 0x30
    19aa:	9c a7       	std	Y+44, r25	; 0x2c
    19ac:	8b a7       	std	Y+43, r24	; 0x2b
    19ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    19b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <main+0xe18>
    19b6:	9c a7       	std	Y+44, r25	; 0x2c
    19b8:	8b a7       	std	Y+43, r24	; 0x2b

			//M2_reply = FALSE;

			do
			{
				M2_reply=EEPROM_readByte(0x0311, &respond_pass);
    19ba:	9e 01       	movw	r18, r28
    19bc:	21 55       	subi	r18, 0x51	; 81
    19be:	3f 4f       	sbci	r19, 0xFF	; 255
    19c0:	81 e1       	ldi	r24, 0x11	; 17
    19c2:	93 e0       	ldi	r25, 0x03	; 3
    19c4:	b9 01       	movw	r22, r18
    19c6:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <EEPROM_readByte>
    19ca:	fe 01       	movw	r30, r28
    19cc:	e2 56       	subi	r30, 0x62	; 98
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	80 83       	st	Z, r24
			}
			while (!M2_reply);
    19d2:	fe 01       	movw	r30, r28
    19d4:	e2 56       	subi	r30, 0x62	; 98
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	80 81       	ld	r24, Z
    19da:	88 23       	and	r24, r24
    19dc:	71 f3       	breq	.-36     	; 0x19ba <main+0xe20>


			//Testing if the entered password is right
			if (respond_pass == sentpassword)
    19de:	fe 01       	movw	r30, r28
    19e0:	e1 55       	subi	r30, 0x51	; 81
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	90 81       	ld	r25, Z
    19e6:	fe 01       	movw	r30, r28
    19e8:	ee 55       	subi	r30, 0x5E	; 94
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	80 81       	ld	r24, Z
    19ee:	98 17       	cp	r25, r24
    19f0:	09 f0       	breq	.+2      	; 0x19f4 <main+0xe5a>
    19f2:	81 c0       	rjmp	.+258    	; 0x1af6 <main+0xf5c>
			{
				passIsTrue=1;
    19f4:	fe 01       	movw	r30, r28
    19f6:	e3 56       	subi	r30, 0x63	; 99
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	80 83       	st	Z, r24
				LCD_clearScreen();
    19fe:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Correct");
    1a02:	2c e8       	ldi	r18, 0x8C	; 140
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	a9 01       	movw	r20, r18
    1a0c:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_displayStringRowColumn>
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	a8 ec       	ldi	r26, 0xC8	; 200
    1a16:	b2 e4       	ldi	r27, 0x42	; 66
    1a18:	8f a3       	std	Y+39, r24	; 0x27
    1a1a:	98 a7       	std	Y+40, r25	; 0x28
    1a1c:	a9 a7       	std	Y+41, r26	; 0x29
    1a1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a20:	6f a1       	ldd	r22, Y+39	; 0x27
    1a22:	78 a5       	ldd	r23, Y+40	; 0x28
    1a24:	89 a5       	ldd	r24, Y+41	; 0x29
    1a26:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	4a e7       	ldi	r20, 0x7A	; 122
    1a2e:	53 e4       	ldi	r21, 0x43	; 67
    1a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	8b a3       	std	Y+35, r24	; 0x23
    1a3a:	9c a3       	std	Y+36, r25	; 0x24
    1a3c:	ad a3       	std	Y+37, r26	; 0x25
    1a3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a40:	6b a1       	ldd	r22, Y+35	; 0x23
    1a42:	7c a1       	ldd	r23, Y+36	; 0x24
    1a44:	8d a1       	ldd	r24, Y+37	; 0x25
    1a46:	9e a1       	ldd	r25, Y+38	; 0x26
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e8       	ldi	r20, 0x80	; 128
    1a4e:	5f e3       	ldi	r21, 0x3F	; 63
    1a50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a54:	88 23       	and	r24, r24
    1a56:	2c f4       	brge	.+10     	; 0x1a62 <main+0xec8>
		__ticks = 1;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	9a a3       	std	Y+34, r25	; 0x22
    1a5e:	89 a3       	std	Y+33, r24	; 0x21
    1a60:	3f c0       	rjmp	.+126    	; 0x1ae0 <main+0xf46>
	else if (__tmp > 65535)
    1a62:	6b a1       	ldd	r22, Y+35	; 0x23
    1a64:	7c a1       	ldd	r23, Y+36	; 0x24
    1a66:	8d a1       	ldd	r24, Y+37	; 0x25
    1a68:	9e a1       	ldd	r25, Y+38	; 0x26
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	3f ef       	ldi	r19, 0xFF	; 255
    1a6e:	4f e7       	ldi	r20, 0x7F	; 127
    1a70:	57 e4       	ldi	r21, 0x47	; 71
    1a72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a76:	18 16       	cp	r1, r24
    1a78:	4c f5       	brge	.+82     	; 0x1acc <main+0xf32>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a7c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a7e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a80:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e2       	ldi	r20, 0x20	; 32
    1a88:	51 e4       	ldi	r21, 0x41	; 65
    1a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	bc 01       	movw	r22, r24
    1a94:	cd 01       	movw	r24, r26
    1a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	9a a3       	std	Y+34, r25	; 0x22
    1aa0:	89 a3       	std	Y+33, r24	; 0x21
    1aa2:	0f c0       	rjmp	.+30     	; 0x1ac2 <main+0xf28>
    1aa4:	89 e1       	ldi	r24, 0x19	; 25
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	98 a3       	std	Y+32, r25	; 0x20
    1aaa:	8f 8f       	std	Y+31, r24	; 0x1f
    1aac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aae:	98 a1       	ldd	r25, Y+32	; 0x20
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <main+0xf16>
    1ab4:	98 a3       	std	Y+32, r25	; 0x20
    1ab6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab8:	89 a1       	ldd	r24, Y+33	; 0x21
    1aba:	9a a1       	ldd	r25, Y+34	; 0x22
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	9a a3       	std	Y+34, r25	; 0x22
    1ac0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	69 f7       	brne	.-38     	; 0x1aa4 <main+0xf0a>
    1aca:	22 c0       	rjmp	.+68     	; 0x1b10 <main+0xf76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1acc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ace:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	9a a3       	std	Y+34, r25	; 0x22
    1ade:	89 a3       	std	Y+33, r24	; 0x21
    1ae0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ae6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ae8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <main+0xf52>
    1af0:	9e 8f       	std	Y+30, r25	; 0x1e
    1af2:	8d 8f       	std	Y+29, r24	; 0x1d
    1af4:	0d c0       	rjmp	.+26     	; 0x1b10 <main+0xf76>
				_delay_ms(100);
			}
			else
			{
				passIsTrue=0;
    1af6:	fe 01       	movw	r30, r28
    1af8:	e3 56       	subi	r30, 0x63	; 99
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	10 82       	st	Z, r1
				noOfPasswordEntering += 1;
    1afe:	de 01       	movw	r26, r28
    1b00:	a0 56       	subi	r26, 0x60	; 96
    1b02:	bf 4f       	sbci	r27, 0xFF	; 255
    1b04:	fe 01       	movw	r30, r28
    1b06:	e0 56       	subi	r30, 0x60	; 96
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	80 81       	ld	r24, Z
    1b0c:	8f 5f       	subi	r24, 0xFF	; 255
    1b0e:	8c 93       	st	X, r24
				LCD_displayStringRowColumn(0,0,"Enter Pass");
				LCD_displayStringRowColumn(1,0,"Pass:");
			}
			*/

		}while(noOfPasswordEntering < 3 && passIsTrue == 0 );
    1b10:	fe 01       	movw	r30, r28
    1b12:	e0 56       	subi	r30, 0x60	; 96
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	80 81       	ld	r24, Z
    1b18:	83 30       	cpi	r24, 0x03	; 3
    1b1a:	38 f4       	brcc	.+14     	; 0x1b2a <main+0xf90>
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	e3 56       	subi	r30, 0x63	; 99
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	80 81       	ld	r24, Z
    1b24:	88 23       	and	r24, r24
    1b26:	09 f4       	brne	.+2      	; 0x1b2a <main+0xf90>
    1b28:	1a cd       	rjmp	.-1484   	; 0x155e <main+0x9c4>

		LCD_clearScreen();
    1b2a:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <LCD_clearScreen>

		if (noOfPasswordEntering >= 3 && passIsTrue == 0)
    1b2e:	fe 01       	movw	r30, r28
    1b30:	e0 56       	subi	r30, 0x60	; 96
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	80 81       	ld	r24, Z
    1b36:	83 30       	cpi	r24, 0x03	; 3
    1b38:	08 f4       	brcc	.+2      	; 0x1b3c <main+0xfa2>
    1b3a:	84 c0       	rjmp	.+264    	; 0x1c44 <main+0x10aa>
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	e3 56       	subi	r30, 0x63	; 99
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	80 81       	ld	r24, Z
    1b44:	88 23       	and	r24, r24
    1b46:	09 f0       	breq	.+2      	; 0x1b4a <main+0xfb0>
    1b48:	7d c0       	rjmp	.+250    	; 0x1c44 <main+0x10aa>
		{
			LCD_clearScreen();
    1b4a:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Theif");
    1b4e:	24 e9       	ldi	r18, 0x94	; 148
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	a9 01       	movw	r20, r18
    1b58:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_displayStringRowColumn>
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	aa e7       	ldi	r26, 0x7A	; 122
    1b62:	b4 e4       	ldi	r27, 0x44	; 68
    1b64:	89 8f       	std	Y+25, r24	; 0x19
    1b66:	9a 8f       	std	Y+26, r25	; 0x1a
    1b68:	ab 8f       	std	Y+27, r26	; 0x1b
    1b6a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	4a e7       	ldi	r20, 0x7A	; 122
    1b7a:	53 e4       	ldi	r21, 0x43	; 67
    1b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	8d 8b       	std	Y+21, r24	; 0x15
    1b86:	9e 8b       	std	Y+22, r25	; 0x16
    1b88:	af 8b       	std	Y+23, r26	; 0x17
    1b8a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b90:	8f 89       	ldd	r24, Y+23	; 0x17
    1b92:	98 8d       	ldd	r25, Y+24	; 0x18
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e8       	ldi	r20, 0x80	; 128
    1b9a:	5f e3       	ldi	r21, 0x3F	; 63
    1b9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba0:	88 23       	and	r24, r24
    1ba2:	2c f4       	brge	.+10     	; 0x1bae <main+0x1014>
		__ticks = 1;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	9c 8b       	std	Y+20, r25	; 0x14
    1baa:	8b 8b       	std	Y+19, r24	; 0x13
    1bac:	3f c0       	rjmp	.+126    	; 0x1c2c <main+0x1092>
	else if (__tmp > 65535)
    1bae:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	3f ef       	ldi	r19, 0xFF	; 255
    1bba:	4f e7       	ldi	r20, 0x7F	; 127
    1bbc:	57 e4       	ldi	r21, 0x47	; 71
    1bbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bc2:	18 16       	cp	r1, r24
    1bc4:	4c f5       	brge	.+82     	; 0x1c18 <main+0x107e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc6:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e2       	ldi	r20, 0x20	; 32
    1bd4:	51 e4       	ldi	r21, 0x41	; 65
    1bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	bc 01       	movw	r22, r24
    1be0:	cd 01       	movw	r24, r26
    1be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	9c 8b       	std	Y+20, r25	; 0x14
    1bec:	8b 8b       	std	Y+19, r24	; 0x13
    1bee:	0f c0       	rjmp	.+30     	; 0x1c0e <main+0x1074>
    1bf0:	89 e1       	ldi	r24, 0x19	; 25
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	9a 8b       	std	Y+18, r25	; 0x12
    1bf6:	89 8b       	std	Y+17, r24	; 0x11
    1bf8:	89 89       	ldd	r24, Y+17	; 0x11
    1bfa:	9a 89       	ldd	r25, Y+18	; 0x12
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <main+0x1062>
    1c00:	9a 8b       	std	Y+18, r25	; 0x12
    1c02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c04:	8b 89       	ldd	r24, Y+19	; 0x13
    1c06:	9c 89       	ldd	r25, Y+20	; 0x14
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	9c 8b       	std	Y+20, r25	; 0x14
    1c0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c10:	9c 89       	ldd	r25, Y+20	; 0x14
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	69 f7       	brne	.-38     	; 0x1bf0 <main+0x1056>
    1c16:	14 c0       	rjmp	.+40     	; 0x1c40 <main+0x10a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c18:	6d 89       	ldd	r22, Y+21	; 0x15
    1c1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	9c 8b       	std	Y+20, r25	; 0x14
    1c2a:	8b 8b       	std	Y+19, r24	; 0x13
    1c2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c30:	98 8b       	std	Y+16, r25	; 0x10
    1c32:	8f 87       	std	Y+15, r24	; 0x0f
    1c34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c36:	98 89       	ldd	r25, Y+16	; 0x10
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	f1 f7       	brne	.-4      	; 0x1c38 <main+0x109e>
    1c3c:	98 8b       	std	Y+16, r25	; 0x10
    1c3e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000); //lock the system for an hour
			LCD_clearScreen();
    1c40:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <LCD_clearScreen>
		}


		//Hand Shaking
		UART_sendByte(REQUEST); //REQUEST
    1c44:	8d e2       	ldi	r24, 0x2D	; 45
    1c46:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <UART_sendByte>
		while (UART_recieveByte() != START) {} //WAITINTG UNTILL THE 2ND MC BECOME AVAILABLE
    1c4a:	0e 94 77 16 	call	0x2cee	; 0x2cee <UART_recieveByte>
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	e1 f7       	brne	.-8      	; 0x1c4a <main+0x10b0>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	a8 ec       	ldi	r26, 0xC8	; 200
    1c58:	b2 e4       	ldi	r27, 0x42	; 66
    1c5a:	8b 87       	std	Y+11, r24	; 0x0b
    1c5c:	9c 87       	std	Y+12, r25	; 0x0c
    1c5e:	ad 87       	std	Y+13, r26	; 0x0d
    1c60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	4a e7       	ldi	r20, 0x7A	; 122
    1c70:	53 e4       	ldi	r21, 0x43	; 67
    1c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	8f 83       	std	Y+7, r24	; 0x07
    1c7c:	98 87       	std	Y+8, r25	; 0x08
    1c7e:	a9 87       	std	Y+9, r26	; 0x09
    1c80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c82:	6f 81       	ldd	r22, Y+7	; 0x07
    1c84:	78 85       	ldd	r23, Y+8	; 0x08
    1c86:	89 85       	ldd	r24, Y+9	; 0x09
    1c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e8       	ldi	r20, 0x80	; 128
    1c90:	5f e3       	ldi	r21, 0x3F	; 63
    1c92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c96:	88 23       	and	r24, r24
    1c98:	2c f4       	brge	.+10     	; 0x1ca4 <main+0x110a>
		__ticks = 1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
    1ca2:	3f c0       	rjmp	.+126    	; 0x1d22 <main+0x1188>
	else if (__tmp > 65535)
    1ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca6:	78 85       	ldd	r23, Y+8	; 0x08
    1ca8:	89 85       	ldd	r24, Y+9	; 0x09
    1caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	3f ef       	ldi	r19, 0xFF	; 255
    1cb0:	4f e7       	ldi	r20, 0x7F	; 127
    1cb2:	57 e4       	ldi	r21, 0x47	; 71
    1cb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb8:	18 16       	cp	r1, r24
    1cba:	4c f5       	brge	.+82     	; 0x1d0e <main+0x1174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e2       	ldi	r20, 0x20	; 32
    1cca:	51 e4       	ldi	r21, 0x41	; 65
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9e 83       	std	Y+6, r25	; 0x06
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <main+0x116a>
    1ce6:	89 e1       	ldi	r24, 0x19	; 25
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9c 83       	std	Y+4, r25	; 0x04
    1cec:	8b 83       	std	Y+3, r24	; 0x03
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <main+0x1158>
    1cf6:	9c 83       	std	Y+4, r25	; 0x04
    1cf8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	9e 83       	std	Y+6, r25	; 0x06
    1d02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d04:	8d 81       	ldd	r24, Y+5	; 0x05
    1d06:	9e 81       	ldd	r25, Y+6	; 0x06
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	69 f7       	brne	.-38     	; 0x1ce6 <main+0x114c>
    1d0c:	14 c0       	rjmp	.+40     	; 0x1d36 <main+0x119c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d10:	78 85       	ldd	r23, Y+8	; 0x08
    1d12:	89 85       	ldd	r24, Y+9	; 0x09
    1d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	9e 83       	std	Y+6, r25	; 0x06
    1d20:	8d 83       	std	Y+5, r24	; 0x05
    1d22:	8d 81       	ldd	r24, Y+5	; 0x05
    1d24:	9e 81       	ldd	r25, Y+6	; 0x06
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <main+0x1194>
    1d32:	9a 83       	std	Y+2, r25	; 0x02
    1d34:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		if (passIsTrue == 0)
    1d36:	fe 01       	movw	r30, r28
    1d38:	e3 56       	subi	r30, 0x63	; 99
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	80 81       	ld	r24, Z
    1d3e:	88 23       	and	r24, r24
    1d40:	21 f4       	brne	.+8      	; 0x1d4a <main+0x11b0>
		{
			UART_sendByte(DANGER); //to operate buzzer
    1d42:	8c e0       	ldi	r24, 0x0C	; 12
    1d44:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <UART_sendByte>
    1d48:	06 cc       	rjmp	.-2036   	; 0x1556 <main+0x9bc>
		}
		else
		{
			UART_sendByte(SAFE); //to operate buzzer
    1d4a:	8d e0       	ldi	r24, 0x0D	; 13
    1d4c:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <UART_sendByte>
    1d50:	02 cc       	rjmp	.-2044   	; 0x1556 <main+0x9bc>

00001d52 <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(void)
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
    1d5a:	e7 e2       	ldi	r30, 0x27	; 39
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	10 82       	st	Z, r1
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
    1d60:	e6 e2       	ldi	r30, 0x26	; 38
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	83 e8       	ldi	r24, 0x83	; 131
    1d66:	80 83       	st	Z, r24
}
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	08 95       	ret

00001d6e <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	0f 92       	push	r0
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* channel number must be from 0 --> 7 */
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	87 70       	andi	r24, 0x07	; 7
    1d7e:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    1d80:	a7 e2       	ldi	r26, 0x27	; 39
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e7 e2       	ldi	r30, 0x27	; 39
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	80 7e       	andi	r24, 0xE0	; 224
    1d8c:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
    1d8e:	a7 e2       	ldi	r26, 0x27	; 39
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e7 e2       	ldi	r30, 0x27	; 39
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	90 81       	ld	r25, Z
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	89 2b       	or	r24, r25
    1d9c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* start conversion write '1' to ADSC */
    1d9e:	a6 e2       	ldi	r26, 0x26	; 38
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e6 e2       	ldi	r30, 0x26	; 38
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	80 64       	ori	r24, 0x40	; 64
    1daa:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
    1dac:	e6 e2       	ldi	r30, 0x26	; 38
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	88 2f       	mov	r24, r24
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	80 71       	andi	r24, 0x10	; 16
    1db8:	90 70       	andi	r25, 0x00	; 0
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	b9 f3       	breq	.-18     	; 0x1dac <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* clear ADIF by write '1' to it :) */
    1dbe:	a6 e2       	ldi	r26, 0x26	; 38
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e6 e2       	ldi	r30, 0x26	; 38
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	80 61       	ori	r24, 0x10	; 16
    1dca:	8c 93       	st	X, r24
	return ADC; /* return the data register */
    1dcc:	e4 e2       	ldi	r30, 0x24	; 36
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	91 81       	ldd	r25, Z+1	; 0x01
}
    1dd4:	0f 90       	pop	r0
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <EEPROM_init>:

#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
    1de4:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <TWI_init>
}
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	08 95       	ret

00001dee <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	00 d0       	rcall	.+0      	; 0x1df4 <EEPROM_writeByte+0x6>
    1df4:	00 d0       	rcall	.+0      	; 0x1df6 <EEPROM_writeByte+0x8>
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	9a 83       	std	Y+2, r25	; 0x02
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1e00:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <TWI_start>
    if (TWI_getStatus() != TW_START)
    1e04:	0e 94 06 10 	call	0x200c	; 0x200c <TWI_getStatus>
    1e08:	88 30       	cpi	r24, 0x08	; 8
    1e0a:	11 f0       	breq	.+4      	; 0x1e10 <EEPROM_writeByte+0x22>
        return ERROR;
    1e0c:	1c 82       	std	Y+4, r1	; 0x04
    1e0e:	28 c0       	rjmp	.+80     	; 0x1e60 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	9a 81       	ldd	r25, Y+2	; 0x02
    1e14:	80 70       	andi	r24, 0x00	; 0
    1e16:	97 70       	andi	r25, 0x07	; 7
    1e18:	88 0f       	add	r24, r24
    1e1a:	89 2f       	mov	r24, r25
    1e1c:	88 1f       	adc	r24, r24
    1e1e:	99 0b       	sbc	r25, r25
    1e20:	91 95       	neg	r25
    1e22:	80 6a       	ori	r24, 0xA0	; 160
    1e24:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1e28:	0e 94 06 10 	call	0x200c	; 0x200c <TWI_getStatus>
    1e2c:	88 31       	cpi	r24, 0x18	; 24
    1e2e:	11 f0       	breq	.+4      	; 0x1e34 <EEPROM_writeByte+0x46>
        return ERROR; 
    1e30:	1c 82       	std	Y+4, r1	; 0x04
    1e32:	16 c0       	rjmp	.+44     	; 0x1e60 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1e3a:	0e 94 06 10 	call	0x200c	; 0x200c <TWI_getStatus>
    1e3e:	88 32       	cpi	r24, 0x28	; 40
    1e40:	11 f0       	breq	.+4      	; 0x1e46 <EEPROM_writeByte+0x58>
        return ERROR;
    1e42:	1c 82       	std	Y+4, r1	; 0x04
    1e44:	0d c0       	rjmp	.+26     	; 0x1e60 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1e4c:	0e 94 06 10 	call	0x200c	; 0x200c <TWI_getStatus>
    1e50:	88 32       	cpi	r24, 0x28	; 40
    1e52:	11 f0       	breq	.+4      	; 0x1e58 <EEPROM_writeByte+0x6a>
        return ERROR;
    1e54:	1c 82       	std	Y+4, r1	; 0x04
    1e56:	04 c0       	rjmp	.+8      	; 0x1e60 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1e58:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <TWI_stop>
	
    return SUCCESS;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	8c 83       	std	Y+4, r24	; 0x04
    1e60:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <EEPROM_readByte+0x6>
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <EEPROM_readByte+0x8>
    1e78:	0f 92       	push	r0
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	9a 83       	std	Y+2, r25	; 0x02
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	7c 83       	std	Y+4, r23	; 0x04
    1e84:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1e86:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <TWI_start>
    if (TWI_getStatus() != TW_START)
    1e8a:	0e 94 06 10 	call	0x200c	; 0x200c <TWI_getStatus>
    1e8e:	88 30       	cpi	r24, 0x08	; 8
    1e90:	11 f0       	breq	.+4      	; 0x1e96 <EEPROM_readByte+0x26>
        return ERROR;
    1e92:	1d 82       	std	Y+5, r1	; 0x05
    1e94:	44 c0       	rjmp	.+136    	; 0x1f1e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9a:	80 70       	andi	r24, 0x00	; 0
    1e9c:	97 70       	andi	r25, 0x07	; 7
    1e9e:	88 0f       	add	r24, r24
    1ea0:	89 2f       	mov	r24, r25
    1ea2:	88 1f       	adc	r24, r24
    1ea4:	99 0b       	sbc	r25, r25
    1ea6:	91 95       	neg	r25
    1ea8:	80 6a       	ori	r24, 0xA0	; 160
    1eaa:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1eae:	0e 94 06 10 	call	0x200c	; 0x200c <TWI_getStatus>
    1eb2:	88 31       	cpi	r24, 0x18	; 24
    1eb4:	11 f0       	breq	.+4      	; 0x1eba <EEPROM_readByte+0x4a>
        return ERROR;
    1eb6:	1d 82       	std	Y+5, r1	; 0x05
    1eb8:	32 c0       	rjmp	.+100    	; 0x1f1e <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1ec0:	0e 94 06 10 	call	0x200c	; 0x200c <TWI_getStatus>
    1ec4:	88 32       	cpi	r24, 0x28	; 40
    1ec6:	11 f0       	breq	.+4      	; 0x1ecc <EEPROM_readByte+0x5c>
        return ERROR;
    1ec8:	1d 82       	std	Y+5, r1	; 0x05
    1eca:	29 c0       	rjmp	.+82     	; 0x1f1e <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1ecc:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    1ed0:	0e 94 06 10 	call	0x200c	; 0x200c <TWI_getStatus>
    1ed4:	80 31       	cpi	r24, 0x10	; 16
    1ed6:	11 f0       	breq	.+4      	; 0x1edc <EEPROM_readByte+0x6c>
        return ERROR;
    1ed8:	1d 82       	std	Y+5, r1	; 0x05
    1eda:	21 c0       	rjmp	.+66     	; 0x1f1e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee0:	80 70       	andi	r24, 0x00	; 0
    1ee2:	97 70       	andi	r25, 0x07	; 7
    1ee4:	88 0f       	add	r24, r24
    1ee6:	89 2f       	mov	r24, r25
    1ee8:	88 1f       	adc	r24, r24
    1eea:	99 0b       	sbc	r25, r25
    1eec:	91 95       	neg	r25
    1eee:	81 6a       	ori	r24, 0xA1	; 161
    1ef0:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    1ef4:	0e 94 06 10 	call	0x200c	; 0x200c <TWI_getStatus>
    1ef8:	80 34       	cpi	r24, 0x40	; 64
    1efa:	11 f0       	breq	.+4      	; 0x1f00 <EEPROM_readByte+0x90>
        return ERROR;
    1efc:	1d 82       	std	Y+5, r1	; 0x05
    1efe:	0f c0       	rjmp	.+30     	; 0x1f1e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    1f00:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <TWI_readWithNACK>
    1f04:	eb 81       	ldd	r30, Y+3	; 0x03
    1f06:	fc 81       	ldd	r31, Y+4	; 0x04
    1f08:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    1f0a:	0e 94 06 10 	call	0x200c	; 0x200c <TWI_getStatus>
    1f0e:	88 35       	cpi	r24, 0x58	; 88
    1f10:	11 f0       	breq	.+4      	; 0x1f16 <EEPROM_readByte+0xa6>
        return ERROR;
    1f12:	1d 82       	std	Y+5, r1	; 0x05
    1f14:	04 c0       	rjmp	.+8      	; 0x1f1e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1f16:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <TWI_stop>
    return SUCCESS;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	8d 83       	std	Y+5, r24	; 0x05
    1f1e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	08 95       	ret

00001f30 <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    1f38:	e0 e2       	ldi	r30, 0x20	; 32
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	82 e0       	ldi	r24, 0x02	; 2
    1f3e:	80 83       	st	Z, r24
	TWSR = 0x00;
    1f40:	e1 e2       	ldi	r30, 0x21	; 33
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    1f46:	e2 e2       	ldi	r30, 0x22	; 34
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	82 e0       	ldi	r24, 0x02	; 2
    1f4c:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1f4e:	e6 e5       	ldi	r30, 0x56	; 86
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	84 e0       	ldi	r24, 0x04	; 4
    1f54:	80 83       	st	Z, r24
}
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <TWI_start>:

void TWI_start(void)
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1f64:	e6 e5       	ldi	r30, 0x56	; 86
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	84 ea       	ldi	r24, 0xA4	; 164
    1f6a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f6c:	e6 e5       	ldi	r30, 0x56	; 86
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	88 23       	and	r24, r24
    1f74:	dc f7       	brge	.-10     	; 0x1f6c <TWI_start+0x10>
}
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <TWI_stop>:

void TWI_stop(void)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1f84:	e6 e5       	ldi	r30, 0x56	; 86
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	84 e9       	ldi	r24, 0x94	; 148
    1f8a:	80 83       	st	Z, r24
}
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <TWI_write>:

void TWI_write(uint8 data)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	0f 92       	push	r0
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1f9e:	e3 e2       	ldi	r30, 0x23	; 35
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1fa6:	e6 e5       	ldi	r30, 0x56	; 86
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	84 e8       	ldi	r24, 0x84	; 132
    1fac:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1fae:	e6 e5       	ldi	r30, 0x56	; 86
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	88 23       	and	r24, r24
    1fb6:	dc f7       	brge	.-10     	; 0x1fae <TWI_write+0x1c>
}
    1fb8:	0f 90       	pop	r0
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1fc8:	e6 e5       	ldi	r30, 0x56	; 86
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	84 ec       	ldi	r24, 0xC4	; 196
    1fce:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1fd0:	e6 e5       	ldi	r30, 0x56	; 86
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	88 23       	and	r24, r24
    1fd8:	dc f7       	brge	.-10     	; 0x1fd0 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    1fda:	e3 e2       	ldi	r30, 0x23	; 35
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
}
    1fe0:	cf 91       	pop	r28
    1fe2:	df 91       	pop	r29
    1fe4:	08 95       	ret

00001fe6 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1fee:	e6 e5       	ldi	r30, 0x56	; 86
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	84 e8       	ldi	r24, 0x84	; 132
    1ff4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1ff6:	e6 e5       	ldi	r30, 0x56	; 86
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	88 23       	and	r24, r24
    1ffe:	dc f7       	brge	.-10     	; 0x1ff6 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2000:	e3 e2       	ldi	r30, 0x23	; 35
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
}
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	0f 92       	push	r0
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2016:	e1 e2       	ldi	r30, 0x21	; 33
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	88 7f       	andi	r24, 0xF8	; 248
    201e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2020:	89 81       	ldd	r24, Y+1	; 0x01
}
    2022:	0f 90       	pop	r0
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	08 95       	ret

0000202a <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	00 d0       	rcall	.+0      	; 0x2030 <KeyPad_getPressedKey+0x6>
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    2034:	1a 82       	std	Y+2, r1	; 0x02
    2036:	4c c0       	rjmp	.+152    	; 0x20d0 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    2038:	ea e3       	ldi	r30, 0x3A	; 58
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	80 e1       	ldi	r24, 0x10	; 16
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	02 c0       	rjmp	.+4      	; 0x204c <KeyPad_getPressedKey+0x22>
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	2a 95       	dec	r18
    204e:	e2 f7       	brpl	.-8      	; 0x2048 <KeyPad_getPressedKey+0x1e>
    2050:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    2052:	eb e3       	ldi	r30, 0x3B	; 59
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	28 2f       	mov	r18, r24
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	80 e1       	ldi	r24, 0x10	; 16
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	02 2e       	mov	r0, r18
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <KeyPad_getPressedKey+0x3e>
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	0a 94       	dec	r0
    206a:	e2 f7       	brpl	.-8      	; 0x2064 <KeyPad_getPressedKey+0x3a>
    206c:	80 95       	com	r24
    206e:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    2070:	19 82       	std	Y+1, r1	; 0x01
    2072:	28 c0       	rjmp	.+80     	; 0x20c4 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    2074:	e9 e3       	ldi	r30, 0x39	; 57
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	28 2f       	mov	r18, r24
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	88 2f       	mov	r24, r24
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	a9 01       	movw	r20, r18
    2086:	02 c0       	rjmp	.+4      	; 0x208c <KeyPad_getPressedKey+0x62>
    2088:	55 95       	asr	r21
    208a:	47 95       	ror	r20
    208c:	8a 95       	dec	r24
    208e:	e2 f7       	brpl	.-8      	; 0x2088 <KeyPad_getPressedKey+0x5e>
    2090:	ca 01       	movw	r24, r20
    2092:	81 70       	andi	r24, 0x01	; 1
    2094:	90 70       	andi	r25, 0x00	; 0
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	91 f4       	brne	.+36     	; 0x20be <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	88 2f       	mov	r24, r24
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	98 2f       	mov	r25, r24
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	89 0f       	add	r24, r25
    20ae:	8f 5f       	subi	r24, 0xFF	; 255
    20b0:	0e 94 6d 10 	call	0x20da	; 0x20da <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	8f 5f       	subi	r24, 0xFF	; 255
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	84 30       	cpi	r24, 0x04	; 4
    20c8:	a8 f2       	brcs	.-86     	; 0x2074 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	8f 5f       	subi	r24, 0xFF	; 255
    20ce:	8a 83       	std	Y+2, r24	; 0x02
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	84 30       	cpi	r24, 0x04	; 4
    20d4:	08 f4       	brcc	.+2      	; 0x20d8 <KeyPad_getPressedKey+0xae>
    20d6:	b0 cf       	rjmp	.-160    	; 0x2038 <KeyPad_getPressedKey+0xe>
    20d8:	ad cf       	rjmp	.-166    	; 0x2034 <KeyPad_getPressedKey+0xa>

000020da <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <KeyPad_4x4_adjustKeyNumber+0x6>
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <KeyPad_4x4_adjustKeyNumber+0x8>
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	3c 83       	std	Y+4, r19	; 0x04
    20f0:	2b 83       	std	Y+3, r18	; 0x03
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	88 30       	cpi	r24, 0x08	; 8
    20f8:	91 05       	cpc	r25, r1
    20fa:	09 f4       	brne	.+2      	; 0x20fe <KeyPad_4x4_adjustKeyNumber+0x24>
    20fc:	70 c0       	rjmp	.+224    	; 0x21de <KeyPad_4x4_adjustKeyNumber+0x104>
    20fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2100:	3c 81       	ldd	r19, Y+4	; 0x04
    2102:	29 30       	cpi	r18, 0x09	; 9
    2104:	31 05       	cpc	r19, r1
    2106:	5c f5       	brge	.+86     	; 0x215e <KeyPad_4x4_adjustKeyNumber+0x84>
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	9c 81       	ldd	r25, Y+4	; 0x04
    210c:	84 30       	cpi	r24, 0x04	; 4
    210e:	91 05       	cpc	r25, r1
    2110:	09 f4       	brne	.+2      	; 0x2114 <KeyPad_4x4_adjustKeyNumber+0x3a>
    2112:	59 c0       	rjmp	.+178    	; 0x21c6 <KeyPad_4x4_adjustKeyNumber+0xec>
    2114:	2b 81       	ldd	r18, Y+3	; 0x03
    2116:	3c 81       	ldd	r19, Y+4	; 0x04
    2118:	25 30       	cpi	r18, 0x05	; 5
    211a:	31 05       	cpc	r19, r1
    211c:	9c f4       	brge	.+38     	; 0x2144 <KeyPad_4x4_adjustKeyNumber+0x6a>
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	82 30       	cpi	r24, 0x02	; 2
    2124:	91 05       	cpc	r25, r1
    2126:	09 f4       	brne	.+2      	; 0x212a <KeyPad_4x4_adjustKeyNumber+0x50>
    2128:	48 c0       	rjmp	.+144    	; 0x21ba <KeyPad_4x4_adjustKeyNumber+0xe0>
    212a:	2b 81       	ldd	r18, Y+3	; 0x03
    212c:	3c 81       	ldd	r19, Y+4	; 0x04
    212e:	23 30       	cpi	r18, 0x03	; 3
    2130:	31 05       	cpc	r19, r1
    2132:	0c f0       	brlt	.+2      	; 0x2136 <KeyPad_4x4_adjustKeyNumber+0x5c>
    2134:	45 c0       	rjmp	.+138    	; 0x21c0 <KeyPad_4x4_adjustKeyNumber+0xe6>
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	81 30       	cpi	r24, 0x01	; 1
    213c:	91 05       	cpc	r25, r1
    213e:	09 f4       	brne	.+2      	; 0x2142 <KeyPad_4x4_adjustKeyNumber+0x68>
    2140:	39 c0       	rjmp	.+114    	; 0x21b4 <KeyPad_4x4_adjustKeyNumber+0xda>
    2142:	67 c0       	rjmp	.+206    	; 0x2212 <KeyPad_4x4_adjustKeyNumber+0x138>
    2144:	2b 81       	ldd	r18, Y+3	; 0x03
    2146:	3c 81       	ldd	r19, Y+4	; 0x04
    2148:	26 30       	cpi	r18, 0x06	; 6
    214a:	31 05       	cpc	r19, r1
    214c:	09 f4       	brne	.+2      	; 0x2150 <KeyPad_4x4_adjustKeyNumber+0x76>
    214e:	41 c0       	rjmp	.+130    	; 0x21d2 <KeyPad_4x4_adjustKeyNumber+0xf8>
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	87 30       	cpi	r24, 0x07	; 7
    2156:	91 05       	cpc	r25, r1
    2158:	0c f0       	brlt	.+2      	; 0x215c <KeyPad_4x4_adjustKeyNumber+0x82>
    215a:	3e c0       	rjmp	.+124    	; 0x21d8 <KeyPad_4x4_adjustKeyNumber+0xfe>
    215c:	37 c0       	rjmp	.+110    	; 0x21cc <KeyPad_4x4_adjustKeyNumber+0xf2>
    215e:	2b 81       	ldd	r18, Y+3	; 0x03
    2160:	3c 81       	ldd	r19, Y+4	; 0x04
    2162:	2c 30       	cpi	r18, 0x0C	; 12
    2164:	31 05       	cpc	r19, r1
    2166:	09 f4       	brne	.+2      	; 0x216a <KeyPad_4x4_adjustKeyNumber+0x90>
    2168:	46 c0       	rjmp	.+140    	; 0x21f6 <KeyPad_4x4_adjustKeyNumber+0x11c>
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	9c 81       	ldd	r25, Y+4	; 0x04
    216e:	8d 30       	cpi	r24, 0x0D	; 13
    2170:	91 05       	cpc	r25, r1
    2172:	5c f4       	brge	.+22     	; 0x218a <KeyPad_4x4_adjustKeyNumber+0xb0>
    2174:	2b 81       	ldd	r18, Y+3	; 0x03
    2176:	3c 81       	ldd	r19, Y+4	; 0x04
    2178:	2a 30       	cpi	r18, 0x0A	; 10
    217a:	31 05       	cpc	r19, r1
    217c:	b1 f1       	breq	.+108    	; 0x21ea <KeyPad_4x4_adjustKeyNumber+0x110>
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	9c 81       	ldd	r25, Y+4	; 0x04
    2182:	8b 30       	cpi	r24, 0x0B	; 11
    2184:	91 05       	cpc	r25, r1
    2186:	a4 f5       	brge	.+104    	; 0x21f0 <KeyPad_4x4_adjustKeyNumber+0x116>
    2188:	2d c0       	rjmp	.+90     	; 0x21e4 <KeyPad_4x4_adjustKeyNumber+0x10a>
    218a:	2b 81       	ldd	r18, Y+3	; 0x03
    218c:	3c 81       	ldd	r19, Y+4	; 0x04
    218e:	2e 30       	cpi	r18, 0x0E	; 14
    2190:	31 05       	cpc	r19, r1
    2192:	b9 f1       	breq	.+110    	; 0x2202 <KeyPad_4x4_adjustKeyNumber+0x128>
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	9c 81       	ldd	r25, Y+4	; 0x04
    2198:	8e 30       	cpi	r24, 0x0E	; 14
    219a:	91 05       	cpc	r25, r1
    219c:	7c f1       	brlt	.+94     	; 0x21fc <KeyPad_4x4_adjustKeyNumber+0x122>
    219e:	2b 81       	ldd	r18, Y+3	; 0x03
    21a0:	3c 81       	ldd	r19, Y+4	; 0x04
    21a2:	2f 30       	cpi	r18, 0x0F	; 15
    21a4:	31 05       	cpc	r19, r1
    21a6:	79 f1       	breq	.+94     	; 0x2206 <KeyPad_4x4_adjustKeyNumber+0x12c>
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	9c 81       	ldd	r25, Y+4	; 0x04
    21ac:	80 31       	cpi	r24, 0x10	; 16
    21ae:	91 05       	cpc	r25, r1
    21b0:	69 f1       	breq	.+90     	; 0x220c <KeyPad_4x4_adjustKeyNumber+0x132>
    21b2:	2f c0       	rjmp	.+94     	; 0x2212 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    21b4:	97 e0       	ldi	r25, 0x07	; 7
    21b6:	9a 83       	std	Y+2, r25	; 0x02
    21b8:	2e c0       	rjmp	.+92     	; 0x2216 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    21ba:	28 e0       	ldi	r18, 0x08	; 8
    21bc:	2a 83       	std	Y+2, r18	; 0x02
    21be:	2b c0       	rjmp	.+86     	; 0x2216 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    21c0:	39 e0       	ldi	r19, 0x09	; 9
    21c2:	3a 83       	std	Y+2, r19	; 0x02
    21c4:	28 c0       	rjmp	.+80     	; 0x2216 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    21c6:	85 e2       	ldi	r24, 0x25	; 37
    21c8:	8a 83       	std	Y+2, r24	; 0x02
    21ca:	25 c0       	rjmp	.+74     	; 0x2216 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    21cc:	94 e0       	ldi	r25, 0x04	; 4
    21ce:	9a 83       	std	Y+2, r25	; 0x02
    21d0:	22 c0       	rjmp	.+68     	; 0x2216 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    21d2:	25 e0       	ldi	r18, 0x05	; 5
    21d4:	2a 83       	std	Y+2, r18	; 0x02
    21d6:	1f c0       	rjmp	.+62     	; 0x2216 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    21d8:	36 e0       	ldi	r19, 0x06	; 6
    21da:	3a 83       	std	Y+2, r19	; 0x02
    21dc:	1c c0       	rjmp	.+56     	; 0x2216 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    21de:	8a e2       	ldi	r24, 0x2A	; 42
    21e0:	8a 83       	std	Y+2, r24	; 0x02
    21e2:	19 c0       	rjmp	.+50     	; 0x2216 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    21e4:	91 e0       	ldi	r25, 0x01	; 1
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	16 c0       	rjmp	.+44     	; 0x2216 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    21ea:	22 e0       	ldi	r18, 0x02	; 2
    21ec:	2a 83       	std	Y+2, r18	; 0x02
    21ee:	13 c0       	rjmp	.+38     	; 0x2216 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    21f0:	33 e0       	ldi	r19, 0x03	; 3
    21f2:	3a 83       	std	Y+2, r19	; 0x02
    21f4:	10 c0       	rjmp	.+32     	; 0x2216 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    21f6:	8d e2       	ldi	r24, 0x2D	; 45
    21f8:	8a 83       	std	Y+2, r24	; 0x02
    21fa:	0d c0       	rjmp	.+26     	; 0x2216 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    21fc:	9d e0       	ldi	r25, 0x0D	; 13
    21fe:	9a 83       	std	Y+2, r25	; 0x02
    2200:	0a c0       	rjmp	.+20     	; 0x2216 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    2202:	1a 82       	std	Y+2, r1	; 0x02
    2204:	08 c0       	rjmp	.+16     	; 0x2216 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    2206:	2d e3       	ldi	r18, 0x3D	; 61
    2208:	2a 83       	std	Y+2, r18	; 0x02
    220a:	05 c0       	rjmp	.+10     	; 0x2216 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    220c:	3b e2       	ldi	r19, 0x2B	; 43
    220e:	3a 83       	std	Y+2, r19	; 0x02
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	8a 83       	std	Y+2, r24	; 0x02
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    222e:	e7 e3       	ldi	r30, 0x37	; 55
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	8f ef       	ldi	r24, 0xFF	; 255
    2234:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    2236:	a1 e3       	ldi	r26, 0x31	; 49
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e1 e3       	ldi	r30, 0x31	; 49
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	80 67       	ori	r24, 0x70	; 112
    2242:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2244:	88 e3       	ldi	r24, 0x38	; 56
    2246:	0e 94 2e 11 	call	0x225c	; 0x225c <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    224a:	8c e0       	ldi	r24, 0x0C	; 12
    224c:	0e 94 2e 11 	call	0x225c	; 0x225c <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	0e 94 2e 11 	call	0x225c	; 0x225c <LCD_sendCommand>
}
    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	08 95       	ret

0000225c <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	e9 97       	sbiw	r28, 0x39	; 57
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    2272:	a2 e3       	ldi	r26, 0x32	; 50
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	e2 e3       	ldi	r30, 0x32	; 50
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	8f 7e       	andi	r24, 0xEF	; 239
    227e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2280:	a2 e3       	ldi	r26, 0x32	; 50
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	e2 e3       	ldi	r30, 0x32	; 50
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	8f 7d       	andi	r24, 0xDF	; 223
    228c:	8c 93       	st	X, r24
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	a0 e8       	ldi	r26, 0x80	; 128
    2294:	bf e3       	ldi	r27, 0x3F	; 63
    2296:	8d ab       	std	Y+53, r24	; 0x35
    2298:	9e ab       	std	Y+54, r25	; 0x36
    229a:	af ab       	std	Y+55, r26	; 0x37
    229c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229e:	6d a9       	ldd	r22, Y+53	; 0x35
    22a0:	7e a9       	ldd	r23, Y+54	; 0x36
    22a2:	8f a9       	ldd	r24, Y+55	; 0x37
    22a4:	98 ad       	ldd	r25, Y+56	; 0x38
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	4a e7       	ldi	r20, 0x7A	; 122
    22ac:	53 e4       	ldi	r21, 0x43	; 67
    22ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	89 ab       	std	Y+49, r24	; 0x31
    22b8:	9a ab       	std	Y+50, r25	; 0x32
    22ba:	ab ab       	std	Y+51, r26	; 0x33
    22bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22be:	69 a9       	ldd	r22, Y+49	; 0x31
    22c0:	7a a9       	ldd	r23, Y+50	; 0x32
    22c2:	8b a9       	ldd	r24, Y+51	; 0x33
    22c4:	9c a9       	ldd	r25, Y+52	; 0x34
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e8       	ldi	r20, 0x80	; 128
    22cc:	5f e3       	ldi	r21, 0x3F	; 63
    22ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22d2:	88 23       	and	r24, r24
    22d4:	2c f4       	brge	.+10     	; 0x22e0 <LCD_sendCommand+0x84>
		__ticks = 1;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	98 ab       	std	Y+48, r25	; 0x30
    22dc:	8f a7       	std	Y+47, r24	; 0x2f
    22de:	3f c0       	rjmp	.+126    	; 0x235e <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    22e0:	69 a9       	ldd	r22, Y+49	; 0x31
    22e2:	7a a9       	ldd	r23, Y+50	; 0x32
    22e4:	8b a9       	ldd	r24, Y+51	; 0x33
    22e6:	9c a9       	ldd	r25, Y+52	; 0x34
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	3f ef       	ldi	r19, 0xFF	; 255
    22ec:	4f e7       	ldi	r20, 0x7F	; 127
    22ee:	57 e4       	ldi	r21, 0x47	; 71
    22f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22f4:	18 16       	cp	r1, r24
    22f6:	4c f5       	brge	.+82     	; 0x234a <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f8:	6d a9       	ldd	r22, Y+53	; 0x35
    22fa:	7e a9       	ldd	r23, Y+54	; 0x36
    22fc:	8f a9       	ldd	r24, Y+55	; 0x37
    22fe:	98 ad       	ldd	r25, Y+56	; 0x38
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e2       	ldi	r20, 0x20	; 32
    2306:	51 e4       	ldi	r21, 0x41	; 65
    2308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	bc 01       	movw	r22, r24
    2312:	cd 01       	movw	r24, r26
    2314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	98 ab       	std	Y+48, r25	; 0x30
    231e:	8f a7       	std	Y+47, r24	; 0x2f
    2320:	0f c0       	rjmp	.+30     	; 0x2340 <LCD_sendCommand+0xe4>
    2322:	89 e1       	ldi	r24, 0x19	; 25
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	9e a7       	std	Y+46, r25	; 0x2e
    2328:	8d a7       	std	Y+45, r24	; 0x2d
    232a:	8d a5       	ldd	r24, Y+45	; 0x2d
    232c:	9e a5       	ldd	r25, Y+46	; 0x2e
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	f1 f7       	brne	.-4      	; 0x232e <LCD_sendCommand+0xd2>
    2332:	9e a7       	std	Y+46, r25	; 0x2e
    2334:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2336:	8f a5       	ldd	r24, Y+47	; 0x2f
    2338:	98 a9       	ldd	r25, Y+48	; 0x30
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	98 ab       	std	Y+48, r25	; 0x30
    233e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2340:	8f a5       	ldd	r24, Y+47	; 0x2f
    2342:	98 a9       	ldd	r25, Y+48	; 0x30
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	69 f7       	brne	.-38     	; 0x2322 <LCD_sendCommand+0xc6>
    2348:	14 c0       	rjmp	.+40     	; 0x2372 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234a:	69 a9       	ldd	r22, Y+49	; 0x31
    234c:	7a a9       	ldd	r23, Y+50	; 0x32
    234e:	8b a9       	ldd	r24, Y+51	; 0x33
    2350:	9c a9       	ldd	r25, Y+52	; 0x34
    2352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	98 ab       	std	Y+48, r25	; 0x30
    235c:	8f a7       	std	Y+47, r24	; 0x2f
    235e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2360:	98 a9       	ldd	r25, Y+48	; 0x30
    2362:	9c a7       	std	Y+44, r25	; 0x2c
    2364:	8b a7       	std	Y+43, r24	; 0x2b
    2366:	8b a5       	ldd	r24, Y+43	; 0x2b
    2368:	9c a5       	ldd	r25, Y+44	; 0x2c
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	f1 f7       	brne	.-4      	; 0x236a <LCD_sendCommand+0x10e>
    236e:	9c a7       	std	Y+44, r25	; 0x2c
    2370:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2372:	a2 e3       	ldi	r26, 0x32	; 50
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e2 e3       	ldi	r30, 0x32	; 50
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	80 64       	ori	r24, 0x40	; 64
    237e:	8c 93       	st	X, r24
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	a0 e8       	ldi	r26, 0x80	; 128
    2386:	bf e3       	ldi	r27, 0x3F	; 63
    2388:	8f a3       	std	Y+39, r24	; 0x27
    238a:	98 a7       	std	Y+40, r25	; 0x28
    238c:	a9 a7       	std	Y+41, r26	; 0x29
    238e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2390:	6f a1       	ldd	r22, Y+39	; 0x27
    2392:	78 a5       	ldd	r23, Y+40	; 0x28
    2394:	89 a5       	ldd	r24, Y+41	; 0x29
    2396:	9a a5       	ldd	r25, Y+42	; 0x2a
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	4a e7       	ldi	r20, 0x7A	; 122
    239e:	53 e4       	ldi	r21, 0x43	; 67
    23a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	8b a3       	std	Y+35, r24	; 0x23
    23aa:	9c a3       	std	Y+36, r25	; 0x24
    23ac:	ad a3       	std	Y+37, r26	; 0x25
    23ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23b0:	6b a1       	ldd	r22, Y+35	; 0x23
    23b2:	7c a1       	ldd	r23, Y+36	; 0x24
    23b4:	8d a1       	ldd	r24, Y+37	; 0x25
    23b6:	9e a1       	ldd	r25, Y+38	; 0x26
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e8       	ldi	r20, 0x80	; 128
    23be:	5f e3       	ldi	r21, 0x3F	; 63
    23c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c4:	88 23       	and	r24, r24
    23c6:	2c f4       	brge	.+10     	; 0x23d2 <LCD_sendCommand+0x176>
		__ticks = 1;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	9a a3       	std	Y+34, r25	; 0x22
    23ce:	89 a3       	std	Y+33, r24	; 0x21
    23d0:	3f c0       	rjmp	.+126    	; 0x2450 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    23d2:	6b a1       	ldd	r22, Y+35	; 0x23
    23d4:	7c a1       	ldd	r23, Y+36	; 0x24
    23d6:	8d a1       	ldd	r24, Y+37	; 0x25
    23d8:	9e a1       	ldd	r25, Y+38	; 0x26
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	3f ef       	ldi	r19, 0xFF	; 255
    23de:	4f e7       	ldi	r20, 0x7F	; 127
    23e0:	57 e4       	ldi	r21, 0x47	; 71
    23e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e6:	18 16       	cp	r1, r24
    23e8:	4c f5       	brge	.+82     	; 0x243c <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ea:	6f a1       	ldd	r22, Y+39	; 0x27
    23ec:	78 a5       	ldd	r23, Y+40	; 0x28
    23ee:	89 a5       	ldd	r24, Y+41	; 0x29
    23f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e2       	ldi	r20, 0x20	; 32
    23f8:	51 e4       	ldi	r21, 0x41	; 65
    23fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	bc 01       	movw	r22, r24
    2404:	cd 01       	movw	r24, r26
    2406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	9a a3       	std	Y+34, r25	; 0x22
    2410:	89 a3       	std	Y+33, r24	; 0x21
    2412:	0f c0       	rjmp	.+30     	; 0x2432 <LCD_sendCommand+0x1d6>
    2414:	89 e1       	ldi	r24, 0x19	; 25
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	98 a3       	std	Y+32, r25	; 0x20
    241a:	8f 8f       	std	Y+31, r24	; 0x1f
    241c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    241e:	98 a1       	ldd	r25, Y+32	; 0x20
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	f1 f7       	brne	.-4      	; 0x2420 <LCD_sendCommand+0x1c4>
    2424:	98 a3       	std	Y+32, r25	; 0x20
    2426:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2428:	89 a1       	ldd	r24, Y+33	; 0x21
    242a:	9a a1       	ldd	r25, Y+34	; 0x22
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	9a a3       	std	Y+34, r25	; 0x22
    2430:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2432:	89 a1       	ldd	r24, Y+33	; 0x21
    2434:	9a a1       	ldd	r25, Y+34	; 0x22
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	69 f7       	brne	.-38     	; 0x2414 <LCD_sendCommand+0x1b8>
    243a:	14 c0       	rjmp	.+40     	; 0x2464 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243c:	6b a1       	ldd	r22, Y+35	; 0x23
    243e:	7c a1       	ldd	r23, Y+36	; 0x24
    2440:	8d a1       	ldd	r24, Y+37	; 0x25
    2442:	9e a1       	ldd	r25, Y+38	; 0x26
    2444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	9a a3       	std	Y+34, r25	; 0x22
    244e:	89 a3       	std	Y+33, r24	; 0x21
    2450:	89 a1       	ldd	r24, Y+33	; 0x21
    2452:	9a a1       	ldd	r25, Y+34	; 0x22
    2454:	9e 8f       	std	Y+30, r25	; 0x1e
    2456:	8d 8f       	std	Y+29, r24	; 0x1d
    2458:	8d 8d       	ldd	r24, Y+29	; 0x1d
    245a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	f1 f7       	brne	.-4      	; 0x245c <LCD_sendCommand+0x200>
    2460:	9e 8f       	std	Y+30, r25	; 0x1e
    2462:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    2464:	e8 e3       	ldi	r30, 0x38	; 56
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	89 ad       	ldd	r24, Y+57	; 0x39
    246a:	80 83       	st	Z, r24
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	a0 e8       	ldi	r26, 0x80	; 128
    2472:	bf e3       	ldi	r27, 0x3F	; 63
    2474:	89 8f       	std	Y+25, r24	; 0x19
    2476:	9a 8f       	std	Y+26, r25	; 0x1a
    2478:	ab 8f       	std	Y+27, r26	; 0x1b
    247a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    247c:	69 8d       	ldd	r22, Y+25	; 0x19
    247e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2480:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2482:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	4a e7       	ldi	r20, 0x7A	; 122
    248a:	53 e4       	ldi	r21, 0x43	; 67
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	8d 8b       	std	Y+21, r24	; 0x15
    2496:	9e 8b       	std	Y+22, r25	; 0x16
    2498:	af 8b       	std	Y+23, r26	; 0x17
    249a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    249c:	6d 89       	ldd	r22, Y+21	; 0x15
    249e:	7e 89       	ldd	r23, Y+22	; 0x16
    24a0:	8f 89       	ldd	r24, Y+23	; 0x17
    24a2:	98 8d       	ldd	r25, Y+24	; 0x18
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e8       	ldi	r20, 0x80	; 128
    24aa:	5f e3       	ldi	r21, 0x3F	; 63
    24ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b0:	88 23       	and	r24, r24
    24b2:	2c f4       	brge	.+10     	; 0x24be <LCD_sendCommand+0x262>
		__ticks = 1;
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	9c 8b       	std	Y+20, r25	; 0x14
    24ba:	8b 8b       	std	Y+19, r24	; 0x13
    24bc:	3f c0       	rjmp	.+126    	; 0x253c <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    24be:	6d 89       	ldd	r22, Y+21	; 0x15
    24c0:	7e 89       	ldd	r23, Y+22	; 0x16
    24c2:	8f 89       	ldd	r24, Y+23	; 0x17
    24c4:	98 8d       	ldd	r25, Y+24	; 0x18
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	3f ef       	ldi	r19, 0xFF	; 255
    24ca:	4f e7       	ldi	r20, 0x7F	; 127
    24cc:	57 e4       	ldi	r21, 0x47	; 71
    24ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24d2:	18 16       	cp	r1, r24
    24d4:	4c f5       	brge	.+82     	; 0x2528 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d6:	69 8d       	ldd	r22, Y+25	; 0x19
    24d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e2       	ldi	r20, 0x20	; 32
    24e4:	51 e4       	ldi	r21, 0x41	; 65
    24e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	bc 01       	movw	r22, r24
    24f0:	cd 01       	movw	r24, r26
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	9c 8b       	std	Y+20, r25	; 0x14
    24fc:	8b 8b       	std	Y+19, r24	; 0x13
    24fe:	0f c0       	rjmp	.+30     	; 0x251e <LCD_sendCommand+0x2c2>
    2500:	89 e1       	ldi	r24, 0x19	; 25
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	9a 8b       	std	Y+18, r25	; 0x12
    2506:	89 8b       	std	Y+17, r24	; 0x11
    2508:	89 89       	ldd	r24, Y+17	; 0x11
    250a:	9a 89       	ldd	r25, Y+18	; 0x12
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <LCD_sendCommand+0x2b0>
    2510:	9a 8b       	std	Y+18, r25	; 0x12
    2512:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2514:	8b 89       	ldd	r24, Y+19	; 0x13
    2516:	9c 89       	ldd	r25, Y+20	; 0x14
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	9c 8b       	std	Y+20, r25	; 0x14
    251c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251e:	8b 89       	ldd	r24, Y+19	; 0x13
    2520:	9c 89       	ldd	r25, Y+20	; 0x14
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	69 f7       	brne	.-38     	; 0x2500 <LCD_sendCommand+0x2a4>
    2526:	14 c0       	rjmp	.+40     	; 0x2550 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2528:	6d 89       	ldd	r22, Y+21	; 0x15
    252a:	7e 89       	ldd	r23, Y+22	; 0x16
    252c:	8f 89       	ldd	r24, Y+23	; 0x17
    252e:	98 8d       	ldd	r25, Y+24	; 0x18
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	9c 8b       	std	Y+20, r25	; 0x14
    253a:	8b 8b       	std	Y+19, r24	; 0x13
    253c:	8b 89       	ldd	r24, Y+19	; 0x13
    253e:	9c 89       	ldd	r25, Y+20	; 0x14
    2540:	98 8b       	std	Y+16, r25	; 0x10
    2542:	8f 87       	std	Y+15, r24	; 0x0f
    2544:	8f 85       	ldd	r24, Y+15	; 0x0f
    2546:	98 89       	ldd	r25, Y+16	; 0x10
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <LCD_sendCommand+0x2ec>
    254c:	98 8b       	std	Y+16, r25	; 0x10
    254e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2550:	a2 e3       	ldi	r26, 0x32	; 50
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	e2 e3       	ldi	r30, 0x32	; 50
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	8f 7b       	andi	r24, 0xBF	; 191
    255c:	8c 93       	st	X, r24
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	a0 e8       	ldi	r26, 0x80	; 128
    2564:	bf e3       	ldi	r27, 0x3F	; 63
    2566:	8b 87       	std	Y+11, r24	; 0x0b
    2568:	9c 87       	std	Y+12, r25	; 0x0c
    256a:	ad 87       	std	Y+13, r26	; 0x0d
    256c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2570:	7c 85       	ldd	r23, Y+12	; 0x0c
    2572:	8d 85       	ldd	r24, Y+13	; 0x0d
    2574:	9e 85       	ldd	r25, Y+14	; 0x0e
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	4a e7       	ldi	r20, 0x7A	; 122
    257c:	53 e4       	ldi	r21, 0x43	; 67
    257e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	8f 83       	std	Y+7, r24	; 0x07
    2588:	98 87       	std	Y+8, r25	; 0x08
    258a:	a9 87       	std	Y+9, r26	; 0x09
    258c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    258e:	6f 81       	ldd	r22, Y+7	; 0x07
    2590:	78 85       	ldd	r23, Y+8	; 0x08
    2592:	89 85       	ldd	r24, Y+9	; 0x09
    2594:	9a 85       	ldd	r25, Y+10	; 0x0a
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e8       	ldi	r20, 0x80	; 128
    259c:	5f e3       	ldi	r21, 0x3F	; 63
    259e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a2:	88 23       	and	r24, r24
    25a4:	2c f4       	brge	.+10     	; 0x25b0 <LCD_sendCommand+0x354>
		__ticks = 1;
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	9e 83       	std	Y+6, r25	; 0x06
    25ac:	8d 83       	std	Y+5, r24	; 0x05
    25ae:	3f c0       	rjmp	.+126    	; 0x262e <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    25b0:	6f 81       	ldd	r22, Y+7	; 0x07
    25b2:	78 85       	ldd	r23, Y+8	; 0x08
    25b4:	89 85       	ldd	r24, Y+9	; 0x09
    25b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	3f ef       	ldi	r19, 0xFF	; 255
    25bc:	4f e7       	ldi	r20, 0x7F	; 127
    25be:	57 e4       	ldi	r21, 0x47	; 71
    25c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c4:	18 16       	cp	r1, r24
    25c6:	4c f5       	brge	.+82     	; 0x261a <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    25cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e2       	ldi	r20, 0x20	; 32
    25d6:	51 e4       	ldi	r21, 0x41	; 65
    25d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	bc 01       	movw	r22, r24
    25e2:	cd 01       	movw	r24, r26
    25e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	9e 83       	std	Y+6, r25	; 0x06
    25ee:	8d 83       	std	Y+5, r24	; 0x05
    25f0:	0f c0       	rjmp	.+30     	; 0x2610 <LCD_sendCommand+0x3b4>
    25f2:	89 e1       	ldi	r24, 0x19	; 25
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	9c 83       	std	Y+4, r25	; 0x04
    25f8:	8b 83       	std	Y+3, r24	; 0x03
    25fa:	8b 81       	ldd	r24, Y+3	; 0x03
    25fc:	9c 81       	ldd	r25, Y+4	; 0x04
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	f1 f7       	brne	.-4      	; 0x25fe <LCD_sendCommand+0x3a2>
    2602:	9c 83       	std	Y+4, r25	; 0x04
    2604:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2606:	8d 81       	ldd	r24, Y+5	; 0x05
    2608:	9e 81       	ldd	r25, Y+6	; 0x06
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	9e 83       	std	Y+6, r25	; 0x06
    260e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2610:	8d 81       	ldd	r24, Y+5	; 0x05
    2612:	9e 81       	ldd	r25, Y+6	; 0x06
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	69 f7       	brne	.-38     	; 0x25f2 <LCD_sendCommand+0x396>
    2618:	14 c0       	rjmp	.+40     	; 0x2642 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261a:	6f 81       	ldd	r22, Y+7	; 0x07
    261c:	78 85       	ldd	r23, Y+8	; 0x08
    261e:	89 85       	ldd	r24, Y+9	; 0x09
    2620:	9a 85       	ldd	r25, Y+10	; 0x0a
    2622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	9e 83       	std	Y+6, r25	; 0x06
    262c:	8d 83       	std	Y+5, r24	; 0x05
    262e:	8d 81       	ldd	r24, Y+5	; 0x05
    2630:	9e 81       	ldd	r25, Y+6	; 0x06
    2632:	9a 83       	std	Y+2, r25	; 0x02
    2634:	89 83       	std	Y+1, r24	; 0x01
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	f1 f7       	brne	.-4      	; 0x263a <LCD_sendCommand+0x3de>
    263e:	9a 83       	std	Y+2, r25	; 0x02
    2640:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2642:	e9 96       	adiw	r28, 0x39	; 57
    2644:	0f b6       	in	r0, 0x3f	; 63
    2646:	f8 94       	cli
    2648:	de bf       	out	0x3e, r29	; 62
    264a:	0f be       	out	0x3f, r0	; 63
    264c:	cd bf       	out	0x3d, r28	; 61
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	e9 97       	sbiw	r28, 0x39	; 57
    265e:	0f b6       	in	r0, 0x3f	; 63
    2660:	f8 94       	cli
    2662:	de bf       	out	0x3e, r29	; 62
    2664:	0f be       	out	0x3f, r0	; 63
    2666:	cd bf       	out	0x3d, r28	; 61
    2668:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    266a:	a2 e3       	ldi	r26, 0x32	; 50
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	e2 e3       	ldi	r30, 0x32	; 50
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	80 61       	ori	r24, 0x10	; 16
    2676:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2678:	a2 e3       	ldi	r26, 0x32	; 50
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	e2 e3       	ldi	r30, 0x32	; 50
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	8f 7d       	andi	r24, 0xDF	; 223
    2684:	8c 93       	st	X, r24
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	a0 e8       	ldi	r26, 0x80	; 128
    268c:	bf e3       	ldi	r27, 0x3F	; 63
    268e:	8d ab       	std	Y+53, r24	; 0x35
    2690:	9e ab       	std	Y+54, r25	; 0x36
    2692:	af ab       	std	Y+55, r26	; 0x37
    2694:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2696:	6d a9       	ldd	r22, Y+53	; 0x35
    2698:	7e a9       	ldd	r23, Y+54	; 0x36
    269a:	8f a9       	ldd	r24, Y+55	; 0x37
    269c:	98 ad       	ldd	r25, Y+56	; 0x38
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	4a e7       	ldi	r20, 0x7A	; 122
    26a4:	53 e4       	ldi	r21, 0x43	; 67
    26a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	89 ab       	std	Y+49, r24	; 0x31
    26b0:	9a ab       	std	Y+50, r25	; 0x32
    26b2:	ab ab       	std	Y+51, r26	; 0x33
    26b4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26b6:	69 a9       	ldd	r22, Y+49	; 0x31
    26b8:	7a a9       	ldd	r23, Y+50	; 0x32
    26ba:	8b a9       	ldd	r24, Y+51	; 0x33
    26bc:	9c a9       	ldd	r25, Y+52	; 0x34
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e8       	ldi	r20, 0x80	; 128
    26c4:	5f e3       	ldi	r21, 0x3F	; 63
    26c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ca:	88 23       	and	r24, r24
    26cc:	2c f4       	brge	.+10     	; 0x26d8 <LCD_displayCharacter+0x84>
		__ticks = 1;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	98 ab       	std	Y+48, r25	; 0x30
    26d4:	8f a7       	std	Y+47, r24	; 0x2f
    26d6:	3f c0       	rjmp	.+126    	; 0x2756 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    26d8:	69 a9       	ldd	r22, Y+49	; 0x31
    26da:	7a a9       	ldd	r23, Y+50	; 0x32
    26dc:	8b a9       	ldd	r24, Y+51	; 0x33
    26de:	9c a9       	ldd	r25, Y+52	; 0x34
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	3f ef       	ldi	r19, 0xFF	; 255
    26e4:	4f e7       	ldi	r20, 0x7F	; 127
    26e6:	57 e4       	ldi	r21, 0x47	; 71
    26e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ec:	18 16       	cp	r1, r24
    26ee:	4c f5       	brge	.+82     	; 0x2742 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f0:	6d a9       	ldd	r22, Y+53	; 0x35
    26f2:	7e a9       	ldd	r23, Y+54	; 0x36
    26f4:	8f a9       	ldd	r24, Y+55	; 0x37
    26f6:	98 ad       	ldd	r25, Y+56	; 0x38
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e2       	ldi	r20, 0x20	; 32
    26fe:	51 e4       	ldi	r21, 0x41	; 65
    2700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	bc 01       	movw	r22, r24
    270a:	cd 01       	movw	r24, r26
    270c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	98 ab       	std	Y+48, r25	; 0x30
    2716:	8f a7       	std	Y+47, r24	; 0x2f
    2718:	0f c0       	rjmp	.+30     	; 0x2738 <LCD_displayCharacter+0xe4>
    271a:	89 e1       	ldi	r24, 0x19	; 25
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	9e a7       	std	Y+46, r25	; 0x2e
    2720:	8d a7       	std	Y+45, r24	; 0x2d
    2722:	8d a5       	ldd	r24, Y+45	; 0x2d
    2724:	9e a5       	ldd	r25, Y+46	; 0x2e
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <LCD_displayCharacter+0xd2>
    272a:	9e a7       	std	Y+46, r25	; 0x2e
    272c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2730:	98 a9       	ldd	r25, Y+48	; 0x30
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	98 ab       	std	Y+48, r25	; 0x30
    2736:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2738:	8f a5       	ldd	r24, Y+47	; 0x2f
    273a:	98 a9       	ldd	r25, Y+48	; 0x30
    273c:	00 97       	sbiw	r24, 0x00	; 0
    273e:	69 f7       	brne	.-38     	; 0x271a <LCD_displayCharacter+0xc6>
    2740:	14 c0       	rjmp	.+40     	; 0x276a <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2742:	69 a9       	ldd	r22, Y+49	; 0x31
    2744:	7a a9       	ldd	r23, Y+50	; 0x32
    2746:	8b a9       	ldd	r24, Y+51	; 0x33
    2748:	9c a9       	ldd	r25, Y+52	; 0x34
    274a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	98 ab       	std	Y+48, r25	; 0x30
    2754:	8f a7       	std	Y+47, r24	; 0x2f
    2756:	8f a5       	ldd	r24, Y+47	; 0x2f
    2758:	98 a9       	ldd	r25, Y+48	; 0x30
    275a:	9c a7       	std	Y+44, r25	; 0x2c
    275c:	8b a7       	std	Y+43, r24	; 0x2b
    275e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2760:	9c a5       	ldd	r25, Y+44	; 0x2c
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <LCD_displayCharacter+0x10e>
    2766:	9c a7       	std	Y+44, r25	; 0x2c
    2768:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    276a:	a2 e3       	ldi	r26, 0x32	; 50
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	e2 e3       	ldi	r30, 0x32	; 50
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	80 64       	ori	r24, 0x40	; 64
    2776:	8c 93       	st	X, r24
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	a0 e8       	ldi	r26, 0x80	; 128
    277e:	bf e3       	ldi	r27, 0x3F	; 63
    2780:	8f a3       	std	Y+39, r24	; 0x27
    2782:	98 a7       	std	Y+40, r25	; 0x28
    2784:	a9 a7       	std	Y+41, r26	; 0x29
    2786:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2788:	6f a1       	ldd	r22, Y+39	; 0x27
    278a:	78 a5       	ldd	r23, Y+40	; 0x28
    278c:	89 a5       	ldd	r24, Y+41	; 0x29
    278e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	4a e7       	ldi	r20, 0x7A	; 122
    2796:	53 e4       	ldi	r21, 0x43	; 67
    2798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	8b a3       	std	Y+35, r24	; 0x23
    27a2:	9c a3       	std	Y+36, r25	; 0x24
    27a4:	ad a3       	std	Y+37, r26	; 0x25
    27a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27a8:	6b a1       	ldd	r22, Y+35	; 0x23
    27aa:	7c a1       	ldd	r23, Y+36	; 0x24
    27ac:	8d a1       	ldd	r24, Y+37	; 0x25
    27ae:	9e a1       	ldd	r25, Y+38	; 0x26
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e8       	ldi	r20, 0x80	; 128
    27b6:	5f e3       	ldi	r21, 0x3F	; 63
    27b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27bc:	88 23       	and	r24, r24
    27be:	2c f4       	brge	.+10     	; 0x27ca <LCD_displayCharacter+0x176>
		__ticks = 1;
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	9a a3       	std	Y+34, r25	; 0x22
    27c6:	89 a3       	std	Y+33, r24	; 0x21
    27c8:	3f c0       	rjmp	.+126    	; 0x2848 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    27ca:	6b a1       	ldd	r22, Y+35	; 0x23
    27cc:	7c a1       	ldd	r23, Y+36	; 0x24
    27ce:	8d a1       	ldd	r24, Y+37	; 0x25
    27d0:	9e a1       	ldd	r25, Y+38	; 0x26
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	3f ef       	ldi	r19, 0xFF	; 255
    27d6:	4f e7       	ldi	r20, 0x7F	; 127
    27d8:	57 e4       	ldi	r21, 0x47	; 71
    27da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27de:	18 16       	cp	r1, r24
    27e0:	4c f5       	brge	.+82     	; 0x2834 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e2:	6f a1       	ldd	r22, Y+39	; 0x27
    27e4:	78 a5       	ldd	r23, Y+40	; 0x28
    27e6:	89 a5       	ldd	r24, Y+41	; 0x29
    27e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	40 e2       	ldi	r20, 0x20	; 32
    27f0:	51 e4       	ldi	r21, 0x41	; 65
    27f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	bc 01       	movw	r22, r24
    27fc:	cd 01       	movw	r24, r26
    27fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	9a a3       	std	Y+34, r25	; 0x22
    2808:	89 a3       	std	Y+33, r24	; 0x21
    280a:	0f c0       	rjmp	.+30     	; 0x282a <LCD_displayCharacter+0x1d6>
    280c:	89 e1       	ldi	r24, 0x19	; 25
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	98 a3       	std	Y+32, r25	; 0x20
    2812:	8f 8f       	std	Y+31, r24	; 0x1f
    2814:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2816:	98 a1       	ldd	r25, Y+32	; 0x20
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	f1 f7       	brne	.-4      	; 0x2818 <LCD_displayCharacter+0x1c4>
    281c:	98 a3       	std	Y+32, r25	; 0x20
    281e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2820:	89 a1       	ldd	r24, Y+33	; 0x21
    2822:	9a a1       	ldd	r25, Y+34	; 0x22
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	9a a3       	std	Y+34, r25	; 0x22
    2828:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282a:	89 a1       	ldd	r24, Y+33	; 0x21
    282c:	9a a1       	ldd	r25, Y+34	; 0x22
    282e:	00 97       	sbiw	r24, 0x00	; 0
    2830:	69 f7       	brne	.-38     	; 0x280c <LCD_displayCharacter+0x1b8>
    2832:	14 c0       	rjmp	.+40     	; 0x285c <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2834:	6b a1       	ldd	r22, Y+35	; 0x23
    2836:	7c a1       	ldd	r23, Y+36	; 0x24
    2838:	8d a1       	ldd	r24, Y+37	; 0x25
    283a:	9e a1       	ldd	r25, Y+38	; 0x26
    283c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	9a a3       	std	Y+34, r25	; 0x22
    2846:	89 a3       	std	Y+33, r24	; 0x21
    2848:	89 a1       	ldd	r24, Y+33	; 0x21
    284a:	9a a1       	ldd	r25, Y+34	; 0x22
    284c:	9e 8f       	std	Y+30, r25	; 0x1e
    284e:	8d 8f       	std	Y+29, r24	; 0x1d
    2850:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2852:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <LCD_displayCharacter+0x200>
    2858:	9e 8f       	std	Y+30, r25	; 0x1e
    285a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    285c:	e8 e3       	ldi	r30, 0x38	; 56
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	89 ad       	ldd	r24, Y+57	; 0x39
    2862:	80 83       	st	Z, r24
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	a0 e8       	ldi	r26, 0x80	; 128
    286a:	bf e3       	ldi	r27, 0x3F	; 63
    286c:	89 8f       	std	Y+25, r24	; 0x19
    286e:	9a 8f       	std	Y+26, r25	; 0x1a
    2870:	ab 8f       	std	Y+27, r26	; 0x1b
    2872:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2874:	69 8d       	ldd	r22, Y+25	; 0x19
    2876:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2878:	8b 8d       	ldd	r24, Y+27	; 0x1b
    287a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	4a e7       	ldi	r20, 0x7A	; 122
    2882:	53 e4       	ldi	r21, 0x43	; 67
    2884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	8d 8b       	std	Y+21, r24	; 0x15
    288e:	9e 8b       	std	Y+22, r25	; 0x16
    2890:	af 8b       	std	Y+23, r26	; 0x17
    2892:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2894:	6d 89       	ldd	r22, Y+21	; 0x15
    2896:	7e 89       	ldd	r23, Y+22	; 0x16
    2898:	8f 89       	ldd	r24, Y+23	; 0x17
    289a:	98 8d       	ldd	r25, Y+24	; 0x18
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e8       	ldi	r20, 0x80	; 128
    28a2:	5f e3       	ldi	r21, 0x3F	; 63
    28a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28a8:	88 23       	and	r24, r24
    28aa:	2c f4       	brge	.+10     	; 0x28b6 <LCD_displayCharacter+0x262>
		__ticks = 1;
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	9c 8b       	std	Y+20, r25	; 0x14
    28b2:	8b 8b       	std	Y+19, r24	; 0x13
    28b4:	3f c0       	rjmp	.+126    	; 0x2934 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    28b6:	6d 89       	ldd	r22, Y+21	; 0x15
    28b8:	7e 89       	ldd	r23, Y+22	; 0x16
    28ba:	8f 89       	ldd	r24, Y+23	; 0x17
    28bc:	98 8d       	ldd	r25, Y+24	; 0x18
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	3f ef       	ldi	r19, 0xFF	; 255
    28c2:	4f e7       	ldi	r20, 0x7F	; 127
    28c4:	57 e4       	ldi	r21, 0x47	; 71
    28c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ca:	18 16       	cp	r1, r24
    28cc:	4c f5       	brge	.+82     	; 0x2920 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ce:	69 8d       	ldd	r22, Y+25	; 0x19
    28d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	40 e2       	ldi	r20, 0x20	; 32
    28dc:	51 e4       	ldi	r21, 0x41	; 65
    28de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	bc 01       	movw	r22, r24
    28e8:	cd 01       	movw	r24, r26
    28ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	9c 8b       	std	Y+20, r25	; 0x14
    28f4:	8b 8b       	std	Y+19, r24	; 0x13
    28f6:	0f c0       	rjmp	.+30     	; 0x2916 <LCD_displayCharacter+0x2c2>
    28f8:	89 e1       	ldi	r24, 0x19	; 25
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	9a 8b       	std	Y+18, r25	; 0x12
    28fe:	89 8b       	std	Y+17, r24	; 0x11
    2900:	89 89       	ldd	r24, Y+17	; 0x11
    2902:	9a 89       	ldd	r25, Y+18	; 0x12
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <LCD_displayCharacter+0x2b0>
    2908:	9a 8b       	std	Y+18, r25	; 0x12
    290a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    290c:	8b 89       	ldd	r24, Y+19	; 0x13
    290e:	9c 89       	ldd	r25, Y+20	; 0x14
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	9c 8b       	std	Y+20, r25	; 0x14
    2914:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2916:	8b 89       	ldd	r24, Y+19	; 0x13
    2918:	9c 89       	ldd	r25, Y+20	; 0x14
    291a:	00 97       	sbiw	r24, 0x00	; 0
    291c:	69 f7       	brne	.-38     	; 0x28f8 <LCD_displayCharacter+0x2a4>
    291e:	14 c0       	rjmp	.+40     	; 0x2948 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2920:	6d 89       	ldd	r22, Y+21	; 0x15
    2922:	7e 89       	ldd	r23, Y+22	; 0x16
    2924:	8f 89       	ldd	r24, Y+23	; 0x17
    2926:	98 8d       	ldd	r25, Y+24	; 0x18
    2928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	9c 8b       	std	Y+20, r25	; 0x14
    2932:	8b 8b       	std	Y+19, r24	; 0x13
    2934:	8b 89       	ldd	r24, Y+19	; 0x13
    2936:	9c 89       	ldd	r25, Y+20	; 0x14
    2938:	98 8b       	std	Y+16, r25	; 0x10
    293a:	8f 87       	std	Y+15, r24	; 0x0f
    293c:	8f 85       	ldd	r24, Y+15	; 0x0f
    293e:	98 89       	ldd	r25, Y+16	; 0x10
    2940:	01 97       	sbiw	r24, 0x01	; 1
    2942:	f1 f7       	brne	.-4      	; 0x2940 <LCD_displayCharacter+0x2ec>
    2944:	98 8b       	std	Y+16, r25	; 0x10
    2946:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2948:	a2 e3       	ldi	r26, 0x32	; 50
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	e2 e3       	ldi	r30, 0x32	; 50
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	8f 7b       	andi	r24, 0xBF	; 191
    2954:	8c 93       	st	X, r24
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	a0 e8       	ldi	r26, 0x80	; 128
    295c:	bf e3       	ldi	r27, 0x3F	; 63
    295e:	8b 87       	std	Y+11, r24	; 0x0b
    2960:	9c 87       	std	Y+12, r25	; 0x0c
    2962:	ad 87       	std	Y+13, r26	; 0x0d
    2964:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2966:	6b 85       	ldd	r22, Y+11	; 0x0b
    2968:	7c 85       	ldd	r23, Y+12	; 0x0c
    296a:	8d 85       	ldd	r24, Y+13	; 0x0d
    296c:	9e 85       	ldd	r25, Y+14	; 0x0e
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	4a e7       	ldi	r20, 0x7A	; 122
    2974:	53 e4       	ldi	r21, 0x43	; 67
    2976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	8f 83       	std	Y+7, r24	; 0x07
    2980:	98 87       	std	Y+8, r25	; 0x08
    2982:	a9 87       	std	Y+9, r26	; 0x09
    2984:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2986:	6f 81       	ldd	r22, Y+7	; 0x07
    2988:	78 85       	ldd	r23, Y+8	; 0x08
    298a:	89 85       	ldd	r24, Y+9	; 0x09
    298c:	9a 85       	ldd	r25, Y+10	; 0x0a
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	40 e8       	ldi	r20, 0x80	; 128
    2994:	5f e3       	ldi	r21, 0x3F	; 63
    2996:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    299a:	88 23       	and	r24, r24
    299c:	2c f4       	brge	.+10     	; 0x29a8 <LCD_displayCharacter+0x354>
		__ticks = 1;
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	9e 83       	std	Y+6, r25	; 0x06
    29a4:	8d 83       	std	Y+5, r24	; 0x05
    29a6:	3f c0       	rjmp	.+126    	; 0x2a26 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    29a8:	6f 81       	ldd	r22, Y+7	; 0x07
    29aa:	78 85       	ldd	r23, Y+8	; 0x08
    29ac:	89 85       	ldd	r24, Y+9	; 0x09
    29ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	3f ef       	ldi	r19, 0xFF	; 255
    29b4:	4f e7       	ldi	r20, 0x7F	; 127
    29b6:	57 e4       	ldi	r21, 0x47	; 71
    29b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29bc:	18 16       	cp	r1, r24
    29be:	4c f5       	brge	.+82     	; 0x2a12 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e2       	ldi	r20, 0x20	; 32
    29ce:	51 e4       	ldi	r21, 0x41	; 65
    29d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	bc 01       	movw	r22, r24
    29da:	cd 01       	movw	r24, r26
    29dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	9e 83       	std	Y+6, r25	; 0x06
    29e6:	8d 83       	std	Y+5, r24	; 0x05
    29e8:	0f c0       	rjmp	.+30     	; 0x2a08 <LCD_displayCharacter+0x3b4>
    29ea:	89 e1       	ldi	r24, 0x19	; 25
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	9c 83       	std	Y+4, r25	; 0x04
    29f0:	8b 83       	std	Y+3, r24	; 0x03
    29f2:	8b 81       	ldd	r24, Y+3	; 0x03
    29f4:	9c 81       	ldd	r25, Y+4	; 0x04
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	f1 f7       	brne	.-4      	; 0x29f6 <LCD_displayCharacter+0x3a2>
    29fa:	9c 83       	std	Y+4, r25	; 0x04
    29fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2a00:	9e 81       	ldd	r25, Y+6	; 0x06
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	9e 83       	std	Y+6, r25	; 0x06
    2a06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a08:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0c:	00 97       	sbiw	r24, 0x00	; 0
    2a0e:	69 f7       	brne	.-38     	; 0x29ea <LCD_displayCharacter+0x396>
    2a10:	14 c0       	rjmp	.+40     	; 0x2a3a <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a12:	6f 81       	ldd	r22, Y+7	; 0x07
    2a14:	78 85       	ldd	r23, Y+8	; 0x08
    2a16:	89 85       	ldd	r24, Y+9	; 0x09
    2a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	9e 83       	std	Y+6, r25	; 0x06
    2a24:	8d 83       	std	Y+5, r24	; 0x05
    2a26:	8d 81       	ldd	r24, Y+5	; 0x05
    2a28:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2a:	9a 83       	std	Y+2, r25	; 0x02
    2a2c:	89 83       	std	Y+1, r24	; 0x01
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	9a 81       	ldd	r25, Y+2	; 0x02
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	f1 f7       	brne	.-4      	; 0x2a32 <LCD_displayCharacter+0x3de>
    2a36:	9a 83       	std	Y+2, r25	; 0x02
    2a38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    2a3a:	e9 96       	adiw	r28, 0x39	; 57
    2a3c:	0f b6       	in	r0, 0x3f	; 63
    2a3e:	f8 94       	cli
    2a40:	de bf       	out	0x3e, r29	; 62
    2a42:	0f be       	out	0x3f, r0	; 63
    2a44:	cd bf       	out	0x3d, r28	; 61
    2a46:	cf 91       	pop	r28
    2a48:	df 91       	pop	r29
    2a4a:	08 95       	ret

00002a4c <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	00 d0       	rcall	.+0      	; 0x2a52 <LCD_displayString+0x6>
    2a52:	0f 92       	push	r0
    2a54:	cd b7       	in	r28, 0x3d	; 61
    2a56:	de b7       	in	r29, 0x3e	; 62
    2a58:	9b 83       	std	Y+3, r25	; 0x03
    2a5a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a5c:	19 82       	std	Y+1, r1	; 0x01
    2a5e:	0e c0       	rjmp	.+28     	; 0x2a7c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	28 2f       	mov	r18, r24
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	9b 81       	ldd	r25, Y+3	; 0x03
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	e2 0f       	add	r30, r18
    2a6e:	f3 1f       	adc	r31, r19
    2a70:	80 81       	ld	r24, Z
    2a72:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_displayCharacter>
		i++;
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	8f 5f       	subi	r24, 0xFF	; 255
    2a7a:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	28 2f       	mov	r18, r24
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	8a 81       	ldd	r24, Y+2	; 0x02
    2a84:	9b 81       	ldd	r25, Y+3	; 0x03
    2a86:	fc 01       	movw	r30, r24
    2a88:	e2 0f       	add	r30, r18
    2a8a:	f3 1f       	adc	r31, r19
    2a8c:	80 81       	ld	r24, Z
    2a8e:	88 23       	and	r24, r24
    2a90:	39 f7       	brne	.-50     	; 0x2a60 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	cf 91       	pop	r28
    2a9a:	df 91       	pop	r29
    2a9c:	08 95       	ret

00002a9e <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	00 d0       	rcall	.+0      	; 0x2aa4 <LCD_goToRowColumn+0x6>
    2aa4:	00 d0       	rcall	.+0      	; 0x2aa6 <LCD_goToRowColumn+0x8>
    2aa6:	0f 92       	push	r0
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
    2aac:	8a 83       	std	Y+2, r24	; 0x02
    2aae:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab2:	28 2f       	mov	r18, r24
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	3d 83       	std	Y+5, r19	; 0x05
    2ab8:	2c 83       	std	Y+4, r18	; 0x04
    2aba:	8c 81       	ldd	r24, Y+4	; 0x04
    2abc:	9d 81       	ldd	r25, Y+5	; 0x05
    2abe:	81 30       	cpi	r24, 0x01	; 1
    2ac0:	91 05       	cpc	r25, r1
    2ac2:	c1 f0       	breq	.+48     	; 0x2af4 <LCD_goToRowColumn+0x56>
    2ac4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ac6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ac8:	22 30       	cpi	r18, 0x02	; 2
    2aca:	31 05       	cpc	r19, r1
    2acc:	2c f4       	brge	.+10     	; 0x2ad8 <LCD_goToRowColumn+0x3a>
    2ace:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ad2:	00 97       	sbiw	r24, 0x00	; 0
    2ad4:	61 f0       	breq	.+24     	; 0x2aee <LCD_goToRowColumn+0x50>
    2ad6:	19 c0       	rjmp	.+50     	; 0x2b0a <LCD_goToRowColumn+0x6c>
    2ad8:	2c 81       	ldd	r18, Y+4	; 0x04
    2ada:	3d 81       	ldd	r19, Y+5	; 0x05
    2adc:	22 30       	cpi	r18, 0x02	; 2
    2ade:	31 05       	cpc	r19, r1
    2ae0:	69 f0       	breq	.+26     	; 0x2afc <LCD_goToRowColumn+0x5e>
    2ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ae6:	83 30       	cpi	r24, 0x03	; 3
    2ae8:	91 05       	cpc	r25, r1
    2aea:	61 f0       	breq	.+24     	; 0x2b04 <LCD_goToRowColumn+0x66>
    2aec:	0e c0       	rjmp	.+28     	; 0x2b0a <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2aee:	8b 81       	ldd	r24, Y+3	; 0x03
    2af0:	89 83       	std	Y+1, r24	; 0x01
    2af2:	0b c0       	rjmp	.+22     	; 0x2b0a <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	80 5c       	subi	r24, 0xC0	; 192
    2af8:	89 83       	std	Y+1, r24	; 0x01
    2afa:	07 c0       	rjmp	.+14     	; 0x2b0a <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2afc:	8b 81       	ldd	r24, Y+3	; 0x03
    2afe:	80 5f       	subi	r24, 0xF0	; 240
    2b00:	89 83       	std	Y+1, r24	; 0x01
    2b02:	03 c0       	rjmp	.+6      	; 0x2b0a <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2b04:	8b 81       	ldd	r24, Y+3	; 0x03
    2b06:	80 5b       	subi	r24, 0xB0	; 176
    2b08:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2b0a:	89 81       	ldd	r24, Y+1	; 0x01
    2b0c:	80 68       	ori	r24, 0x80	; 128
    2b0e:	0e 94 2e 11 	call	0x225c	; 0x225c <LCD_sendCommand>
}
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	cf 91       	pop	r28
    2b1e:	df 91       	pop	r29
    2b20:	08 95       	ret

00002b22 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2b22:	df 93       	push	r29
    2b24:	cf 93       	push	r28
    2b26:	00 d0       	rcall	.+0      	; 0x2b28 <LCD_displayStringRowColumn+0x6>
    2b28:	00 d0       	rcall	.+0      	; 0x2b2a <LCD_displayStringRowColumn+0x8>
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
    2b2e:	89 83       	std	Y+1, r24	; 0x01
    2b30:	6a 83       	std	Y+2, r22	; 0x02
    2b32:	5c 83       	std	Y+4, r21	; 0x04
    2b34:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	6a 81       	ldd	r22, Y+2	; 0x02
    2b3a:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b40:	9c 81       	ldd	r25, Y+4	; 0x04
    2b42:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_displayString>
}
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	08 95       	ret

00002b54 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	cd b7       	in	r28, 0x3d	; 61
    2b5a:	de b7       	in	r29, 0x3e	; 62
    2b5c:	62 97       	sbiw	r28, 0x12	; 18
    2b5e:	0f b6       	in	r0, 0x3f	; 63
    2b60:	f8 94       	cli
    2b62:	de bf       	out	0x3e, r29	; 62
    2b64:	0f be       	out	0x3f, r0	; 63
    2b66:	cd bf       	out	0x3d, r28	; 61
    2b68:	9a 8b       	std	Y+18, r25	; 0x12
    2b6a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2b6c:	89 89       	ldd	r24, Y+17	; 0x11
    2b6e:	9a 89       	ldd	r25, Y+18	; 0x12
    2b70:	9e 01       	movw	r18, r28
    2b72:	2f 5f       	subi	r18, 0xFF	; 255
    2b74:	3f 4f       	sbci	r19, 0xFF	; 255
    2b76:	b9 01       	movw	r22, r18
    2b78:	4a e0       	ldi	r20, 0x0A	; 10
    2b7a:	50 e0       	ldi	r21, 0x00	; 0
    2b7c:	0e 94 29 17 	call	0x2e52	; 0x2e52 <itoa>
   LCD_displayString(buff);
    2b80:	ce 01       	movw	r24, r28
    2b82:	01 96       	adiw	r24, 0x01	; 1
    2b84:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <LCD_displayString>
}
    2b88:	62 96       	adiw	r28, 0x12	; 18
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	f8 94       	cli
    2b8e:	de bf       	out	0x3e, r29	; 62
    2b90:	0f be       	out	0x3f, r0	; 63
    2b92:	cd bf       	out	0x3d, r28	; 61
    2b94:	cf 91       	pop	r28
    2b96:	df 91       	pop	r29
    2b98:	08 95       	ret

00002b9a <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2b9a:	df 93       	push	r29
    2b9c:	cf 93       	push	r28
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	0e 94 2e 11 	call	0x225c	; 0x225c <LCD_sendCommand>
}
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <Timer_OF_init>:

unsigned int g_tick = 0;
static volatile void (*g_Timer0_Call_Back_Ptr)(void);

void Timer_OF_init()
{
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1<<FOC0) | (1<<CS00) | (CS02);
    2bb6:	e3 e5       	ldi	r30, 0x53	; 83
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	83 e8       	ldi	r24, 0x83	; 131
    2bbc:	80 83       	st	Z, r24
	TCNT0 = 0;
    2bbe:	e2 e5       	ldi	r30, 0x52	; 82
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	10 82       	st	Z, r1
	TIMSK = (1<<TOIE0);
    2bc4:	e9 e5       	ldi	r30, 0x59	; 89
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	80 83       	st	Z, r24
}
    2bcc:	cf 91       	pop	r28
    2bce:	df 91       	pop	r29
    2bd0:	08 95       	ret

00002bd2 <setCallBackFunc>:
{
	TCCR0 = (1<<WGM01) | (1<<WGM00) | (1<<CS00) | (CS02);
}
*/
void setCallBackFunc(void(*ptr2func)(uint8))
{
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	00 d0       	rcall	.+0      	; 0x2bd8 <setCallBackFunc+0x6>
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	9a 83       	std	Y+2, r25	; 0x02
    2bde:	89 83       	std	Y+1, r24	; 0x01
	g_Timer0_Call_Back_Ptr = ptr2func;
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	9a 81       	ldd	r25, Y+2	; 0x02
    2be4:	90 93 a5 00 	sts	0x00A5, r25
    2be8:	80 93 a4 00 	sts	0x00A4, r24
}
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	08 95       	ret

00002bf6 <Timer_stop>:

void Timer_stop ()
{
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    2bfe:	e3 e5       	ldi	r30, 0x53	; 83
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	10 82       	st	Z, r1
}
    2c04:	cf 91       	pop	r28
    2c06:	df 91       	pop	r29
    2c08:	08 95       	ret

00002c0a <__vector_9>:

ISR (TIMER0_OVF_vect)
{
    2c0a:	1f 92       	push	r1
    2c0c:	0f 92       	push	r0
    2c0e:	0f b6       	in	r0, 0x3f	; 63
    2c10:	0f 92       	push	r0
    2c12:	11 24       	eor	r1, r1
    2c14:	2f 93       	push	r18
    2c16:	3f 93       	push	r19
    2c18:	4f 93       	push	r20
    2c1a:	5f 93       	push	r21
    2c1c:	6f 93       	push	r22
    2c1e:	7f 93       	push	r23
    2c20:	8f 93       	push	r24
    2c22:	9f 93       	push	r25
    2c24:	af 93       	push	r26
    2c26:	bf 93       	push	r27
    2c28:	ef 93       	push	r30
    2c2a:	ff 93       	push	r31
    2c2c:	df 93       	push	r29
    2c2e:	cf 93       	push	r28
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    2c34:	80 91 a2 00 	lds	r24, 0x00A2
    2c38:	90 91 a3 00 	lds	r25, 0x00A3
    2c3c:	01 96       	adiw	r24, 0x01	; 1
    2c3e:	90 93 a3 00 	sts	0x00A3, r25
    2c42:	80 93 a2 00 	sts	0x00A2, r24
	if(g_tick == NUMBER_OF_OVERFLOWS_PER_SECOND)
    2c46:	80 91 a2 00 	lds	r24, 0x00A2
    2c4a:	90 91 a3 00 	lds	r25, 0x00A3
    2c4e:	8f 31       	cpi	r24, 0x1F	; 31
    2c50:	91 05       	cpc	r25, r1
    2c52:	49 f4       	brne	.+18     	; 0x2c66 <__vector_9+0x5c>
	{
		g_Timer0_Call_Back_Ptr();
    2c54:	e0 91 a4 00 	lds	r30, 0x00A4
    2c58:	f0 91 a5 00 	lds	r31, 0x00A5
    2c5c:	09 95       	icall
		g_tick = 0;
    2c5e:	10 92 a3 00 	sts	0x00A3, r1
    2c62:	10 92 a2 00 	sts	0x00A2, r1
	}
}
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	ff 91       	pop	r31
    2c6c:	ef 91       	pop	r30
    2c6e:	bf 91       	pop	r27
    2c70:	af 91       	pop	r26
    2c72:	9f 91       	pop	r25
    2c74:	8f 91       	pop	r24
    2c76:	7f 91       	pop	r23
    2c78:	6f 91       	pop	r22
    2c7a:	5f 91       	pop	r21
    2c7c:	4f 91       	pop	r20
    2c7e:	3f 91       	pop	r19
    2c80:	2f 91       	pop	r18
    2c82:	0f 90       	pop	r0
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	0f 90       	pop	r0
    2c88:	1f 90       	pop	r1
    2c8a:	18 95       	reti

00002c8c <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    2c8c:	df 93       	push	r29
    2c8e:	cf 93       	push	r28
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2c94:	eb e2       	ldi	r30, 0x2B	; 43
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	82 e0       	ldi	r24, 0x02	; 2
    2c9a:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2c9c:	ea e2       	ldi	r30, 0x2A	; 42
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	88 e1       	ldi	r24, 0x18	; 24
    2ca2:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2ca4:	e0 e4       	ldi	r30, 0x40	; 64
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	86 e8       	ldi	r24, 0x86	; 134
    2caa:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    2cac:	e0 e4       	ldi	r30, 0x40	; 64
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    2cb2:	e9 e2       	ldi	r30, 0x29	; 41
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	8c e0       	ldi	r24, 0x0C	; 12
    2cb8:	80 83       	st	Z, r24
}
    2cba:	cf 91       	pop	r28
    2cbc:	df 91       	pop	r29
    2cbe:	08 95       	ret

00002cc0 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    2cc0:	df 93       	push	r29
    2cc2:	cf 93       	push	r28
    2cc4:	0f 92       	push	r0
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
    2cca:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2ccc:	eb e2       	ldi	r30, 0x2B	; 43
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	88 2f       	mov	r24, r24
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	80 72       	andi	r24, 0x20	; 32
    2cd8:	90 70       	andi	r25, 0x00	; 0
    2cda:	00 97       	sbiw	r24, 0x00	; 0
    2cdc:	b9 f3       	breq	.-18     	; 0x2ccc <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    2cde:	ec e2       	ldi	r30, 0x2C	; 44
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
    2ce4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    2ce6:	0f 90       	pop	r0
    2ce8:	cf 91       	pop	r28
    2cea:	df 91       	pop	r29
    2cec:	08 95       	ret

00002cee <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2cee:	df 93       	push	r29
    2cf0:	cf 93       	push	r28
    2cf2:	cd b7       	in	r28, 0x3d	; 61
    2cf4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2cf6:	eb e2       	ldi	r30, 0x2B	; 43
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	88 23       	and	r24, r24
    2cfe:	dc f7       	brge	.-10     	; 0x2cf6 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2d00:	ec e2       	ldi	r30, 0x2C	; 44
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
}
    2d06:	cf 91       	pop	r28
    2d08:	df 91       	pop	r29
    2d0a:	08 95       	ret

00002d0c <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2d0c:	df 93       	push	r29
    2d0e:	cf 93       	push	r28
    2d10:	00 d0       	rcall	.+0      	; 0x2d12 <UART_sendString+0x6>
    2d12:	0f 92       	push	r0
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    2d18:	9b 83       	std	Y+3, r25	; 0x03
    2d1a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d1c:	19 82       	std	Y+1, r1	; 0x01
    2d1e:	0e c0       	rjmp	.+28     	; 0x2d3c <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	28 2f       	mov	r18, r24
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2a:	fc 01       	movw	r30, r24
    2d2c:	e2 0f       	add	r30, r18
    2d2e:	f3 1f       	adc	r31, r19
    2d30:	80 81       	ld	r24, Z
    2d32:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <UART_sendByte>
		i++;
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	8f 5f       	subi	r24, 0xFF	; 255
    2d3a:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	28 2f       	mov	r18, r24
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	8a 81       	ldd	r24, Y+2	; 0x02
    2d44:	9b 81       	ldd	r25, Y+3	; 0x03
    2d46:	fc 01       	movw	r30, r24
    2d48:	e2 0f       	add	r30, r18
    2d4a:	f3 1f       	adc	r31, r19
    2d4c:	80 81       	ld	r24, Z
    2d4e:	88 23       	and	r24, r24
    2d50:	39 f7       	brne	.-50     	; 0x2d20 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2d52:	0f 90       	pop	r0
    2d54:	0f 90       	pop	r0
    2d56:	0f 90       	pop	r0
    2d58:	cf 91       	pop	r28
    2d5a:	df 91       	pop	r29
    2d5c:	08 95       	ret

00002d5e <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2d5e:	0f 93       	push	r16
    2d60:	1f 93       	push	r17
    2d62:	df 93       	push	r29
    2d64:	cf 93       	push	r28
    2d66:	00 d0       	rcall	.+0      	; 0x2d68 <UART_receiveString+0xa>
    2d68:	0f 92       	push	r0
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
    2d6e:	9b 83       	std	Y+3, r25	; 0x03
    2d70:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d72:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	28 2f       	mov	r18, r24
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7e:	8c 01       	movw	r16, r24
    2d80:	02 0f       	add	r16, r18
    2d82:	13 1f       	adc	r17, r19
    2d84:	0e 94 77 16 	call	0x2cee	; 0x2cee <UART_recieveByte>
    2d88:	f8 01       	movw	r30, r16
    2d8a:	80 83       	st	Z, r24
    2d8c:	0f c0       	rjmp	.+30     	; 0x2dac <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	8f 5f       	subi	r24, 0xFF	; 255
    2d92:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	28 2f       	mov	r18, r24
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9e:	8c 01       	movw	r16, r24
    2da0:	02 0f       	add	r16, r18
    2da2:	13 1f       	adc	r17, r19
    2da4:	0e 94 77 16 	call	0x2cee	; 0x2cee <UART_recieveByte>
    2da8:	f8 01       	movw	r30, r16
    2daa:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	28 2f       	mov	r18, r24
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	8a 81       	ldd	r24, Y+2	; 0x02
    2db4:	9b 81       	ldd	r25, Y+3	; 0x03
    2db6:	fc 01       	movw	r30, r24
    2db8:	e2 0f       	add	r30, r18
    2dba:	f3 1f       	adc	r31, r19
    2dbc:	80 81       	ld	r24, Z
    2dbe:	83 32       	cpi	r24, 0x23	; 35
    2dc0:	31 f7       	brne	.-52     	; 0x2d8e <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	28 2f       	mov	r18, r24
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dca:	9b 81       	ldd	r25, Y+3	; 0x03
    2dcc:	fc 01       	movw	r30, r24
    2dce:	e2 0f       	add	r30, r18
    2dd0:	f3 1f       	adc	r31, r19
    2dd2:	10 82       	st	Z, r1
}
    2dd4:	0f 90       	pop	r0
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	cf 91       	pop	r28
    2ddc:	df 91       	pop	r29
    2dde:	1f 91       	pop	r17
    2de0:	0f 91       	pop	r16
    2de2:	08 95       	ret

00002de4 <__prologue_saves__>:
    2de4:	2f 92       	push	r2
    2de6:	3f 92       	push	r3
    2de8:	4f 92       	push	r4
    2dea:	5f 92       	push	r5
    2dec:	6f 92       	push	r6
    2dee:	7f 92       	push	r7
    2df0:	8f 92       	push	r8
    2df2:	9f 92       	push	r9
    2df4:	af 92       	push	r10
    2df6:	bf 92       	push	r11
    2df8:	cf 92       	push	r12
    2dfa:	df 92       	push	r13
    2dfc:	ef 92       	push	r14
    2dfe:	ff 92       	push	r15
    2e00:	0f 93       	push	r16
    2e02:	1f 93       	push	r17
    2e04:	cf 93       	push	r28
    2e06:	df 93       	push	r29
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
    2e0c:	ca 1b       	sub	r28, r26
    2e0e:	db 0b       	sbc	r29, r27
    2e10:	0f b6       	in	r0, 0x3f	; 63
    2e12:	f8 94       	cli
    2e14:	de bf       	out	0x3e, r29	; 62
    2e16:	0f be       	out	0x3f, r0	; 63
    2e18:	cd bf       	out	0x3d, r28	; 61
    2e1a:	09 94       	ijmp

00002e1c <__epilogue_restores__>:
    2e1c:	2a 88       	ldd	r2, Y+18	; 0x12
    2e1e:	39 88       	ldd	r3, Y+17	; 0x11
    2e20:	48 88       	ldd	r4, Y+16	; 0x10
    2e22:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e24:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e26:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e28:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e2a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e2c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e2e:	b9 84       	ldd	r11, Y+9	; 0x09
    2e30:	c8 84       	ldd	r12, Y+8	; 0x08
    2e32:	df 80       	ldd	r13, Y+7	; 0x07
    2e34:	ee 80       	ldd	r14, Y+6	; 0x06
    2e36:	fd 80       	ldd	r15, Y+5	; 0x05
    2e38:	0c 81       	ldd	r16, Y+4	; 0x04
    2e3a:	1b 81       	ldd	r17, Y+3	; 0x03
    2e3c:	aa 81       	ldd	r26, Y+2	; 0x02
    2e3e:	b9 81       	ldd	r27, Y+1	; 0x01
    2e40:	ce 0f       	add	r28, r30
    2e42:	d1 1d       	adc	r29, r1
    2e44:	0f b6       	in	r0, 0x3f	; 63
    2e46:	f8 94       	cli
    2e48:	de bf       	out	0x3e, r29	; 62
    2e4a:	0f be       	out	0x3f, r0	; 63
    2e4c:	cd bf       	out	0x3d, r28	; 61
    2e4e:	ed 01       	movw	r28, r26
    2e50:	08 95       	ret

00002e52 <itoa>:
    2e52:	fb 01       	movw	r30, r22
    2e54:	9f 01       	movw	r18, r30
    2e56:	e8 94       	clt
    2e58:	42 30       	cpi	r20, 0x02	; 2
    2e5a:	c4 f0       	brlt	.+48     	; 0x2e8c <itoa+0x3a>
    2e5c:	45 32       	cpi	r20, 0x25	; 37
    2e5e:	b4 f4       	brge	.+44     	; 0x2e8c <itoa+0x3a>
    2e60:	4a 30       	cpi	r20, 0x0A	; 10
    2e62:	29 f4       	brne	.+10     	; 0x2e6e <itoa+0x1c>
    2e64:	97 fb       	bst	r25, 7
    2e66:	1e f4       	brtc	.+6      	; 0x2e6e <itoa+0x1c>
    2e68:	90 95       	com	r25
    2e6a:	81 95       	neg	r24
    2e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e6e:	64 2f       	mov	r22, r20
    2e70:	77 27       	eor	r23, r23
    2e72:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <__udivmodhi4>
    2e76:	80 5d       	subi	r24, 0xD0	; 208
    2e78:	8a 33       	cpi	r24, 0x3A	; 58
    2e7a:	0c f0       	brlt	.+2      	; 0x2e7e <itoa+0x2c>
    2e7c:	89 5d       	subi	r24, 0xD9	; 217
    2e7e:	81 93       	st	Z+, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	00 97       	sbiw	r24, 0x00	; 0
    2e84:	a1 f7       	brne	.-24     	; 0x2e6e <itoa+0x1c>
    2e86:	16 f4       	brtc	.+4      	; 0x2e8c <itoa+0x3a>
    2e88:	5d e2       	ldi	r21, 0x2D	; 45
    2e8a:	51 93       	st	Z+, r21
    2e8c:	10 82       	st	Z, r1
    2e8e:	c9 01       	movw	r24, r18
    2e90:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <strrev>

00002e94 <strrev>:
    2e94:	dc 01       	movw	r26, r24
    2e96:	fc 01       	movw	r30, r24
    2e98:	67 2f       	mov	r22, r23
    2e9a:	71 91       	ld	r23, Z+
    2e9c:	77 23       	and	r23, r23
    2e9e:	e1 f7       	brne	.-8      	; 0x2e98 <strrev+0x4>
    2ea0:	32 97       	sbiw	r30, 0x02	; 2
    2ea2:	04 c0       	rjmp	.+8      	; 0x2eac <strrev+0x18>
    2ea4:	7c 91       	ld	r23, X
    2ea6:	6d 93       	st	X+, r22
    2ea8:	70 83       	st	Z, r23
    2eaa:	62 91       	ld	r22, -Z
    2eac:	ae 17       	cp	r26, r30
    2eae:	bf 07       	cpc	r27, r31
    2eb0:	c8 f3       	brcs	.-14     	; 0x2ea4 <strrev+0x10>
    2eb2:	08 95       	ret

00002eb4 <__udivmodhi4>:
    2eb4:	aa 1b       	sub	r26, r26
    2eb6:	bb 1b       	sub	r27, r27
    2eb8:	51 e1       	ldi	r21, 0x11	; 17
    2eba:	07 c0       	rjmp	.+14     	; 0x2eca <__udivmodhi4_ep>

00002ebc <__udivmodhi4_loop>:
    2ebc:	aa 1f       	adc	r26, r26
    2ebe:	bb 1f       	adc	r27, r27
    2ec0:	a6 17       	cp	r26, r22
    2ec2:	b7 07       	cpc	r27, r23
    2ec4:	10 f0       	brcs	.+4      	; 0x2eca <__udivmodhi4_ep>
    2ec6:	a6 1b       	sub	r26, r22
    2ec8:	b7 0b       	sbc	r27, r23

00002eca <__udivmodhi4_ep>:
    2eca:	88 1f       	adc	r24, r24
    2ecc:	99 1f       	adc	r25, r25
    2ece:	5a 95       	dec	r21
    2ed0:	a9 f7       	brne	.-22     	; 0x2ebc <__udivmodhi4_loop>
    2ed2:	80 95       	com	r24
    2ed4:	90 95       	com	r25
    2ed6:	bc 01       	movw	r22, r24
    2ed8:	cd 01       	movw	r24, r26
    2eda:	08 95       	ret

00002edc <_exit>:
    2edc:	f8 94       	cli

00002ede <__stop_program>:
    2ede:	ff cf       	rjmp	.-2      	; 0x2ede <__stop_program>
